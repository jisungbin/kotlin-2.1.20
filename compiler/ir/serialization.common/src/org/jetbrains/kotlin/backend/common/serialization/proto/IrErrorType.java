// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

import org.jetbrains.kotlin.protobuf.AbstractParser;
import org.jetbrains.kotlin.protobuf.ByteString;
import org.jetbrains.kotlin.protobuf.CodedInputStream;
import org.jetbrains.kotlin.protobuf.CodedOutputStream;
import org.jetbrains.kotlin.protobuf.ExtensionRegistryLite;
import org.jetbrains.kotlin.protobuf.GeneratedMessageLite;
import org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException;
import org.jetbrains.kotlin.protobuf.Parser;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrErrorType}
 */
public final class IrErrorType extends
        GeneratedMessageLite implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrErrorType)
        IrErrorTypeOrBuilder {
    public static final int ANNOTATION_FIELD_NUMBER = 1;
    private static final IrErrorType defaultInstance;
    private static final long serialVersionUID = 0L;
    public static Parser<IrErrorType> PARSER =
            new AbstractParser<IrErrorType>() {
                @Override
                public IrErrorType parsePartialFrom(
                        CodedInputStream input,
                        ExtensionRegistryLite extensionRegistry)
                        throws InvalidProtocolBufferException {
                    return new IrErrorType(input, extensionRegistry);
                }
            };

    static {
        defaultInstance = new IrErrorType(true);
        defaultInstance.initFields();
    }

    private final ByteString unknownFields;
    private List<IrConstructorCall> annotation_;
    private byte memoizedIsInitialized = -1;
    private int memoizedSerializedSize = -1;

    // Use IrErrorType.newBuilder() to construct.
    private IrErrorType(GeneratedMessageLite.Builder builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
    }
    private IrErrorType(boolean noInit) {
        this.unknownFields = ByteString.EMPTY;
    }

    private IrErrorType(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        ByteString.Output unknownFieldsOutput =
                ByteString.newOutput();
        CodedOutputStream unknownFieldsCodedOutput =
                CodedOutputStream.newInstance(
                        unknownFieldsOutput, 1);
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 10: {
                        if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                            annotation_ = new ArrayList<IrConstructorCall>();
                            mutable_bitField0_ |= 0x00000001;
                        }
                        annotation_.add(input.readMessage(IrConstructorCall.PARSER, extensionRegistry));
                        break;
                    }
                }
            }
        } catch (InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (IOException e) {
            throw new InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this);
        } finally {
            if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                annotation_ = Collections.unmodifiableList(annotation_);
            }
            try {
                unknownFieldsCodedOutput.flush();
            } catch (IOException e) {
                // Should not happen
            } finally {
                unknownFields = unknownFieldsOutput.toByteString();
            }
            makeExtensionsImmutable();
        }
    }

    public static IrErrorType getDefaultInstance() {
        return defaultInstance;
    }

    public static IrErrorType parseFrom(
            ByteString data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrErrorType parseFrom(
            ByteString data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrErrorType parseFrom(byte[] data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrErrorType parseFrom(
            byte[] data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrErrorType parseFrom(InputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrErrorType parseFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static IrErrorType parseDelimitedFrom(InputStream input)
            throws IOException {
        return PARSER.parseDelimitedFrom(input);
    }

    public static IrErrorType parseDelimitedFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }

    public static IrErrorType parseFrom(
            CodedInputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrErrorType parseFrom(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() {
        return Builder.create();
    }

    public static Builder newBuilder(IrErrorType prototype) {
        return newBuilder().mergeFrom(prototype);
    }

    @Override
    public IrErrorType getDefaultInstanceForType() {
        return defaultInstance;
    }

    @Override
    public Parser<IrErrorType> getParserForType() {
        return PARSER;
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    @Override
    public List<IrConstructorCall> getAnnotationList() {
        return annotation_;
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    public List<? extends IrConstructorCallOrBuilder>
    getAnnotationOrBuilderList() {
        return annotation_;
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    @Override
    public int getAnnotationCount() {
        return annotation_.size();
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    @Override
    public IrConstructorCall getAnnotation(int index) {
        return annotation_.get(index);
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
     */
    public IrConstructorCallOrBuilder getAnnotationOrBuilder(
            int index) {
        return annotation_.get(index);
    }

    private void initFields() {
        annotation_ = Collections.emptyList();
    }

    @Override
    public boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        for (int i = 0; i < getAnnotationCount(); i++) {
            if (!getAnnotation(i).isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        memoizedIsInitialized = 1;
        return true;
    }

    @Override
    public void writeTo(CodedOutputStream output)
            throws IOException {
        getSerializedSize();
        for (int i = 0; i < annotation_.size(); i++) {
            output.writeMessage(1, annotation_.get(i));
        }
        output.writeRawBytes(unknownFields);
    }

    @Override
    public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        for (int i = 0; i < annotation_.size(); i++) {
            size += CodedOutputStream
                    .computeMessageSize(1, annotation_.get(i));
        }
        size += unknownFields.size();
        memoizedSerializedSize = size;
        return size;
    }

    @Override
    protected Object writeReplace()
            throws ObjectStreamException {
        return super.writeReplace();
    }

    @Override
    public Builder newBuilderForType() {
        return newBuilder();
    }

    @Override
    public Builder toBuilder() {
        return newBuilder(this);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrErrorType}
     */
    public static final class Builder extends
            GeneratedMessageLite.Builder<
                    IrErrorType, Builder>
            implements
            // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrErrorType)
            IrErrorTypeOrBuilder {
        private int bitField0_;
        private List<IrConstructorCall> annotation_ =
                Collections.emptyList();

        // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrErrorType.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private static Builder create() {
            return new Builder();
        }

        private void maybeForceBuilderInitialization() {
        }

        @Override
        public Builder clear() {
            super.clear();
            annotation_ = Collections.emptyList();
            bitField0_ &= ~0x00000001;
            return this;
        }

        @Override
        public Builder clone() {
            return create().mergeFrom(buildPartial());
        }

        @Override
        public IrErrorType getDefaultInstanceForType() {
            return getDefaultInstance();
        }

        @Override
        public IrErrorType build() {
            IrErrorType result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        @Override
        public IrErrorType buildPartial() {
            IrErrorType result = new IrErrorType(this);
            int from_bitField0_ = bitField0_;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                annotation_ = Collections.unmodifiableList(annotation_);
                bitField0_ &= ~0x00000001;
            }
            result.annotation_ = annotation_;
            return result;
        }

        @Override
        public Builder mergeFrom(IrErrorType other) {
            if (other == getDefaultInstance())
                return this;
            if (!other.annotation_.isEmpty()) {
                if (annotation_.isEmpty()) {
                    annotation_ = other.annotation_;
                    bitField0_ &= ~0x00000001;
                } else {
                    ensureAnnotationIsMutable();
                    annotation_.addAll(other.annotation_);
                }

            }
            setUnknownFields(
                    getUnknownFields().concat(other.unknownFields));
            return this;
        }

        @Override
        public boolean isInitialized() {
            for (int i = 0; i < getAnnotationCount(); i++) {
                if (!getAnnotation(i).isInitialized()) {

                    return false;
                }
            }
            return true;
        }

        @Override
        public Builder mergeFrom(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws IOException {
            IrErrorType parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (InvalidProtocolBufferException e) {
                parsedMessage = (IrErrorType) e.getUnfinishedMessage();
                throw e;
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        private void ensureAnnotationIsMutable() {
            if (!((bitField0_ & 0x00000001) == 0x00000001)) {
                annotation_ = new ArrayList<IrConstructorCall>(annotation_);
                bitField0_ |= 0x00000001;
            }
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
         */
        @Override
        public List<IrConstructorCall> getAnnotationList() {
            return Collections.unmodifiableList(annotation_);
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
         */
        @Override
        public int getAnnotationCount() {
            return annotation_.size();
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
         */
        @Override
        public IrConstructorCall getAnnotation(int index) {
            return annotation_.get(index);
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
         */
        public Builder setAnnotation(
                int index, IrConstructorCall value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureAnnotationIsMutable();
            annotation_.set(index, value);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
         */
        public Builder setAnnotation(
                int index, IrConstructorCall.Builder builderForValue) {
            ensureAnnotationIsMutable();
            annotation_.set(index, builderForValue.build());

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
         */
        public Builder addAnnotation(IrConstructorCall value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureAnnotationIsMutable();
            annotation_.add(value);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
         */
        public Builder addAnnotation(
                int index, IrConstructorCall value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureAnnotationIsMutable();
            annotation_.add(index, value);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
         */
        public Builder addAnnotation(
                IrConstructorCall.Builder builderForValue) {
            ensureAnnotationIsMutable();
            annotation_.add(builderForValue.build());

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
         */
        public Builder addAnnotation(
                int index, IrConstructorCall.Builder builderForValue) {
            ensureAnnotationIsMutable();
            annotation_.add(index, builderForValue.build());

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
         */
        public Builder addAllAnnotation(
                Iterable<? extends IrConstructorCall> values) {
            ensureAnnotationIsMutable();
            addAll(
                    values, annotation_);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
         */
        public Builder clearAnnotation() {
            annotation_ = Collections.emptyList();
            bitField0_ &= ~0x00000001;

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 1;</code>
         */
        public Builder removeAnnotation(int index) {
            ensureAnnotationIsMutable();
            annotation_.remove(index);

            return this;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrErrorType)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrErrorType)
}
