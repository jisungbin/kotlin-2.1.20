// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

import org.jetbrains.kotlin.protobuf.AbstractParser;
import org.jetbrains.kotlin.protobuf.ByteString;
import org.jetbrains.kotlin.protobuf.CodedInputStream;
import org.jetbrains.kotlin.protobuf.CodedOutputStream;
import org.jetbrains.kotlin.protobuf.ExtensionRegistryLite;
import org.jetbrains.kotlin.protobuf.GeneratedMessageLite;
import org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException;
import org.jetbrains.kotlin.protobuf.Parser;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrTry}
 */
public final class IrTry extends
        GeneratedMessageLite implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrTry)
        IrTryOrBuilder {
    public static final int RESULT_FIELD_NUMBER = 1;
    public static final int CATCH_FIELD_NUMBER = 2;
    public static final int FINALLY_FIELD_NUMBER = 3;
    private static final IrTry defaultInstance;
    private static final long serialVersionUID = 0L;
    public static Parser<IrTry> PARSER =
            new AbstractParser<IrTry>() {
                @Override
                public IrTry parsePartialFrom(
                        CodedInputStream input,
                        ExtensionRegistryLite extensionRegistry)
                        throws InvalidProtocolBufferException {
                    return new IrTry(input, extensionRegistry);
                }
            };

    static {
        defaultInstance = new IrTry(true);
        defaultInstance.initFields();
    }

    private final ByteString unknownFields;
    private int bitField0_;
    private IrExpression result_;
    private List<IrStatement> catch_;
    private IrExpression finally_;
    private byte memoizedIsInitialized = -1;
    private int memoizedSerializedSize = -1;

    // Use IrTry.newBuilder() to construct.
    private IrTry(GeneratedMessageLite.Builder builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
    }
    private IrTry(boolean noInit) {
        this.unknownFields = ByteString.EMPTY;
    }

    private IrTry(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        ByteString.Output unknownFieldsOutput =
                ByteString.newOutput();
        CodedOutputStream unknownFieldsCodedOutput =
                CodedOutputStream.newInstance(
                        unknownFieldsOutput, 1);
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 10: {
                        IrExpression.Builder subBuilder = null;
                        if (((bitField0_ & 0x00000001) == 0x00000001)) {
                            subBuilder = result_.toBuilder();
                        }
                        result_ = input.readMessage(IrExpression.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom(result_);
                            result_ = subBuilder.buildPartial();
                        }
                        bitField0_ |= 0x00000001;
                        break;
                    }
                    case 18: {
                        if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                            catch_ = new ArrayList<IrStatement>();
                            mutable_bitField0_ |= 0x00000002;
                        }
                        catch_.add(input.readMessage(IrStatement.PARSER, extensionRegistry));
                        break;
                    }
                    case 26: {
                        IrExpression.Builder subBuilder = null;
                        if (((bitField0_ & 0x00000002) == 0x00000002)) {
                            subBuilder = finally_.toBuilder();
                        }
                        finally_ = input.readMessage(IrExpression.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom(finally_);
                            finally_ = subBuilder.buildPartial();
                        }
                        bitField0_ |= 0x00000002;
                        break;
                    }
                }
            }
        } catch (InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (IOException e) {
            throw new InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this);
        } finally {
            if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                catch_ = Collections.unmodifiableList(catch_);
            }
            try {
                unknownFieldsCodedOutput.flush();
            } catch (IOException e) {
                // Should not happen
            } finally {
                unknownFields = unknownFieldsOutput.toByteString();
            }
            makeExtensionsImmutable();
        }
    }

    public static IrTry getDefaultInstance() {
        return defaultInstance;
    }

    public static IrTry parseFrom(
            ByteString data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrTry parseFrom(
            ByteString data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrTry parseFrom(byte[] data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrTry parseFrom(
            byte[] data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrTry parseFrom(InputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrTry parseFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static IrTry parseDelimitedFrom(InputStream input)
            throws IOException {
        return PARSER.parseDelimitedFrom(input);
    }

    public static IrTry parseDelimitedFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }

    public static IrTry parseFrom(
            CodedInputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrTry parseFrom(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() {
        return Builder.create();
    }

    public static Builder newBuilder(IrTry prototype) {
        return newBuilder().mergeFrom(prototype);
    }

    @Override
    public IrTry getDefaultInstanceForType() {
        return defaultInstance;
    }

    @Override
    public Parser<IrTry> getParserForType() {
        return PARSER;
    }

    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression result = 1;</code>
     */
    @Override
    public boolean hasResult() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
    }

    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression result = 1;</code>
     */
    @Override
    public IrExpression getResult() {
        return result_;
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
     */
    @Override
    public List<IrStatement> getCatchList() {
        return catch_;
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
     */
    public List<? extends IrStatementOrBuilder>
    getCatchOrBuilderList() {
        return catch_;
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
     */
    @Override
    public int getCatchCount() {
        return catch_.size();
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
     */
    @Override
    public IrStatement getCatch(int index) {
        return catch_.get(index);
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
     */
    public IrStatementOrBuilder getCatchOrBuilder(
            int index) {
        return catch_.get(index);
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression finally = 3;</code>
     */
    @Override
    public boolean hasFinally() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression finally = 3;</code>
     */
    @Override
    public IrExpression getFinally() {
        return finally_;
    }

    private void initFields() {
        result_ = IrExpression.getDefaultInstance();
        catch_ = Collections.emptyList();
        finally_ = IrExpression.getDefaultInstance();
    }

    @Override
    public boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasResult()) {
            memoizedIsInitialized = 0;
            return false;
        }
        if (!getResult().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
        }
        for (int i = 0; i < getCatchCount(); i++) {
            if (!getCatch(i).isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        if (hasFinally()) {
            if (!getFinally().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        memoizedIsInitialized = 1;
        return true;
    }

    @Override
    public void writeTo(CodedOutputStream output)
            throws IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            output.writeMessage(1, result_);
        }
        for (int i = 0; i < catch_.size(); i++) {
            output.writeMessage(2, catch_.get(i));
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            output.writeMessage(3, finally_);
        }
        output.writeRawBytes(unknownFields);
    }

    @Override
    public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += CodedOutputStream
                    .computeMessageSize(1, result_);
        }
        for (int i = 0; i < catch_.size(); i++) {
            size += CodedOutputStream
                    .computeMessageSize(2, catch_.get(i));
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += CodedOutputStream
                    .computeMessageSize(3, finally_);
        }
        size += unknownFields.size();
        memoizedSerializedSize = size;
        return size;
    }

    @Override
    protected Object writeReplace()
            throws ObjectStreamException {
        return super.writeReplace();
    }

    @Override
    public Builder newBuilderForType() {
        return newBuilder();
    }

    @Override
    public Builder toBuilder() {
        return newBuilder(this);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrTry}
     */
    public static final class Builder extends
            GeneratedMessageLite.Builder<
                    IrTry, Builder>
            implements
            // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrTry)
            IrTryOrBuilder {
        private int bitField0_;
        private IrExpression result_ = IrExpression.getDefaultInstance();
        private List<IrStatement> catch_ =
                Collections.emptyList();
        private IrExpression finally_ = IrExpression.getDefaultInstance();

        // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrTry.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private static Builder create() {
            return new Builder();
        }

        private void maybeForceBuilderInitialization() {
        }

        @Override
        public Builder clear() {
            super.clear();
            result_ = IrExpression.getDefaultInstance();
            bitField0_ &= ~0x00000001;
            catch_ = Collections.emptyList();
            bitField0_ &= ~0x00000002;
            finally_ = IrExpression.getDefaultInstance();
            bitField0_ &= ~0x00000004;
            return this;
        }

        @Override
        public Builder clone() {
            return create().mergeFrom(buildPartial());
        }

        @Override
        public IrTry getDefaultInstanceForType() {
            return getDefaultInstance();
        }

        @Override
        public IrTry build() {
            IrTry result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        @Override
        public IrTry buildPartial() {
            IrTry result = new IrTry(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                to_bitField0_ |= 0x00000001;
            }
            result.result_ = result_;
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                catch_ = Collections.unmodifiableList(catch_);
                bitField0_ &= ~0x00000002;
            }
            result.catch_ = catch_;
            if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                to_bitField0_ |= 0x00000002;
            }
            result.finally_ = finally_;
            result.bitField0_ = to_bitField0_;
            return result;
        }

        @Override
        public Builder mergeFrom(IrTry other) {
            if (other == getDefaultInstance())
                return this;
            if (other.hasResult()) {
                mergeResult(other.getResult());
            }
            if (!other.catch_.isEmpty()) {
                if (catch_.isEmpty()) {
                    catch_ = other.catch_;
                    bitField0_ &= ~0x00000002;
                } else {
                    ensureCatchIsMutable();
                    catch_.addAll(other.catch_);
                }

            }
            if (other.hasFinally()) {
                mergeFinally(other.getFinally());
            }
            setUnknownFields(
                    getUnknownFields().concat(other.unknownFields));
            return this;
        }

        @Override
        public boolean isInitialized() {
            if (!hasResult()) {

                return false;
            }
            if (!getResult().isInitialized()) {

                return false;
            }
            for (int i = 0; i < getCatchCount(); i++) {
                if (!getCatch(i).isInitialized()) {

                    return false;
                }
            }
            if (hasFinally()) {
                if (!getFinally().isInitialized()) {

                    return false;
                }
            }
            return true;
        }

        @Override
        public Builder mergeFrom(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws IOException {
            IrTry parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (InvalidProtocolBufferException e) {
                parsedMessage = (IrTry) e.getUnfinishedMessage();
                throw e;
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression result = 1;</code>
         */
        @Override
        public boolean hasResult() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression result = 1;</code>
         */
        @Override
        public IrExpression getResult() {
            return result_;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression result = 1;</code>
         */
        public Builder setResult(IrExpression value) {
            if (value == null) {
                throw new NullPointerException();
            }
            result_ = value;

            bitField0_ |= 0x00000001;
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression result = 1;</code>
         */
        public Builder setResult(
                IrExpression.Builder builderForValue) {
            result_ = builderForValue.build();

            bitField0_ |= 0x00000001;
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression result = 1;</code>
         */
        public Builder mergeResult(IrExpression value) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                    result_ != IrExpression.getDefaultInstance()) {
                result_ =
                        IrExpression.newBuilder(result_).mergeFrom(value).buildPartial();
            } else {
                result_ = value;
            }

            bitField0_ |= 0x00000001;
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression result = 1;</code>
         */
        public Builder clearResult() {
            result_ = IrExpression.getDefaultInstance();

            bitField0_ &= ~0x00000001;
            return this;
        }

        private void ensureCatchIsMutable() {
            if (!((bitField0_ & 0x00000002) == 0x00000002)) {
                catch_ = new ArrayList<IrStatement>(catch_);
                bitField0_ |= 0x00000002;
            }
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
         */
        @Override
        public List<IrStatement> getCatchList() {
            return Collections.unmodifiableList(catch_);
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
         */
        @Override
        public int getCatchCount() {
            return catch_.size();
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
         */
        @Override
        public IrStatement getCatch(int index) {
            return catch_.get(index);
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
         */
        public Builder setCatch(
                int index, IrStatement value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureCatchIsMutable();
            catch_.set(index, value);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
         */
        public Builder setCatch(
                int index, IrStatement.Builder builderForValue) {
            ensureCatchIsMutable();
            catch_.set(index, builderForValue.build());

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
         */
        public Builder addCatch(IrStatement value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureCatchIsMutable();
            catch_.add(value);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
         */
        public Builder addCatch(
                int index, IrStatement value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureCatchIsMutable();
            catch_.add(index, value);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
         */
        public Builder addCatch(
                IrStatement.Builder builderForValue) {
            ensureCatchIsMutable();
            catch_.add(builderForValue.build());

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
         */
        public Builder addCatch(
                int index, IrStatement.Builder builderForValue) {
            ensureCatchIsMutable();
            catch_.add(index, builderForValue.build());

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
         */
        public Builder addAllCatch(
                Iterable<? extends IrStatement> values) {
            ensureCatchIsMutable();
            addAll(
                    values, catch_);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
         */
        public Builder clearCatch() {
            catch_ = Collections.emptyList();
            bitField0_ &= ~0x00000002;

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement catch = 2;</code>
         */
        public Builder removeCatch(int index) {
            ensureCatchIsMutable();
            catch_.remove(index);

            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression finally = 3;</code>
         */
        @Override
        public boolean hasFinally() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression finally = 3;</code>
         */
        @Override
        public IrExpression getFinally() {
            return finally_;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression finally = 3;</code>
         */
        public Builder setFinally(IrExpression value) {
            if (value == null) {
                throw new NullPointerException();
            }
            finally_ = value;

            bitField0_ |= 0x00000004;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression finally = 3;</code>
         */
        public Builder setFinally(
                IrExpression.Builder builderForValue) {
            finally_ = builderForValue.build();

            bitField0_ |= 0x00000004;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression finally = 3;</code>
         */
        public Builder mergeFinally(IrExpression value) {
            if (((bitField0_ & 0x00000004) == 0x00000004) &&
                    finally_ != IrExpression.getDefaultInstance()) {
                finally_ =
                        IrExpression.newBuilder(finally_).mergeFrom(value).buildPartial();
            } else {
                finally_ = value;
            }

            bitField0_ |= 0x00000004;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression finally = 3;</code>
         */
        public Builder clearFinally() {
            finally_ = IrExpression.getDefaultInstance();

            bitField0_ &= ~0x00000004;
            return this;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrTry)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrTry)
}
