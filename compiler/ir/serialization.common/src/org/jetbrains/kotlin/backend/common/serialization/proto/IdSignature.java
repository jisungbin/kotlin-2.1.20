// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

import org.jetbrains.kotlin.protobuf.AbstractParser;
import org.jetbrains.kotlin.protobuf.ByteString;
import org.jetbrains.kotlin.protobuf.CodedInputStream;
import org.jetbrains.kotlin.protobuf.CodedOutputStream;
import org.jetbrains.kotlin.protobuf.ExtensionRegistryLite;
import org.jetbrains.kotlin.protobuf.GeneratedMessageLite;
import org.jetbrains.kotlin.protobuf.Internal;
import org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException;
import org.jetbrains.kotlin.protobuf.Parser;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamException;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature}
 */
public final class IdSignature extends
        GeneratedMessageLite implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature)
        IdSignatureOrBuilder {
    public static final int PUBLIC_SIG_FIELD_NUMBER = 1;
    public static final int PRIVATE_SIG_FIELD_NUMBER = 2;
    public static final int ACCESSOR_SIG_FIELD_NUMBER = 3;
    public static final int SCOPED_LOCAL_SIG_FIELD_NUMBER = 4;
    public static final int COMPOSITE_SIG_FIELD_NUMBER = 5;
    public static final int LOCAL_SIG_FIELD_NUMBER = 6;
    public static final int FILE_SIG_FIELD_NUMBER = 7;
    private static final IdSignature defaultInstance;
    private static final long serialVersionUID = 0L;
    public static Parser<IdSignature> PARSER =
            new AbstractParser<IdSignature>() {
                @Override
                public IdSignature parsePartialFrom(
                        CodedInputStream input,
                        ExtensionRegistryLite extensionRegistry)
                        throws InvalidProtocolBufferException {
                    return new IdSignature(input, extensionRegistry);
                }
            };

    static {
        defaultInstance = new IdSignature(true);
        defaultInstance.initFields();
    }

    private final ByteString unknownFields;
    private int bitField0_;

    private int idSigCase_ = 0;
    private Object idSig_;
    private byte memoizedIsInitialized = -1;
    private int memoizedSerializedSize = -1;

    // Use IdSignature.newBuilder() to construct.
    private IdSignature(GeneratedMessageLite.Builder builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
    }

    private IdSignature(boolean noInit) {
        this.unknownFields = ByteString.EMPTY;
    }

    private IdSignature(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        ByteString.Output unknownFieldsOutput =
                ByteString.newOutput();
        CodedOutputStream unknownFieldsCodedOutput =
                CodedOutputStream.newInstance(
                        unknownFieldsOutput, 1);
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 10: {
                        CommonIdSignature.Builder subBuilder = null;
                        if (idSigCase_ == 1) {
                            subBuilder = ((CommonIdSignature) idSig_).toBuilder();
                        }
                        idSig_ = input.readMessage(CommonIdSignature.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom((CommonIdSignature) idSig_);
                            idSig_ = subBuilder.buildPartial();
                        }
                        idSigCase_ = 1;
                        break;
                    }
                    case 18: {
                        FileLocalIdSignature.Builder subBuilder = null;
                        if (idSigCase_ == 2) {
                            subBuilder = ((FileLocalIdSignature) idSig_).toBuilder();
                        }
                        idSig_ = input.readMessage(FileLocalIdSignature.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom((FileLocalIdSignature) idSig_);
                            idSig_ = subBuilder.buildPartial();
                        }
                        idSigCase_ = 2;
                        break;
                    }
                    case 26: {
                        AccessorIdSignature.Builder subBuilder = null;
                        if (idSigCase_ == 3) {
                            subBuilder = ((AccessorIdSignature) idSig_).toBuilder();
                        }
                        idSig_ = input.readMessage(AccessorIdSignature.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom((AccessorIdSignature) idSig_);
                            idSig_ = subBuilder.buildPartial();
                        }
                        idSigCase_ = 3;
                        break;
                    }
                    case 32: {
                        idSigCase_ = 4;
                        idSig_ = input.readInt32();
                        break;
                    }
                    case 42: {
                        CompositeSignature.Builder subBuilder = null;
                        if (idSigCase_ == 5) {
                            subBuilder = ((CompositeSignature) idSig_).toBuilder();
                        }
                        idSig_ = input.readMessage(CompositeSignature.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom((CompositeSignature) idSig_);
                            idSig_ = subBuilder.buildPartial();
                        }
                        idSigCase_ = 5;
                        break;
                    }
                    case 50: {
                        LocalSignature.Builder subBuilder = null;
                        if (idSigCase_ == 6) {
                            subBuilder = ((LocalSignature) idSig_).toBuilder();
                        }
                        idSig_ = input.readMessage(LocalSignature.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom((LocalSignature) idSig_);
                            idSig_ = subBuilder.buildPartial();
                        }
                        idSigCase_ = 6;
                        break;
                    }
                    case 58: {
                        FileSignature.Builder subBuilder = null;
                        if (idSigCase_ == 7) {
                            subBuilder = ((FileSignature) idSig_).toBuilder();
                        }
                        idSig_ = input.readMessage(FileSignature.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom((FileSignature) idSig_);
                            idSig_ = subBuilder.buildPartial();
                        }
                        idSigCase_ = 7;
                        break;
                    }
                }
            }
        } catch (InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (IOException e) {
            throw new InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this);
        } finally {
            try {
                unknownFieldsCodedOutput.flush();
            } catch (IOException e) {
                // Should not happen
            } finally {
                unknownFields = unknownFieldsOutput.toByteString();
            }
            makeExtensionsImmutable();
        }
    }

    public static IdSignature getDefaultInstance() {
        return defaultInstance;
    }

    public static IdSignature parseFrom(
            ByteString data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IdSignature parseFrom(
            ByteString data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IdSignature parseFrom(byte[] data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IdSignature parseFrom(
            byte[] data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IdSignature parseFrom(InputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IdSignature parseFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static IdSignature parseDelimitedFrom(InputStream input)
            throws IOException {
        return PARSER.parseDelimitedFrom(input);
    }

    public static IdSignature parseDelimitedFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }

    public static IdSignature parseFrom(
            CodedInputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IdSignature parseFrom(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() {
        return Builder.create();
    }

    public static Builder newBuilder(IdSignature prototype) {
        return newBuilder().mergeFrom(prototype);
    }

    @Override
    public IdSignature getDefaultInstanceForType() {
        return defaultInstance;
    }

    @Override
    public Parser<IdSignature> getParserForType() {
        return PARSER;
    }

    public IdSigCase
    getIdSigCase() {
        return IdSigCase.valueOf(
                idSigCase_);
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
     */
    @Override
    public boolean hasPublicSig() {
        return idSigCase_ == 1;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
     */
    @Override
    public CommonIdSignature getPublicSig() {
        if (idSigCase_ == 1) {
            return (CommonIdSignature) idSig_;
        }
        return CommonIdSignature.getDefaultInstance();
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
     */
    @Override
    public boolean hasPrivateSig() {
        return idSigCase_ == 2;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
     */
    @Override
    public FileLocalIdSignature getPrivateSig() {
        if (idSigCase_ == 2) {
            return (FileLocalIdSignature) idSig_;
        }
        return FileLocalIdSignature.getDefaultInstance();
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
     */
    @Override
    public boolean hasAccessorSig() {
        return idSigCase_ == 3;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
     */
    @Override
    public AccessorIdSignature getAccessorSig() {
        if (idSigCase_ == 3) {
            return (AccessorIdSignature) idSig_;
        }
        return AccessorIdSignature.getDefaultInstance();
    }

    /**
     * <code>optional int32 scoped_local_sig = 4;</code>
     */
    @Override
    public boolean hasScopedLocalSig() {
        return idSigCase_ == 4;
    }

    /**
     * <code>optional int32 scoped_local_sig = 4;</code>
     */
    @Override
    public int getScopedLocalSig() {
        if (idSigCase_ == 4) {
            return (Integer) idSig_;
        }
        return 0;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
     */
    @Override
    public boolean hasCompositeSig() {
        return idSigCase_ == 5;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
     */
    @Override
    public CompositeSignature getCompositeSig() {
        if (idSigCase_ == 5) {
            return (CompositeSignature) idSig_;
        }
        return CompositeSignature.getDefaultInstance();
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
     */
    @Override
    public boolean hasLocalSig() {
        return idSigCase_ == 6;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
     */
    @Override
    public LocalSignature getLocalSig() {
        if (idSigCase_ == 6) {
            return (LocalSignature) idSig_;
        }
        return LocalSignature.getDefaultInstance();
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
     */
    @Override
    public boolean hasFileSig() {
        return idSigCase_ == 7;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
     */
    @Override
    public FileSignature getFileSig() {
        if (idSigCase_ == 7) {
            return (FileSignature) idSig_;
        }
        return FileSignature.getDefaultInstance();
    }

    private void initFields() {
    }

    @Override
    public boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (hasPrivateSig()) {
            if (!getPrivateSig().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        if (hasAccessorSig()) {
            if (!getAccessorSig().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        if (hasCompositeSig()) {
            if (!getCompositeSig().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        memoizedIsInitialized = 1;
        return true;
    }

    @Override
    public void writeTo(CodedOutputStream output)
            throws IOException {
        getSerializedSize();
        if (idSigCase_ == 1) {
            output.writeMessage(1, (CommonIdSignature) idSig_);
        }
        if (idSigCase_ == 2) {
            output.writeMessage(2, (FileLocalIdSignature) idSig_);
        }
        if (idSigCase_ == 3) {
            output.writeMessage(3, (AccessorIdSignature) idSig_);
        }
        if (idSigCase_ == 4) {
            output.writeInt32(
                    4, (Integer) idSig_);
        }
        if (idSigCase_ == 5) {
            output.writeMessage(5, (CompositeSignature) idSig_);
        }
        if (idSigCase_ == 6) {
            output.writeMessage(6, (LocalSignature) idSig_);
        }
        if (idSigCase_ == 7) {
            output.writeMessage(7, (FileSignature) idSig_);
        }
        output.writeRawBytes(unknownFields);
    }

    @Override
    public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (idSigCase_ == 1) {
            size += CodedOutputStream
                    .computeMessageSize(1, (CommonIdSignature) idSig_);
        }
        if (idSigCase_ == 2) {
            size += CodedOutputStream
                    .computeMessageSize(2, (FileLocalIdSignature) idSig_);
        }
        if (idSigCase_ == 3) {
            size += CodedOutputStream
                    .computeMessageSize(3, (AccessorIdSignature) idSig_);
        }
        if (idSigCase_ == 4) {
            size += CodedOutputStream
                    .computeInt32Size(
                            4, (Integer) idSig_);
        }
        if (idSigCase_ == 5) {
            size += CodedOutputStream
                    .computeMessageSize(5, (CompositeSignature) idSig_);
        }
        if (idSigCase_ == 6) {
            size += CodedOutputStream
                    .computeMessageSize(6, (LocalSignature) idSig_);
        }
        if (idSigCase_ == 7) {
            size += CodedOutputStream
                    .computeMessageSize(7, (FileSignature) idSig_);
        }
        size += unknownFields.size();
        memoizedSerializedSize = size;
        return size;
    }

    @Override
    protected Object writeReplace()
            throws ObjectStreamException {
        return super.writeReplace();
    }

    @Override
    public Builder newBuilderForType() {
        return newBuilder();
    }

    @Override
    public Builder toBuilder() {
        return newBuilder(this);
    }

    public enum IdSigCase
            implements Internal.EnumLite {
        PUBLIC_SIG(1),
        PRIVATE_SIG(2),
        ACCESSOR_SIG(3),
        SCOPED_LOCAL_SIG(4),
        COMPOSITE_SIG(5),
        LOCAL_SIG(6),
        FILE_SIG(7),
        IDSIG_NOT_SET(0);
        private int value = 0;

        IdSigCase(int value) {
            this.value = value;
        }

        public static IdSigCase valueOf(int value) {
            switch (value) {
                case 1:
                    return PUBLIC_SIG;
                case 2:
                    return PRIVATE_SIG;
                case 3:
                    return ACCESSOR_SIG;
                case 4:
                    return SCOPED_LOCAL_SIG;
                case 5:
                    return COMPOSITE_SIG;
                case 6:
                    return LOCAL_SIG;
                case 7:
                    return FILE_SIG;
                case 0:
                    return IDSIG_NOT_SET;
                default:
                    throw new IllegalArgumentException(
                            "Value is undefined for this oneof enum.");
            }
        }

        @Override
        public int getNumber() {
            return this.value;
        }
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature}
     */
    public static final class Builder extends
            GeneratedMessageLite.Builder<
                    IdSignature, Builder>
            implements
            // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature)
            IdSignatureOrBuilder {
        private int idSigCase_ = 0;
        private Object idSig_;
        private int bitField0_;

        // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private static Builder create() {
            return new Builder();
        }

        private void maybeForceBuilderInitialization() {
        }

        @Override
        public Builder clear() {
            super.clear();
            idSigCase_ = 0;
            idSig_ = null;
            return this;
        }

        @Override
        public Builder clone() {
            return create().mergeFrom(buildPartial());
        }

        @Override
        public IdSignature getDefaultInstanceForType() {
            return getDefaultInstance();
        }

        @Override
        public IdSignature build() {
            IdSignature result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        @Override
        public IdSignature buildPartial() {
            IdSignature result = new IdSignature(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (idSigCase_ == 1) {
                result.idSig_ = idSig_;
            }
            if (idSigCase_ == 2) {
                result.idSig_ = idSig_;
            }
            if (idSigCase_ == 3) {
                result.idSig_ = idSig_;
            }
            if (idSigCase_ == 4) {
                result.idSig_ = idSig_;
            }
            if (idSigCase_ == 5) {
                result.idSig_ = idSig_;
            }
            if (idSigCase_ == 6) {
                result.idSig_ = idSig_;
            }
            if (idSigCase_ == 7) {
                result.idSig_ = idSig_;
            }
            result.bitField0_ = to_bitField0_;
            result.idSigCase_ = idSigCase_;
            return result;
        }

        @Override
        public Builder mergeFrom(IdSignature other) {
            if (other == getDefaultInstance())
                return this;
            switch (other.getIdSigCase()) {
                case PUBLIC_SIG: {
                    mergePublicSig(other.getPublicSig());
                    break;
                }
                case PRIVATE_SIG: {
                    mergePrivateSig(other.getPrivateSig());
                    break;
                }
                case ACCESSOR_SIG: {
                    mergeAccessorSig(other.getAccessorSig());
                    break;
                }
                case SCOPED_LOCAL_SIG: {
                    setScopedLocalSig(other.getScopedLocalSig());
                    break;
                }
                case COMPOSITE_SIG: {
                    mergeCompositeSig(other.getCompositeSig());
                    break;
                }
                case LOCAL_SIG: {
                    mergeLocalSig(other.getLocalSig());
                    break;
                }
                case FILE_SIG: {
                    mergeFileSig(other.getFileSig());
                    break;
                }
                case IDSIG_NOT_SET: {
                    break;
                }
            }
            setUnknownFields(
                    getUnknownFields().concat(other.unknownFields));
            return this;
        }

        @Override
        public boolean isInitialized() {
            if (hasPrivateSig()) {
                if (!getPrivateSig().isInitialized()) {

                    return false;
                }
            }
            if (hasAccessorSig()) {
                if (!getAccessorSig().isInitialized()) {

                    return false;
                }
            }
            if (hasCompositeSig()) {
                if (!getCompositeSig().isInitialized()) {

                    return false;
                }
            }
            return true;
        }

        @Override
        public Builder mergeFrom(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws IOException {
            IdSignature parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (InvalidProtocolBufferException e) {
                parsedMessage = (IdSignature) e.getUnfinishedMessage();
                throw e;
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        public IdSigCase
        getIdSigCase() {
            return IdSigCase.valueOf(
                    idSigCase_);
        }

        public Builder clearIdSig() {
            idSigCase_ = 0;
            idSig_ = null;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
         */
        @Override
        public boolean hasPublicSig() {
            return idSigCase_ == 1;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
         */
        @Override
        public CommonIdSignature getPublicSig() {
            if (idSigCase_ == 1) {
                return (CommonIdSignature) idSig_;
            }
            return CommonIdSignature.getDefaultInstance();
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
         */
        public Builder setPublicSig(CommonIdSignature value) {
            if (value == null) {
                throw new NullPointerException();
            }
            idSig_ = value;

            idSigCase_ = 1;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
         */
        public Builder setPublicSig(
                CommonIdSignature.Builder builderForValue) {
            idSig_ = builderForValue.build();

            idSigCase_ = 1;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
         */
        public Builder mergePublicSig(CommonIdSignature value) {
            if (idSigCase_ == 1 &&
                    idSig_ != CommonIdSignature.getDefaultInstance()) {
                idSig_ = CommonIdSignature.newBuilder((CommonIdSignature) idSig_)
                        .mergeFrom(value).buildPartial();
            } else {
                idSig_ = value;
            }

            idSigCase_ = 1;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature public_sig = 1;</code>
         */
        public Builder clearPublicSig() {
            if (idSigCase_ == 1) {
                idSigCase_ = 0;
                idSig_ = null;

            }
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
         */
        @Override
        public boolean hasPrivateSig() {
            return idSigCase_ == 2;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
         */
        @Override
        public FileLocalIdSignature getPrivateSig() {
            if (idSigCase_ == 2) {
                return (FileLocalIdSignature) idSig_;
            }
            return FileLocalIdSignature.getDefaultInstance();
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
         */
        public Builder setPrivateSig(FileLocalIdSignature value) {
            if (value == null) {
                throw new NullPointerException();
            }
            idSig_ = value;

            idSigCase_ = 2;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
         */
        public Builder setPrivateSig(
                FileLocalIdSignature.Builder builderForValue) {
            idSig_ = builderForValue.build();

            idSigCase_ = 2;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
         */
        public Builder mergePrivateSig(FileLocalIdSignature value) {
            if (idSigCase_ == 2 &&
                    idSig_ != FileLocalIdSignature.getDefaultInstance()) {
                idSig_ = FileLocalIdSignature.newBuilder((FileLocalIdSignature) idSig_)
                        .mergeFrom(value).buildPartial();
            } else {
                idSig_ = value;
            }

            idSigCase_ = 2;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.FileLocalIdSignature private_sig = 2;</code>
         */
        public Builder clearPrivateSig() {
            if (idSigCase_ == 2) {
                idSigCase_ = 0;
                idSig_ = null;

            }
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
         */
        @Override
        public boolean hasAccessorSig() {
            return idSigCase_ == 3;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
         */
        @Override
        public AccessorIdSignature getAccessorSig() {
            if (idSigCase_ == 3) {
                return (AccessorIdSignature) idSig_;
            }
            return AccessorIdSignature.getDefaultInstance();
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
         */
        public Builder setAccessorSig(AccessorIdSignature value) {
            if (value == null) {
                throw new NullPointerException();
            }
            idSig_ = value;

            idSigCase_ = 3;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
         */
        public Builder setAccessorSig(
                AccessorIdSignature.Builder builderForValue) {
            idSig_ = builderForValue.build();

            idSigCase_ = 3;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
         */
        public Builder mergeAccessorSig(AccessorIdSignature value) {
            if (idSigCase_ == 3 &&
                    idSig_ != AccessorIdSignature.getDefaultInstance()) {
                idSig_ = AccessorIdSignature.newBuilder((AccessorIdSignature) idSig_)
                        .mergeFrom(value).buildPartial();
            } else {
                idSig_ = value;
            }

            idSigCase_ = 3;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.AccessorIdSignature accessor_sig = 3;</code>
         */
        public Builder clearAccessorSig() {
            if (idSigCase_ == 3) {
                idSigCase_ = 0;
                idSig_ = null;

            }
            return this;
        }

        /**
         * <code>optional int32 scoped_local_sig = 4;</code>
         */
        @Override
        public boolean hasScopedLocalSig() {
            return idSigCase_ == 4;
        }

        /**
         * <code>optional int32 scoped_local_sig = 4;</code>
         */
        @Override
        public int getScopedLocalSig() {
            if (idSigCase_ == 4) {
                return (Integer) idSig_;
            }
            return 0;
        }

        /**
         * <code>optional int32 scoped_local_sig = 4;</code>
         */
        public Builder setScopedLocalSig(int value) {
            idSigCase_ = 4;
            idSig_ = value;

            return this;
        }

        /**
         * <code>optional int32 scoped_local_sig = 4;</code>
         */
        public Builder clearScopedLocalSig() {
            if (idSigCase_ == 4) {
                idSigCase_ = 0;
                idSig_ = null;

            }
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
         */
        @Override
        public boolean hasCompositeSig() {
            return idSigCase_ == 5;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
         */
        @Override
        public CompositeSignature getCompositeSig() {
            if (idSigCase_ == 5) {
                return (CompositeSignature) idSig_;
            }
            return CompositeSignature.getDefaultInstance();
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
         */
        public Builder setCompositeSig(CompositeSignature value) {
            if (value == null) {
                throw new NullPointerException();
            }
            idSig_ = value;

            idSigCase_ = 5;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
         */
        public Builder setCompositeSig(
                CompositeSignature.Builder builderForValue) {
            idSig_ = builderForValue.build();

            idSigCase_ = 5;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
         */
        public Builder mergeCompositeSig(CompositeSignature value) {
            if (idSigCase_ == 5 &&
                    idSig_ != CompositeSignature.getDefaultInstance()) {
                idSig_ = CompositeSignature.newBuilder((CompositeSignature) idSig_)
                        .mergeFrom(value).buildPartial();
            } else {
                idSig_ = value;
            }

            idSigCase_ = 5;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.CompositeSignature composite_sig = 5;</code>
         */
        public Builder clearCompositeSig() {
            if (idSigCase_ == 5) {
                idSigCase_ = 0;
                idSig_ = null;

            }
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
         */
        @Override
        public boolean hasLocalSig() {
            return idSigCase_ == 6;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
         */
        @Override
        public LocalSignature getLocalSig() {
            if (idSigCase_ == 6) {
                return (LocalSignature) idSig_;
            }
            return LocalSignature.getDefaultInstance();
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
         */
        public Builder setLocalSig(LocalSignature value) {
            if (value == null) {
                throw new NullPointerException();
            }
            idSig_ = value;

            idSigCase_ = 6;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
         */
        public Builder setLocalSig(
                LocalSignature.Builder builderForValue) {
            idSig_ = builderForValue.build();

            idSigCase_ = 6;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
         */
        public Builder mergeLocalSig(LocalSignature value) {
            if (idSigCase_ == 6 &&
                    idSig_ != LocalSignature.getDefaultInstance()) {
                idSig_ = LocalSignature.newBuilder((LocalSignature) idSig_)
                        .mergeFrom(value).buildPartial();
            } else {
                idSig_ = value;
            }

            idSigCase_ = 6;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.LocalSignature local_sig = 6;</code>
         */
        public Builder clearLocalSig() {
            if (idSigCase_ == 6) {
                idSigCase_ = 0;
                idSig_ = null;

            }
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
         */
        @Override
        public boolean hasFileSig() {
            return idSigCase_ == 7;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
         */
        @Override
        public FileSignature getFileSig() {
            if (idSigCase_ == 7) {
                return (FileSignature) idSig_;
            }
            return FileSignature.getDefaultInstance();
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
         */
        public Builder setFileSig(FileSignature value) {
            if (value == null) {
                throw new NullPointerException();
            }
            idSig_ = value;

            idSigCase_ = 7;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
         */
        public Builder setFileSig(
                FileSignature.Builder builderForValue) {
            idSig_ = builderForValue.build();

            idSigCase_ = 7;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
         */
        public Builder mergeFileSig(FileSignature value) {
            if (idSigCase_ == 7 &&
                    idSig_ != FileSignature.getDefaultInstance()) {
                idSig_ = FileSignature.newBuilder((FileSignature) idSig_)
                        .mergeFrom(value).buildPartial();
            } else {
                idSig_ = value;
            }

            idSigCase_ = 7;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.FileSignature file_sig = 7;</code>
         */
        public Builder clearFileSig() {
            if (idSigCase_ == 7) {
                idSigCase_ = 0;
                idSig_ = null;

            }
            return this;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature)
}
