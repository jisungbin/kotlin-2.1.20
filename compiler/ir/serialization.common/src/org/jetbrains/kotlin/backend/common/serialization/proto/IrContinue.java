// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

import org.jetbrains.kotlin.protobuf.AbstractParser;
import org.jetbrains.kotlin.protobuf.ByteString;
import org.jetbrains.kotlin.protobuf.CodedInputStream;
import org.jetbrains.kotlin.protobuf.CodedOutputStream;
import org.jetbrains.kotlin.protobuf.ExtensionRegistryLite;
import org.jetbrains.kotlin.protobuf.GeneratedMessageLite;
import org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException;
import org.jetbrains.kotlin.protobuf.Parser;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamException;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrContinue}
 */
public final class IrContinue extends
        GeneratedMessageLite implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrContinue)
        IrContinueOrBuilder {
    public static final int LOOP_ID_FIELD_NUMBER = 1;
    public static final int LABEL_FIELD_NUMBER = 2;
    private static final IrContinue defaultInstance;
    private static final long serialVersionUID = 0L;
    public static Parser<IrContinue> PARSER =
            new AbstractParser<IrContinue>() {
                @Override
                public IrContinue parsePartialFrom(
                        CodedInputStream input,
                        ExtensionRegistryLite extensionRegistry)
                        throws InvalidProtocolBufferException {
                    return new IrContinue(input, extensionRegistry);
                }
            };

    static {
        defaultInstance = new IrContinue(true);
        defaultInstance.initFields();
    }

    private final ByteString unknownFields;
    private int bitField0_;
    private int loopId_;
    private int label_;
    private byte memoizedIsInitialized = -1;
    private int memoizedSerializedSize = -1;

    // Use IrContinue.newBuilder() to construct.
    private IrContinue(GeneratedMessageLite.Builder builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
    }

    private IrContinue(boolean noInit) {
        this.unknownFields = ByteString.EMPTY;
    }

    private IrContinue(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        ByteString.Output unknownFieldsOutput =
                ByteString.newOutput();
        CodedOutputStream unknownFieldsCodedOutput =
                CodedOutputStream.newInstance(
                        unknownFieldsOutput, 1);
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 8: {
                        bitField0_ |= 0x00000001;
                        loopId_ = input.readInt32();
                        break;
                    }
                    case 16: {
                        bitField0_ |= 0x00000002;
                        label_ = input.readInt32();
                        break;
                    }
                }
            }
        } catch (InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (IOException e) {
            throw new InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this);
        } finally {
            try {
                unknownFieldsCodedOutput.flush();
            } catch (IOException e) {
                // Should not happen
            } finally {
                unknownFields = unknownFieldsOutput.toByteString();
            }
            makeExtensionsImmutable();
        }
    }

    public static IrContinue getDefaultInstance() {
        return defaultInstance;
    }

    public static IrContinue parseFrom(
            ByteString data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrContinue parseFrom(
            ByteString data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrContinue parseFrom(byte[] data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrContinue parseFrom(
            byte[] data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrContinue parseFrom(InputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrContinue parseFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static IrContinue parseDelimitedFrom(InputStream input)
            throws IOException {
        return PARSER.parseDelimitedFrom(input);
    }

    public static IrContinue parseDelimitedFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }

    public static IrContinue parseFrom(
            CodedInputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrContinue parseFrom(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() {
        return Builder.create();
    }

    public static Builder newBuilder(IrContinue prototype) {
        return newBuilder().mergeFrom(prototype);
    }

    @Override
    public IrContinue getDefaultInstanceForType() {
        return defaultInstance;
    }

    @Override
    public Parser<IrContinue> getParserForType() {
        return PARSER;
    }

    /**
     * <code>required int32 loop_id = 1;</code>
     */
    @Override
    public boolean hasLoopId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
    }

    /**
     * <code>required int32 loop_id = 1;</code>
     */
    @Override
    public int getLoopId() {
        return loopId_;
    }

    /**
     * <code>optional int32 label = 2;</code>
     */
    @Override
    public boolean hasLabel() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
    }

    /**
     * <code>optional int32 label = 2;</code>
     */
    @Override
    public int getLabel() {
        return label_;
    }

    private void initFields() {
        loopId_ = 0;
        label_ = 0;
    }

    @Override
    public boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasLoopId()) {
            memoizedIsInitialized = 0;
            return false;
        }
        memoizedIsInitialized = 1;
        return true;
    }

    @Override
    public void writeTo(CodedOutputStream output)
            throws IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            output.writeInt32(1, loopId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            output.writeInt32(2, label_);
        }
        output.writeRawBytes(unknownFields);
    }

    @Override
    public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += CodedOutputStream
                    .computeInt32Size(1, loopId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += CodedOutputStream
                    .computeInt32Size(2, label_);
        }
        size += unknownFields.size();
        memoizedSerializedSize = size;
        return size;
    }

    @Override
    protected Object writeReplace()
            throws ObjectStreamException {
        return super.writeReplace();
    }

    @Override
    public Builder newBuilderForType() {
        return newBuilder();
    }

    @Override
    public Builder toBuilder() {
        return newBuilder(this);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrContinue}
     */
    public static final class Builder extends
            GeneratedMessageLite.Builder<
                    IrContinue, Builder>
            implements
            // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrContinue)
            IrContinueOrBuilder {
        private int bitField0_;
        private int loopId_;
        private int label_;

        // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrContinue.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private static Builder create() {
            return new Builder();
        }

        private void maybeForceBuilderInitialization() {
        }

        @Override
        public Builder clear() {
            super.clear();
            loopId_ = 0;
            bitField0_ &= ~0x00000001;
            label_ = 0;
            bitField0_ &= ~0x00000002;
            return this;
        }

        @Override
        public Builder clone() {
            return create().mergeFrom(buildPartial());
        }

        @Override
        public IrContinue getDefaultInstanceForType() {
            return getDefaultInstance();
        }

        @Override
        public IrContinue build() {
            IrContinue result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        @Override
        public IrContinue buildPartial() {
            IrContinue result = new IrContinue(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                to_bitField0_ |= 0x00000001;
            }
            result.loopId_ = loopId_;
            if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                to_bitField0_ |= 0x00000002;
            }
            result.label_ = label_;
            result.bitField0_ = to_bitField0_;
            return result;
        }

        @Override
        public Builder mergeFrom(IrContinue other) {
            if (other == getDefaultInstance())
                return this;
            if (other.hasLoopId()) {
                setLoopId(other.getLoopId());
            }
            if (other.hasLabel()) {
                setLabel(other.getLabel());
            }
            setUnknownFields(
                    getUnknownFields().concat(other.unknownFields));
            return this;
        }

        @Override
        public boolean isInitialized() {
            if (!hasLoopId()) {

                return false;
            }
            return true;
        }

        @Override
        public Builder mergeFrom(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws IOException {
            IrContinue parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (InvalidProtocolBufferException e) {
                parsedMessage = (IrContinue) e.getUnfinishedMessage();
                throw e;
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        /**
         * <code>required int32 loop_id = 1;</code>
         */
        @Override
        public boolean hasLoopId() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required int32 loop_id = 1;</code>
         */
        @Override
        public int getLoopId() {
            return loopId_;
        }

        /**
         * <code>required int32 loop_id = 1;</code>
         */
        public Builder setLoopId(int value) {
            bitField0_ |= 0x00000001;
            loopId_ = value;

            return this;
        }

        /**
         * <code>required int32 loop_id = 1;</code>
         */
        public Builder clearLoopId() {
            bitField0_ &= ~0x00000001;
            loopId_ = 0;

            return this;
        }

        /**
         * <code>optional int32 label = 2;</code>
         */
        @Override
        public boolean hasLabel() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional int32 label = 2;</code>
         */
        @Override
        public int getLabel() {
            return label_;
        }

        /**
         * <code>optional int32 label = 2;</code>
         */
        public Builder setLabel(int value) {
            bitField0_ |= 0x00000002;
            label_ = value;

            return this;
        }

        /**
         * <code>optional int32 label = 2;</code>
         */
        public Builder clearLabel() {
            bitField0_ &= ~0x00000002;
            label_ = 0;

            return this;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrContinue)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrContinue)
}
