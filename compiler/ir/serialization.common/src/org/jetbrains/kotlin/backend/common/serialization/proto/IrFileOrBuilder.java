// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

import org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder;

import java.util.List;

public interface IrFileOrBuilder extends
        // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.backend.common.serialization.proto.IrFile)
        MessageLiteOrBuilder {

    /**
     * <code>repeated int32 declaration_id = 1 [packed = true];</code>
     */
    List<Integer> getDeclarationIdList();

    /**
     * <code>repeated int32 declaration_id = 1 [packed = true];</code>
     */
    int getDeclarationIdCount();

    /**
     * <code>repeated int32 declaration_id = 1 [packed = true];</code>
     */
    int getDeclarationId(int index);

    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
     */
    boolean hasFileEntry();

    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry file_entry = 2;</code>
     */
    FileEntry getFileEntry();

    /**
     * <code>repeated int32 fq_name = 3 [packed = true];</code>
     */
    List<Integer> getFqNameList();

    /**
     * <code>repeated int32 fq_name = 3 [packed = true];</code>
     */
    int getFqNameCount();

    /**
     * <code>repeated int32 fq_name = 3 [packed = true];</code>
     */
    int getFqName(int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    List<IrConstructorCall>
    getAnnotationList();

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    IrConstructorCall getAnnotation(int index);

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrConstructorCall annotation = 4;</code>
     */
    int getAnnotationCount();

    /**
     * <code>repeated int64 explicitly_exported_to_compiler = 5 [packed = true];</code>
     */
    List<Long> getExplicitlyExportedToCompilerList();

    /**
     * <code>repeated int64 explicitly_exported_to_compiler = 5 [packed = true];</code>
     */
    int getExplicitlyExportedToCompilerCount();

    /**
     * <code>repeated int64 explicitly_exported_to_compiler = 5 [packed = true];</code>
     */
    long getExplicitlyExportedToCompiler(int index);
}
