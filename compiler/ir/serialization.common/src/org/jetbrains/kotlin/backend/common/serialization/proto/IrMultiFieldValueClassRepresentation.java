// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

import org.jetbrains.kotlin.protobuf.AbstractParser;
import org.jetbrains.kotlin.protobuf.ByteString;
import org.jetbrains.kotlin.protobuf.CodedInputStream;
import org.jetbrains.kotlin.protobuf.CodedOutputStream;
import org.jetbrains.kotlin.protobuf.ExtensionRegistryLite;
import org.jetbrains.kotlin.protobuf.GeneratedMessageLite;
import org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException;
import org.jetbrains.kotlin.protobuf.Parser;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation}
 */
public final class IrMultiFieldValueClassRepresentation extends
        GeneratedMessageLite implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation)
        IrMultiFieldValueClassRepresentationOrBuilder {
    public static final int UNDERLYING_PROPERTY_NAME_FIELD_NUMBER = 1;
    public static final int UNDERLYING_PROPERTY_TYPE_FIELD_NUMBER = 2;
    private static final IrMultiFieldValueClassRepresentation defaultInstance;
    private static final long serialVersionUID = 0L;
    public static Parser<IrMultiFieldValueClassRepresentation> PARSER =
            new AbstractParser<IrMultiFieldValueClassRepresentation>() {
                @Override
                public IrMultiFieldValueClassRepresentation parsePartialFrom(
                        CodedInputStream input,
                        ExtensionRegistryLite extensionRegistry)
                        throws InvalidProtocolBufferException {
                    return new IrMultiFieldValueClassRepresentation(input, extensionRegistry);
                }
            };

    static {
        defaultInstance = new IrMultiFieldValueClassRepresentation(true);
        defaultInstance.initFields();
    }

    private final ByteString unknownFields;
    private List<Integer> underlyingPropertyName_;
    private int underlyingPropertyNameMemoizedSerializedSize = -1;
    private List<Integer> underlyingPropertyType_;
    private int underlyingPropertyTypeMemoizedSerializedSize = -1;
    private byte memoizedIsInitialized = -1;
    private int memoizedSerializedSize = -1;

    // Use IrMultiFieldValueClassRepresentation.newBuilder() to construct.
    private IrMultiFieldValueClassRepresentation(GeneratedMessageLite.Builder builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
    }

    private IrMultiFieldValueClassRepresentation(boolean noInit) {
        this.unknownFields = ByteString.EMPTY;
    }

    private IrMultiFieldValueClassRepresentation(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        ByteString.Output unknownFieldsOutput =
                ByteString.newOutput();
        CodedOutputStream unknownFieldsCodedOutput =
                CodedOutputStream.newInstance(
                        unknownFieldsOutput, 1);
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 8: {
                        if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                            underlyingPropertyName_ = new ArrayList<Integer>();
                            mutable_bitField0_ |= 0x00000001;
                        }
                        underlyingPropertyName_.add(input.readInt32());
                        break;
                    }
                    case 10: {
                        int length = input.readRawVarint32();
                        int limit = input.pushLimit(length);
                        if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                            underlyingPropertyName_ = new ArrayList<Integer>();
                            mutable_bitField0_ |= 0x00000001;
                        }
                        while (input.getBytesUntilLimit() > 0) {
                            underlyingPropertyName_.add(input.readInt32());
                        }
                        input.popLimit(limit);
                        break;
                    }
                    case 16: {
                        if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                            underlyingPropertyType_ = new ArrayList<Integer>();
                            mutable_bitField0_ |= 0x00000002;
                        }
                        underlyingPropertyType_.add(input.readInt32());
                        break;
                    }
                    case 18: {
                        int length = input.readRawVarint32();
                        int limit = input.pushLimit(length);
                        if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                            underlyingPropertyType_ = new ArrayList<Integer>();
                            mutable_bitField0_ |= 0x00000002;
                        }
                        while (input.getBytesUntilLimit() > 0) {
                            underlyingPropertyType_.add(input.readInt32());
                        }
                        input.popLimit(limit);
                        break;
                    }
                }
            }
        } catch (InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (IOException e) {
            throw new InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this);
        } finally {
            if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                underlyingPropertyName_ = Collections.unmodifiableList(underlyingPropertyName_);
            }
            if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                underlyingPropertyType_ = Collections.unmodifiableList(underlyingPropertyType_);
            }
            try {
                unknownFieldsCodedOutput.flush();
            } catch (IOException e) {
                // Should not happen
            } finally {
                unknownFields = unknownFieldsOutput.toByteString();
            }
            makeExtensionsImmutable();
        }
    }

    public static IrMultiFieldValueClassRepresentation getDefaultInstance() {
        return defaultInstance;
    }

    public static IrMultiFieldValueClassRepresentation parseFrom(
            ByteString data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrMultiFieldValueClassRepresentation parseFrom(
            ByteString data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrMultiFieldValueClassRepresentation parseFrom(byte[] data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrMultiFieldValueClassRepresentation parseFrom(
            byte[] data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrMultiFieldValueClassRepresentation parseFrom(InputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrMultiFieldValueClassRepresentation parseFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static IrMultiFieldValueClassRepresentation parseDelimitedFrom(InputStream input)
            throws IOException {
        return PARSER.parseDelimitedFrom(input);
    }

    public static IrMultiFieldValueClassRepresentation parseDelimitedFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }

    public static IrMultiFieldValueClassRepresentation parseFrom(
            CodedInputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrMultiFieldValueClassRepresentation parseFrom(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() {
        return Builder.create();
    }

    public static Builder newBuilder(IrMultiFieldValueClassRepresentation prototype) {
        return newBuilder().mergeFrom(prototype);
    }

    @Override
    public IrMultiFieldValueClassRepresentation getDefaultInstanceForType() {
        return defaultInstance;
    }

    @Override
    public Parser<IrMultiFieldValueClassRepresentation> getParserForType() {
        return PARSER;
    }

    /**
     * <code>repeated int32 underlying_property_name = 1 [packed = true];</code>
     */
    @Override
    public List<Integer>
    getUnderlyingPropertyNameList() {
        return underlyingPropertyName_;
    }

    /**
     * <code>repeated int32 underlying_property_name = 1 [packed = true];</code>
     */
    @Override
    public int getUnderlyingPropertyNameCount() {
        return underlyingPropertyName_.size();
    }

    /**
     * <code>repeated int32 underlying_property_name = 1 [packed = true];</code>
     */
    @Override
    public int getUnderlyingPropertyName(int index) {
        return underlyingPropertyName_.get(index);
    }

    /**
     * <code>repeated int32 underlying_property_type = 2 [packed = true];</code>
     */
    @Override
    public List<Integer>
    getUnderlyingPropertyTypeList() {
        return underlyingPropertyType_;
    }

    /**
     * <code>repeated int32 underlying_property_type = 2 [packed = true];</code>
     */
    @Override
    public int getUnderlyingPropertyTypeCount() {
        return underlyingPropertyType_.size();
    }

    /**
     * <code>repeated int32 underlying_property_type = 2 [packed = true];</code>
     */
    @Override
    public int getUnderlyingPropertyType(int index) {
        return underlyingPropertyType_.get(index);
    }

    private void initFields() {
        underlyingPropertyName_ = Collections.emptyList();
        underlyingPropertyType_ = Collections.emptyList();
    }

    @Override
    public boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
    }

    @Override
    public void writeTo(CodedOutputStream output)
            throws IOException {
        getSerializedSize();
        if (getUnderlyingPropertyNameList().size() > 0) {
            output.writeRawVarint32(10);
            output.writeRawVarint32(underlyingPropertyNameMemoizedSerializedSize);
        }
        for (int i = 0; i < underlyingPropertyName_.size(); i++) {
            output.writeInt32NoTag(underlyingPropertyName_.get(i));
        }
        if (getUnderlyingPropertyTypeList().size() > 0) {
            output.writeRawVarint32(18);
            output.writeRawVarint32(underlyingPropertyTypeMemoizedSerializedSize);
        }
        for (int i = 0; i < underlyingPropertyType_.size(); i++) {
            output.writeInt32NoTag(underlyingPropertyType_.get(i));
        }
        output.writeRawBytes(unknownFields);
    }

    @Override
    public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        {
            int dataSize = 0;
            for (int i = 0; i < underlyingPropertyName_.size(); i++) {
                dataSize += CodedOutputStream
                        .computeInt32SizeNoTag(underlyingPropertyName_.get(i));
            }
            size += dataSize;
            if (!getUnderlyingPropertyNameList().isEmpty()) {
                size += 1;
                size += CodedOutputStream
                        .computeInt32SizeNoTag(dataSize);
            }
            underlyingPropertyNameMemoizedSerializedSize = dataSize;
        }
        {
            int dataSize = 0;
            for (int i = 0; i < underlyingPropertyType_.size(); i++) {
                dataSize += CodedOutputStream
                        .computeInt32SizeNoTag(underlyingPropertyType_.get(i));
            }
            size += dataSize;
            if (!getUnderlyingPropertyTypeList().isEmpty()) {
                size += 1;
                size += CodedOutputStream
                        .computeInt32SizeNoTag(dataSize);
            }
            underlyingPropertyTypeMemoizedSerializedSize = dataSize;
        }
        size += unknownFields.size();
        memoizedSerializedSize = size;
        return size;
    }

    @Override
    protected Object writeReplace()
            throws ObjectStreamException {
        return super.writeReplace();
    }

    @Override
    public Builder newBuilderForType() {
        return newBuilder();
    }

    @Override
    public Builder toBuilder() {
        return newBuilder(this);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation}
     */
    public static final class Builder extends
            GeneratedMessageLite.Builder<
                    IrMultiFieldValueClassRepresentation, Builder>
            implements
            // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation)
            IrMultiFieldValueClassRepresentationOrBuilder {
        private int bitField0_;
        private List<Integer> underlyingPropertyName_ = Collections.emptyList();
        private List<Integer> underlyingPropertyType_ = Collections.emptyList();

        // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private static Builder create() {
            return new Builder();
        }

        private void maybeForceBuilderInitialization() {
        }

        @Override
        public Builder clear() {
            super.clear();
            underlyingPropertyName_ = Collections.emptyList();
            bitField0_ &= ~0x00000001;
            underlyingPropertyType_ = Collections.emptyList();
            bitField0_ &= ~0x00000002;
            return this;
        }

        @Override
        public Builder clone() {
            return create().mergeFrom(buildPartial());
        }

        @Override
        public IrMultiFieldValueClassRepresentation getDefaultInstanceForType() {
            return getDefaultInstance();
        }

        @Override
        public IrMultiFieldValueClassRepresentation build() {
            IrMultiFieldValueClassRepresentation result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        @Override
        public IrMultiFieldValueClassRepresentation buildPartial() {
            IrMultiFieldValueClassRepresentation result = new IrMultiFieldValueClassRepresentation(this);
            int from_bitField0_ = bitField0_;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                underlyingPropertyName_ = Collections.unmodifiableList(underlyingPropertyName_);
                bitField0_ &= ~0x00000001;
            }
            result.underlyingPropertyName_ = underlyingPropertyName_;
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                underlyingPropertyType_ = Collections.unmodifiableList(underlyingPropertyType_);
                bitField0_ &= ~0x00000002;
            }
            result.underlyingPropertyType_ = underlyingPropertyType_;
            return result;
        }

        @Override
        public Builder mergeFrom(IrMultiFieldValueClassRepresentation other) {
            if (other == getDefaultInstance())
                return this;
            if (!other.underlyingPropertyName_.isEmpty()) {
                if (underlyingPropertyName_.isEmpty()) {
                    underlyingPropertyName_ = other.underlyingPropertyName_;
                    bitField0_ &= ~0x00000001;
                } else {
                    ensureUnderlyingPropertyNameIsMutable();
                    underlyingPropertyName_.addAll(other.underlyingPropertyName_);
                }

            }
            if (!other.underlyingPropertyType_.isEmpty()) {
                if (underlyingPropertyType_.isEmpty()) {
                    underlyingPropertyType_ = other.underlyingPropertyType_;
                    bitField0_ &= ~0x00000002;
                } else {
                    ensureUnderlyingPropertyTypeIsMutable();
                    underlyingPropertyType_.addAll(other.underlyingPropertyType_);
                }

            }
            setUnknownFields(
                    getUnknownFields().concat(other.unknownFields));
            return this;
        }

        @Override
        public boolean isInitialized() {
            return true;
        }

        @Override
        public Builder mergeFrom(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws IOException {
            IrMultiFieldValueClassRepresentation parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (InvalidProtocolBufferException e) {
                parsedMessage = (IrMultiFieldValueClassRepresentation) e.getUnfinishedMessage();
                throw e;
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        private void ensureUnderlyingPropertyNameIsMutable() {
            if (!((bitField0_ & 0x00000001) == 0x00000001)) {
                underlyingPropertyName_ = new ArrayList<Integer>(underlyingPropertyName_);
                bitField0_ |= 0x00000001;
            }
        }

        /**
         * <code>repeated int32 underlying_property_name = 1 [packed = true];</code>
         */
        @Override
        public List<Integer>
        getUnderlyingPropertyNameList() {
            return Collections.unmodifiableList(underlyingPropertyName_);
        }

        /**
         * <code>repeated int32 underlying_property_name = 1 [packed = true];</code>
         */
        @Override
        public int getUnderlyingPropertyNameCount() {
            return underlyingPropertyName_.size();
        }

        /**
         * <code>repeated int32 underlying_property_name = 1 [packed = true];</code>
         */
        @Override
        public int getUnderlyingPropertyName(int index) {
            return underlyingPropertyName_.get(index);
        }

        /**
         * <code>repeated int32 underlying_property_name = 1 [packed = true];</code>
         */
        public Builder setUnderlyingPropertyName(
                int index, int value) {
            ensureUnderlyingPropertyNameIsMutable();
            underlyingPropertyName_.set(index, value);

            return this;
        }

        /**
         * <code>repeated int32 underlying_property_name = 1 [packed = true];</code>
         */
        public Builder addUnderlyingPropertyName(int value) {
            ensureUnderlyingPropertyNameIsMutable();
            underlyingPropertyName_.add(value);

            return this;
        }

        /**
         * <code>repeated int32 underlying_property_name = 1 [packed = true];</code>
         */
        public Builder addAllUnderlyingPropertyName(
                Iterable<? extends Integer> values) {
            ensureUnderlyingPropertyNameIsMutable();
            addAll(
                    values, underlyingPropertyName_);

            return this;
        }

        /**
         * <code>repeated int32 underlying_property_name = 1 [packed = true];</code>
         */
        public Builder clearUnderlyingPropertyName() {
            underlyingPropertyName_ = Collections.emptyList();
            bitField0_ &= ~0x00000001;

            return this;
        }

        private void ensureUnderlyingPropertyTypeIsMutable() {
            if (!((bitField0_ & 0x00000002) == 0x00000002)) {
                underlyingPropertyType_ = new ArrayList<Integer>(underlyingPropertyType_);
                bitField0_ |= 0x00000002;
            }
        }

        /**
         * <code>repeated int32 underlying_property_type = 2 [packed = true];</code>
         */
        @Override
        public List<Integer>
        getUnderlyingPropertyTypeList() {
            return Collections.unmodifiableList(underlyingPropertyType_);
        }

        /**
         * <code>repeated int32 underlying_property_type = 2 [packed = true];</code>
         */
        @Override
        public int getUnderlyingPropertyTypeCount() {
            return underlyingPropertyType_.size();
        }

        /**
         * <code>repeated int32 underlying_property_type = 2 [packed = true];</code>
         */
        @Override
        public int getUnderlyingPropertyType(int index) {
            return underlyingPropertyType_.get(index);
        }

        /**
         * <code>repeated int32 underlying_property_type = 2 [packed = true];</code>
         */
        public Builder setUnderlyingPropertyType(
                int index, int value) {
            ensureUnderlyingPropertyTypeIsMutable();
            underlyingPropertyType_.set(index, value);

            return this;
        }

        /**
         * <code>repeated int32 underlying_property_type = 2 [packed = true];</code>
         */
        public Builder addUnderlyingPropertyType(int value) {
            ensureUnderlyingPropertyTypeIsMutable();
            underlyingPropertyType_.add(value);

            return this;
        }

        /**
         * <code>repeated int32 underlying_property_type = 2 [packed = true];</code>
         */
        public Builder addAllUnderlyingPropertyType(
                Iterable<? extends Integer> values) {
            ensureUnderlyingPropertyTypeIsMutable();
            addAll(
                    values, underlyingPropertyType_);

            return this;
        }

        /**
         * <code>repeated int32 underlying_property_type = 2 [packed = true];</code>
         */
        public Builder clearUnderlyingPropertyType() {
            underlyingPropertyType_ = Collections.emptyList();
            bitField0_ &= ~0x00000002;

            return this;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation)
}
