// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

import org.jetbrains.kotlin.protobuf.AbstractParser;
import org.jetbrains.kotlin.protobuf.ByteString;
import org.jetbrains.kotlin.protobuf.CodedInputStream;
import org.jetbrains.kotlin.protobuf.CodedOutputStream;
import org.jetbrains.kotlin.protobuf.ExtensionRegistryLite;
import org.jetbrains.kotlin.protobuf.GeneratedMessageLite;
import org.jetbrains.kotlin.protobuf.Internal;
import org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException;
import org.jetbrains.kotlin.protobuf.Parser;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamException;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrConst}
 */
public final class IrConst extends
        GeneratedMessageLite implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrConst)
        IrConstOrBuilder {
    public static final int NULL_FIELD_NUMBER = 1;
    public static final int BOOLEAN_FIELD_NUMBER = 2;
    public static final int CHAR_FIELD_NUMBER = 3;
    public static final int BYTE_FIELD_NUMBER = 4;
    public static final int SHORT_FIELD_NUMBER = 5;
    public static final int INT_FIELD_NUMBER = 6;
    public static final int LONG_FIELD_NUMBER = 7;
    public static final int FLOAT_BITS_FIELD_NUMBER = 8;
    public static final int DOUBLE_BITS_FIELD_NUMBER = 9;
    public static final int STRING_FIELD_NUMBER = 10;
    private static final IrConst defaultInstance;
    private static final long serialVersionUID = 0L;
    public static Parser<IrConst> PARSER =
            new AbstractParser<IrConst>() {
                @Override
                public IrConst parsePartialFrom(
                        CodedInputStream input,
                        ExtensionRegistryLite extensionRegistry)
                        throws InvalidProtocolBufferException {
                    return new IrConst(input, extensionRegistry);
                }
            };

    static {
        defaultInstance = new IrConst(true);
        defaultInstance.initFields();
    }

    private final ByteString unknownFields;
    private int bitField0_;
    private int valueCase_ = 0;
    private Object value_;
    private byte memoizedIsInitialized = -1;
    private int memoizedSerializedSize = -1;

    // Use IrConst.newBuilder() to construct.
    private IrConst(GeneratedMessageLite.Builder builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
    }

    private IrConst(boolean noInit) {
        this.unknownFields = ByteString.EMPTY;
    }

    private IrConst(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        ByteString.Output unknownFieldsOutput =
                ByteString.newOutput();
        CodedOutputStream unknownFieldsCodedOutput =
                CodedOutputStream.newInstance(
                        unknownFieldsOutput, 1);
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 8: {
                        valueCase_ = 1;
                        value_ = input.readBool();
                        break;
                    }
                    case 16: {
                        valueCase_ = 2;
                        value_ = input.readBool();
                        break;
                    }
                    case 24: {
                        valueCase_ = 3;
                        value_ = input.readInt32();
                        break;
                    }
                    case 32: {
                        valueCase_ = 4;
                        value_ = input.readInt32();
                        break;
                    }
                    case 40: {
                        valueCase_ = 5;
                        value_ = input.readInt32();
                        break;
                    }
                    case 48: {
                        valueCase_ = 6;
                        value_ = input.readInt32();
                        break;
                    }
                    case 56: {
                        valueCase_ = 7;
                        value_ = input.readInt64();
                        break;
                    }
                    case 69: {
                        valueCase_ = 8;
                        value_ = input.readFixed32();
                        break;
                    }
                    case 73: {
                        valueCase_ = 9;
                        value_ = input.readFixed64();
                        break;
                    }
                    case 80: {
                        valueCase_ = 10;
                        value_ = input.readInt32();
                        break;
                    }
                }
            }
        } catch (InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (IOException e) {
            throw new InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this);
        } finally {
            try {
                unknownFieldsCodedOutput.flush();
            } catch (IOException e) {
                // Should not happen
            } finally {
                unknownFields = unknownFieldsOutput.toByteString();
            }
            makeExtensionsImmutable();
        }
    }

    public static IrConst getDefaultInstance() {
        return defaultInstance;
    }

    public static IrConst parseFrom(
            ByteString data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrConst parseFrom(
            ByteString data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrConst parseFrom(byte[] data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrConst parseFrom(
            byte[] data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrConst parseFrom(InputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrConst parseFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static IrConst parseDelimitedFrom(InputStream input)
            throws IOException {
        return PARSER.parseDelimitedFrom(input);
    }

    public static IrConst parseDelimitedFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }

    public static IrConst parseFrom(
            CodedInputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrConst parseFrom(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() {
        return Builder.create();
    }

    public static Builder newBuilder(IrConst prototype) {
        return newBuilder().mergeFrom(prototype);
    }

    @Override
    public IrConst getDefaultInstanceForType() {
        return defaultInstance;
    }

    @Override
    public Parser<IrConst> getParserForType() {
        return PARSER;
    }

    public ValueCase
    getValueCase() {
        return ValueCase.valueOf(
                valueCase_);
    }

    /**
     * <code>optional bool null = 1;</code>
     */
    @Override
    public boolean hasNull() {
        return valueCase_ == 1;
    }

    /**
     * <code>optional bool null = 1;</code>
     */
    @Override
    public boolean getNull() {
        if (valueCase_ == 1) {
            return (Boolean) value_;
        }
        return false;
    }

    /**
     * <code>optional bool boolean = 2;</code>
     */
    @Override
    public boolean hasBoolean() {
        return valueCase_ == 2;
    }

    /**
     * <code>optional bool boolean = 2;</code>
     */
    @Override
    public boolean getBoolean() {
        if (valueCase_ == 2) {
            return (Boolean) value_;
        }
        return false;
    }

    /**
     * <code>optional int32 char = 3;</code>
     */
    @Override
    public boolean hasChar() {
        return valueCase_ == 3;
    }

    /**
     * <code>optional int32 char = 3;</code>
     */
    @Override
    public int getChar() {
        if (valueCase_ == 3) {
            return (Integer) value_;
        }
        return 0;
    }

    /**
     * <code>optional int32 byte = 4;</code>
     */
    @Override
    public boolean hasByte() {
        return valueCase_ == 4;
    }

    /**
     * <code>optional int32 byte = 4;</code>
     */
    @Override
    public int getByte() {
        if (valueCase_ == 4) {
            return (Integer) value_;
        }
        return 0;
    }

    /**
     * <code>optional int32 short = 5;</code>
     */
    @Override
    public boolean hasShort() {
        return valueCase_ == 5;
    }

    /**
     * <code>optional int32 short = 5;</code>
     */
    @Override
    public int getShort() {
        if (valueCase_ == 5) {
            return (Integer) value_;
        }
        return 0;
    }

    /**
     * <code>optional int32 int = 6;</code>
     */
    @Override
    public boolean hasInt() {
        return valueCase_ == 6;
    }

    /**
     * <code>optional int32 int = 6;</code>
     */
    @Override
    public int getInt() {
        if (valueCase_ == 6) {
            return (Integer) value_;
        }
        return 0;
    }

    /**
     * <code>optional int64 long = 7;</code>
     */
    @Override
    public boolean hasLong() {
        return valueCase_ == 7;
    }

    /**
     * <code>optional int64 long = 7;</code>
     */
    @Override
    public long getLong() {
        if (valueCase_ == 7) {
            return (Long) value_;
        }
        return 0L;
    }

    /**
     * <code>optional fixed32 float_bits = 8;</code>
     *
     * <pre>
     * float/double is stored via fixed 32/64 bit value to avoid raw bit conversion
     * </pre>
     */
    @Override
    public boolean hasFloatBits() {
        return valueCase_ == 8;
    }

    /**
     * <code>optional fixed32 float_bits = 8;</code>
     *
     * <pre>
     * float/double is stored via fixed 32/64 bit value to avoid raw bit conversion
     * </pre>
     */
    @Override
    public int getFloatBits() {
        if (valueCase_ == 8) {
            return (Integer) value_;
        }
        return 0;
    }

    /**
     * <code>optional fixed64 double_bits = 9;</code>
     */
    @Override
    public boolean hasDoubleBits() {
        return valueCase_ == 9;
    }

    /**
     * <code>optional fixed64 double_bits = 9;</code>
     */
    @Override
    public long getDoubleBits() {
        if (valueCase_ == 9) {
            return (Long) value_;
        }
        return 0L;
    }

    /**
     * <code>optional int32 string = 10;</code>
     */
    @Override
    public boolean hasString() {
        return valueCase_ == 10;
    }

    /**
     * <code>optional int32 string = 10;</code>
     */
    @Override
    public int getString() {
        if (valueCase_ == 10) {
            return (Integer) value_;
        }
        return 0;
    }

    private void initFields() {
    }

    @Override
    public boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
    }

    @Override
    public void writeTo(CodedOutputStream output)
            throws IOException {
        getSerializedSize();
        if (valueCase_ == 1) {
            output.writeBool(
                    1, (Boolean) value_);
        }
        if (valueCase_ == 2) {
            output.writeBool(
                    2, (Boolean) value_);
        }
        if (valueCase_ == 3) {
            output.writeInt32(
                    3, (Integer) value_);
        }
        if (valueCase_ == 4) {
            output.writeInt32(
                    4, (Integer) value_);
        }
        if (valueCase_ == 5) {
            output.writeInt32(
                    5, (Integer) value_);
        }
        if (valueCase_ == 6) {
            output.writeInt32(
                    6, (Integer) value_);
        }
        if (valueCase_ == 7) {
            output.writeInt64(
                    7, (Long) value_);
        }
        if (valueCase_ == 8) {
            output.writeFixed32(
                    8, (Integer) value_);
        }
        if (valueCase_ == 9) {
            output.writeFixed64(
                    9, (Long) value_);
        }
        if (valueCase_ == 10) {
            output.writeInt32(
                    10, (Integer) value_);
        }
        output.writeRawBytes(unknownFields);
    }

    @Override
    public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (valueCase_ == 1) {
            size += CodedOutputStream
                    .computeBoolSize(
                            1, (Boolean) value_);
        }
        if (valueCase_ == 2) {
            size += CodedOutputStream
                    .computeBoolSize(
                            2, (Boolean) value_);
        }
        if (valueCase_ == 3) {
            size += CodedOutputStream
                    .computeInt32Size(
                            3, (Integer) value_);
        }
        if (valueCase_ == 4) {
            size += CodedOutputStream
                    .computeInt32Size(
                            4, (Integer) value_);
        }
        if (valueCase_ == 5) {
            size += CodedOutputStream
                    .computeInt32Size(
                            5, (Integer) value_);
        }
        if (valueCase_ == 6) {
            size += CodedOutputStream
                    .computeInt32Size(
                            6, (Integer) value_);
        }
        if (valueCase_ == 7) {
            size += CodedOutputStream
                    .computeInt64Size(
                            7, (Long) value_);
        }
        if (valueCase_ == 8) {
            size += CodedOutputStream
                    .computeFixed32Size(
                            8, (Integer) value_);
        }
        if (valueCase_ == 9) {
            size += CodedOutputStream
                    .computeFixed64Size(
                            9, (Long) value_);
        }
        if (valueCase_ == 10) {
            size += CodedOutputStream
                    .computeInt32Size(
                            10, (Integer) value_);
        }
        size += unknownFields.size();
        memoizedSerializedSize = size;
        return size;
    }

    @Override
    protected Object writeReplace()
            throws ObjectStreamException {
        return super.writeReplace();
    }

    @Override
    public Builder newBuilderForType() {
        return newBuilder();
    }

    @Override
    public Builder toBuilder() {
        return newBuilder(this);
    }

    public enum ValueCase
            implements Internal.EnumLite {
        NULL(1),
        BOOLEAN(2),
        CHAR(3),
        BYTE(4),
        SHORT(5),
        INT(6),
        LONG(7),
        FLOAT_BITS(8),
        DOUBLE_BITS(9),
        STRING(10),
        VALUE_NOT_SET(0);
        private int value = 0;

        ValueCase(int value) {
            this.value = value;
        }

        public static ValueCase valueOf(int value) {
            switch (value) {
                case 1:
                    return NULL;
                case 2:
                    return BOOLEAN;
                case 3:
                    return CHAR;
                case 4:
                    return BYTE;
                case 5:
                    return SHORT;
                case 6:
                    return INT;
                case 7:
                    return LONG;
                case 8:
                    return FLOAT_BITS;
                case 9:
                    return DOUBLE_BITS;
                case 10:
                    return STRING;
                case 0:
                    return VALUE_NOT_SET;
                default:
                    throw new IllegalArgumentException(
                            "Value is undefined for this oneof enum.");
            }
        }

        @Override
        public int getNumber() {
            return this.value;
        }
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrConst}
     */
    public static final class Builder extends
            GeneratedMessageLite.Builder<
                    IrConst, Builder>
            implements
            // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrConst)
            IrConstOrBuilder {
        private int valueCase_ = 0;
        private Object value_;
        private int bitField0_;

        // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrConst.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private static Builder create() {
            return new Builder();
        }

        private void maybeForceBuilderInitialization() {
        }

        @Override
        public Builder clear() {
            super.clear();
            valueCase_ = 0;
            value_ = null;
            return this;
        }

        @Override
        public Builder clone() {
            return create().mergeFrom(buildPartial());
        }

        @Override
        public IrConst getDefaultInstanceForType() {
            return getDefaultInstance();
        }

        @Override
        public IrConst build() {
            IrConst result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        @Override
        public IrConst buildPartial() {
            IrConst result = new IrConst(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (valueCase_ == 1) {
                result.value_ = value_;
            }
            if (valueCase_ == 2) {
                result.value_ = value_;
            }
            if (valueCase_ == 3) {
                result.value_ = value_;
            }
            if (valueCase_ == 4) {
                result.value_ = value_;
            }
            if (valueCase_ == 5) {
                result.value_ = value_;
            }
            if (valueCase_ == 6) {
                result.value_ = value_;
            }
            if (valueCase_ == 7) {
                result.value_ = value_;
            }
            if (valueCase_ == 8) {
                result.value_ = value_;
            }
            if (valueCase_ == 9) {
                result.value_ = value_;
            }
            if (valueCase_ == 10) {
                result.value_ = value_;
            }
            result.bitField0_ = to_bitField0_;
            result.valueCase_ = valueCase_;
            return result;
        }

        @Override
        public Builder mergeFrom(IrConst other) {
            if (other == getDefaultInstance())
                return this;
            switch (other.getValueCase()) {
                case NULL: {
                    setNull(other.getNull());
                    break;
                }
                case BOOLEAN: {
                    setBoolean(other.getBoolean());
                    break;
                }
                case CHAR: {
                    setChar(other.getChar());
                    break;
                }
                case BYTE: {
                    setByte(other.getByte());
                    break;
                }
                case SHORT: {
                    setShort(other.getShort());
                    break;
                }
                case INT: {
                    setInt(other.getInt());
                    break;
                }
                case LONG: {
                    setLong(other.getLong());
                    break;
                }
                case FLOAT_BITS: {
                    setFloatBits(other.getFloatBits());
                    break;
                }
                case DOUBLE_BITS: {
                    setDoubleBits(other.getDoubleBits());
                    break;
                }
                case STRING: {
                    setString(other.getString());
                    break;
                }
                case VALUE_NOT_SET: {
                    break;
                }
            }
            setUnknownFields(
                    getUnknownFields().concat(other.unknownFields));
            return this;
        }

        @Override
        public boolean isInitialized() {
            return true;
        }

        @Override
        public Builder mergeFrom(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws IOException {
            IrConst parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (InvalidProtocolBufferException e) {
                parsedMessage = (IrConst) e.getUnfinishedMessage();
                throw e;
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        public ValueCase
        getValueCase() {
            return ValueCase.valueOf(
                    valueCase_);
        }

        public Builder clearValue() {
            valueCase_ = 0;
            value_ = null;
            return this;
        }

        /**
         * <code>optional bool null = 1;</code>
         */
        @Override
        public boolean hasNull() {
            return valueCase_ == 1;
        }

        /**
         * <code>optional bool null = 1;</code>
         */
        @Override
        public boolean getNull() {
            if (valueCase_ == 1) {
                return (Boolean) value_;
            }
            return false;
        }

        /**
         * <code>optional bool null = 1;</code>
         */
        public Builder setNull(boolean value) {
            valueCase_ = 1;
            value_ = value;

            return this;
        }

        /**
         * <code>optional bool null = 1;</code>
         */
        public Builder clearNull() {
            if (valueCase_ == 1) {
                valueCase_ = 0;
                value_ = null;

            }
            return this;
        }

        /**
         * <code>optional bool boolean = 2;</code>
         */
        @Override
        public boolean hasBoolean() {
            return valueCase_ == 2;
        }

        /**
         * <code>optional bool boolean = 2;</code>
         */
        @Override
        public boolean getBoolean() {
            if (valueCase_ == 2) {
                return (Boolean) value_;
            }
            return false;
        }

        /**
         * <code>optional bool boolean = 2;</code>
         */
        public Builder setBoolean(boolean value) {
            valueCase_ = 2;
            value_ = value;

            return this;
        }

        /**
         * <code>optional bool boolean = 2;</code>
         */
        public Builder clearBoolean() {
            if (valueCase_ == 2) {
                valueCase_ = 0;
                value_ = null;

            }
            return this;
        }

        /**
         * <code>optional int32 char = 3;</code>
         */
        @Override
        public boolean hasChar() {
            return valueCase_ == 3;
        }

        /**
         * <code>optional int32 char = 3;</code>
         */
        @Override
        public int getChar() {
            if (valueCase_ == 3) {
                return (Integer) value_;
            }
            return 0;
        }

        /**
         * <code>optional int32 char = 3;</code>
         */
        public Builder setChar(int value) {
            valueCase_ = 3;
            value_ = value;

            return this;
        }

        /**
         * <code>optional int32 char = 3;</code>
         */
        public Builder clearChar() {
            if (valueCase_ == 3) {
                valueCase_ = 0;
                value_ = null;

            }
            return this;
        }

        /**
         * <code>optional int32 byte = 4;</code>
         */
        @Override
        public boolean hasByte() {
            return valueCase_ == 4;
        }

        /**
         * <code>optional int32 byte = 4;</code>
         */
        @Override
        public int getByte() {
            if (valueCase_ == 4) {
                return (Integer) value_;
            }
            return 0;
        }

        /**
         * <code>optional int32 byte = 4;</code>
         */
        public Builder setByte(int value) {
            valueCase_ = 4;
            value_ = value;

            return this;
        }

        /**
         * <code>optional int32 byte = 4;</code>
         */
        public Builder clearByte() {
            if (valueCase_ == 4) {
                valueCase_ = 0;
                value_ = null;

            }
            return this;
        }

        /**
         * <code>optional int32 short = 5;</code>
         */
        @Override
        public boolean hasShort() {
            return valueCase_ == 5;
        }

        /**
         * <code>optional int32 short = 5;</code>
         */
        @Override
        public int getShort() {
            if (valueCase_ == 5) {
                return (Integer) value_;
            }
            return 0;
        }

        /**
         * <code>optional int32 short = 5;</code>
         */
        public Builder setShort(int value) {
            valueCase_ = 5;
            value_ = value;

            return this;
        }

        /**
         * <code>optional int32 short = 5;</code>
         */
        public Builder clearShort() {
            if (valueCase_ == 5) {
                valueCase_ = 0;
                value_ = null;

            }
            return this;
        }

        /**
         * <code>optional int32 int = 6;</code>
         */
        @Override
        public boolean hasInt() {
            return valueCase_ == 6;
        }

        /**
         * <code>optional int32 int = 6;</code>
         */
        @Override
        public int getInt() {
            if (valueCase_ == 6) {
                return (Integer) value_;
            }
            return 0;
        }

        /**
         * <code>optional int32 int = 6;</code>
         */
        public Builder setInt(int value) {
            valueCase_ = 6;
            value_ = value;

            return this;
        }

        /**
         * <code>optional int32 int = 6;</code>
         */
        public Builder clearInt() {
            if (valueCase_ == 6) {
                valueCase_ = 0;
                value_ = null;

            }
            return this;
        }

        /**
         * <code>optional int64 long = 7;</code>
         */
        @Override
        public boolean hasLong() {
            return valueCase_ == 7;
        }

        /**
         * <code>optional int64 long = 7;</code>
         */
        @Override
        public long getLong() {
            if (valueCase_ == 7) {
                return (Long) value_;
            }
            return 0L;
        }

        /**
         * <code>optional int64 long = 7;</code>
         */
        public Builder setLong(long value) {
            valueCase_ = 7;
            value_ = value;

            return this;
        }

        /**
         * <code>optional int64 long = 7;</code>
         */
        public Builder clearLong() {
            if (valueCase_ == 7) {
                valueCase_ = 0;
                value_ = null;

            }
            return this;
        }

        /**
         * <code>optional fixed32 float_bits = 8;</code>
         *
         * <pre>
         * float/double is stored via fixed 32/64 bit value to avoid raw bit conversion
         * </pre>
         */
        @Override
        public boolean hasFloatBits() {
            return valueCase_ == 8;
        }

        /**
         * <code>optional fixed32 float_bits = 8;</code>
         *
         * <pre>
         * float/double is stored via fixed 32/64 bit value to avoid raw bit conversion
         * </pre>
         */
        @Override
        public int getFloatBits() {
            if (valueCase_ == 8) {
                return (Integer) value_;
            }
            return 0;
        }

        /**
         * <code>optional fixed32 float_bits = 8;</code>
         *
         * <pre>
         * float/double is stored via fixed 32/64 bit value to avoid raw bit conversion
         * </pre>
         */
        public Builder setFloatBits(int value) {
            valueCase_ = 8;
            value_ = value;

            return this;
        }

        /**
         * <code>optional fixed32 float_bits = 8;</code>
         *
         * <pre>
         * float/double is stored via fixed 32/64 bit value to avoid raw bit conversion
         * </pre>
         */
        public Builder clearFloatBits() {
            if (valueCase_ == 8) {
                valueCase_ = 0;
                value_ = null;

            }
            return this;
        }

        /**
         * <code>optional fixed64 double_bits = 9;</code>
         */
        @Override
        public boolean hasDoubleBits() {
            return valueCase_ == 9;
        }

        /**
         * <code>optional fixed64 double_bits = 9;</code>
         */
        @Override
        public long getDoubleBits() {
            if (valueCase_ == 9) {
                return (Long) value_;
            }
            return 0L;
        }

        /**
         * <code>optional fixed64 double_bits = 9;</code>
         */
        public Builder setDoubleBits(long value) {
            valueCase_ = 9;
            value_ = value;

            return this;
        }

        /**
         * <code>optional fixed64 double_bits = 9;</code>
         */
        public Builder clearDoubleBits() {
            if (valueCase_ == 9) {
                valueCase_ = 0;
                value_ = null;

            }
            return this;
        }

        /**
         * <code>optional int32 string = 10;</code>
         */
        @Override
        public boolean hasString() {
            return valueCase_ == 10;
        }

        /**
         * <code>optional int32 string = 10;</code>
         */
        @Override
        public int getString() {
            if (valueCase_ == 10) {
                return (Integer) value_;
            }
            return 0;
        }

        /**
         * <code>optional int32 string = 10;</code>
         */
        public Builder setString(int value) {
            valueCase_ = 10;
            value_ = value;

            return this;
        }

        /**
         * <code>optional int32 string = 10;</code>
         */
        public Builder clearString() {
            if (valueCase_ == 10) {
                valueCase_ = 0;
                value_ = null;

            }
            return this;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrConst)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrConst)
}
