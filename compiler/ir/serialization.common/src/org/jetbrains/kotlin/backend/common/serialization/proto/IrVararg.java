// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

import org.jetbrains.kotlin.protobuf.AbstractParser;
import org.jetbrains.kotlin.protobuf.ByteString;
import org.jetbrains.kotlin.protobuf.CodedInputStream;
import org.jetbrains.kotlin.protobuf.CodedOutputStream;
import org.jetbrains.kotlin.protobuf.ExtensionRegistryLite;
import org.jetbrains.kotlin.protobuf.GeneratedMessageLite;
import org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException;
import org.jetbrains.kotlin.protobuf.Parser;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrVararg}
 */
public final class IrVararg extends
        GeneratedMessageLite implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrVararg)
        IrVarargOrBuilder {
    public static final int ELEMENT_TYPE_FIELD_NUMBER = 1;
    public static final int ELEMENT_FIELD_NUMBER = 2;
    private static final IrVararg defaultInstance;
    private static final long serialVersionUID = 0L;
    public static Parser<IrVararg> PARSER =
            new AbstractParser<IrVararg>() {
                @Override
                public IrVararg parsePartialFrom(
                        CodedInputStream input,
                        ExtensionRegistryLite extensionRegistry)
                        throws InvalidProtocolBufferException {
                    return new IrVararg(input, extensionRegistry);
                }
            };

    static {
        defaultInstance = new IrVararg(true);
        defaultInstance.initFields();
    }

    private final ByteString unknownFields;
    private int bitField0_;
    private int elementType_;
    private List<IrVarargElement> element_;
    private byte memoizedIsInitialized = -1;
    private int memoizedSerializedSize = -1;

    // Use IrVararg.newBuilder() to construct.
    private IrVararg(GeneratedMessageLite.Builder builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
    }

    private IrVararg(boolean noInit) {
        this.unknownFields = ByteString.EMPTY;
    }

    private IrVararg(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        ByteString.Output unknownFieldsOutput =
                ByteString.newOutput();
        CodedOutputStream unknownFieldsCodedOutput =
                CodedOutputStream.newInstance(
                        unknownFieldsOutput, 1);
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 8: {
                        bitField0_ |= 0x00000001;
                        elementType_ = input.readInt32();
                        break;
                    }
                    case 18: {
                        if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                            element_ = new ArrayList<IrVarargElement>();
                            mutable_bitField0_ |= 0x00000002;
                        }
                        element_.add(input.readMessage(IrVarargElement.PARSER, extensionRegistry));
                        break;
                    }
                }
            }
        } catch (InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (IOException e) {
            throw new InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this);
        } finally {
            if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                element_ = Collections.unmodifiableList(element_);
            }
            try {
                unknownFieldsCodedOutput.flush();
            } catch (IOException e) {
                // Should not happen
            } finally {
                unknownFields = unknownFieldsOutput.toByteString();
            }
            makeExtensionsImmutable();
        }
    }

    public static IrVararg getDefaultInstance() {
        return defaultInstance;
    }

    public static IrVararg parseFrom(
            ByteString data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrVararg parseFrom(
            ByteString data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrVararg parseFrom(byte[] data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrVararg parseFrom(
            byte[] data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrVararg parseFrom(InputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrVararg parseFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static IrVararg parseDelimitedFrom(InputStream input)
            throws IOException {
        return PARSER.parseDelimitedFrom(input);
    }

    public static IrVararg parseDelimitedFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }

    public static IrVararg parseFrom(
            CodedInputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrVararg parseFrom(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() {
        return Builder.create();
    }

    public static Builder newBuilder(IrVararg prototype) {
        return newBuilder().mergeFrom(prototype);
    }

    @Override
    public IrVararg getDefaultInstanceForType() {
        return defaultInstance;
    }

    @Override
    public Parser<IrVararg> getParserForType() {
        return PARSER;
    }

    /**
     * <code>required int32 element_type = 1;</code>
     */
    @Override
    public boolean hasElementType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
    }

    /**
     * <code>required int32 element_type = 1;</code>
     */
    @Override
    public int getElementType() {
        return elementType_;
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement element = 2;</code>
     */
    @Override
    public List<IrVarargElement> getElementList() {
        return element_;
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement element = 2;</code>
     */
    public List<? extends IrVarargElementOrBuilder>
    getElementOrBuilderList() {
        return element_;
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement element = 2;</code>
     */
    @Override
    public int getElementCount() {
        return element_.size();
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement element = 2;</code>
     */
    @Override
    public IrVarargElement getElement(int index) {
        return element_.get(index);
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement element = 2;</code>
     */
    public IrVarargElementOrBuilder getElementOrBuilder(
            int index) {
        return element_.get(index);
    }

    private void initFields() {
        elementType_ = 0;
        element_ = Collections.emptyList();
    }

    @Override
    public boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasElementType()) {
            memoizedIsInitialized = 0;
            return false;
        }
        for (int i = 0; i < getElementCount(); i++) {
            if (!getElement(i).isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        memoizedIsInitialized = 1;
        return true;
    }

    @Override
    public void writeTo(CodedOutputStream output)
            throws IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            output.writeInt32(1, elementType_);
        }
        for (int i = 0; i < element_.size(); i++) {
            output.writeMessage(2, element_.get(i));
        }
        output.writeRawBytes(unknownFields);
    }

    @Override
    public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += CodedOutputStream
                    .computeInt32Size(1, elementType_);
        }
        for (int i = 0; i < element_.size(); i++) {
            size += CodedOutputStream
                    .computeMessageSize(2, element_.get(i));
        }
        size += unknownFields.size();
        memoizedSerializedSize = size;
        return size;
    }

    @Override
    protected Object writeReplace()
            throws ObjectStreamException {
        return super.writeReplace();
    }

    @Override
    public Builder newBuilderForType() {
        return newBuilder();
    }

    @Override
    public Builder toBuilder() {
        return newBuilder(this);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrVararg}
     */
    public static final class Builder extends
            GeneratedMessageLite.Builder<
                    IrVararg, Builder>
            implements
            // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrVararg)
            IrVarargOrBuilder {
        private int bitField0_;
        private int elementType_;
        private List<IrVarargElement> element_ =
                Collections.emptyList();

        // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrVararg.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private static Builder create() {
            return new Builder();
        }

        private void maybeForceBuilderInitialization() {
        }

        @Override
        public Builder clear() {
            super.clear();
            elementType_ = 0;
            bitField0_ &= ~0x00000001;
            element_ = Collections.emptyList();
            bitField0_ &= ~0x00000002;
            return this;
        }

        @Override
        public Builder clone() {
            return create().mergeFrom(buildPartial());
        }

        @Override
        public IrVararg getDefaultInstanceForType() {
            return getDefaultInstance();
        }

        @Override
        public IrVararg build() {
            IrVararg result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        @Override
        public IrVararg buildPartial() {
            IrVararg result = new IrVararg(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                to_bitField0_ |= 0x00000001;
            }
            result.elementType_ = elementType_;
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                element_ = Collections.unmodifiableList(element_);
                bitField0_ &= ~0x00000002;
            }
            result.element_ = element_;
            result.bitField0_ = to_bitField0_;
            return result;
        }

        @Override
        public Builder mergeFrom(IrVararg other) {
            if (other == getDefaultInstance())
                return this;
            if (other.hasElementType()) {
                setElementType(other.getElementType());
            }
            if (!other.element_.isEmpty()) {
                if (element_.isEmpty()) {
                    element_ = other.element_;
                    bitField0_ &= ~0x00000002;
                } else {
                    ensureElementIsMutable();
                    element_.addAll(other.element_);
                }

            }
            setUnknownFields(
                    getUnknownFields().concat(other.unknownFields));
            return this;
        }

        @Override
        public boolean isInitialized() {
            if (!hasElementType()) {

                return false;
            }
            for (int i = 0; i < getElementCount(); i++) {
                if (!getElement(i).isInitialized()) {

                    return false;
                }
            }
            return true;
        }

        @Override
        public Builder mergeFrom(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws IOException {
            IrVararg parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (InvalidProtocolBufferException e) {
                parsedMessage = (IrVararg) e.getUnfinishedMessage();
                throw e;
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        /**
         * <code>required int32 element_type = 1;</code>
         */
        @Override
        public boolean hasElementType() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required int32 element_type = 1;</code>
         */
        @Override
        public int getElementType() {
            return elementType_;
        }

        /**
         * <code>required int32 element_type = 1;</code>
         */
        public Builder setElementType(int value) {
            bitField0_ |= 0x00000001;
            elementType_ = value;

            return this;
        }

        /**
         * <code>required int32 element_type = 1;</code>
         */
        public Builder clearElementType() {
            bitField0_ &= ~0x00000001;
            elementType_ = 0;

            return this;
        }

        private void ensureElementIsMutable() {
            if (!((bitField0_ & 0x00000002) == 0x00000002)) {
                element_ = new ArrayList<IrVarargElement>(element_);
                bitField0_ |= 0x00000002;
            }
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement element = 2;</code>
         */
        @Override
        public List<IrVarargElement> getElementList() {
            return Collections.unmodifiableList(element_);
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement element = 2;</code>
         */
        @Override
        public int getElementCount() {
            return element_.size();
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement element = 2;</code>
         */
        @Override
        public IrVarargElement getElement(int index) {
            return element_.get(index);
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement element = 2;</code>
         */
        public Builder setElement(
                int index, IrVarargElement value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureElementIsMutable();
            element_.set(index, value);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement element = 2;</code>
         */
        public Builder setElement(
                int index, IrVarargElement.Builder builderForValue) {
            ensureElementIsMutable();
            element_.set(index, builderForValue.build());

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement element = 2;</code>
         */
        public Builder addElement(IrVarargElement value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureElementIsMutable();
            element_.add(value);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement element = 2;</code>
         */
        public Builder addElement(
                int index, IrVarargElement value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureElementIsMutable();
            element_.add(index, value);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement element = 2;</code>
         */
        public Builder addElement(
                IrVarargElement.Builder builderForValue) {
            ensureElementIsMutable();
            element_.add(builderForValue.build());

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement element = 2;</code>
         */
        public Builder addElement(
                int index, IrVarargElement.Builder builderForValue) {
            ensureElementIsMutable();
            element_.add(index, builderForValue.build());

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement element = 2;</code>
         */
        public Builder addAllElement(
                Iterable<? extends IrVarargElement> values) {
            ensureElementIsMutable();
            addAll(
                    values, element_);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement element = 2;</code>
         */
        public Builder clearElement() {
            element_ = Collections.emptyList();
            bitField0_ &= ~0x00000002;

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement element = 2;</code>
         */
        public Builder removeElement(int index) {
            ensureElementIsMutable();
            element_.remove(index);

            return this;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrVararg)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrVararg)
}
