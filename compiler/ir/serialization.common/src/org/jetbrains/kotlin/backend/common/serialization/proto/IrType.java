// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

import org.jetbrains.kotlin.protobuf.AbstractParser;
import org.jetbrains.kotlin.protobuf.ByteString;
import org.jetbrains.kotlin.protobuf.CodedInputStream;
import org.jetbrains.kotlin.protobuf.CodedOutputStream;
import org.jetbrains.kotlin.protobuf.ExtensionRegistryLite;
import org.jetbrains.kotlin.protobuf.GeneratedMessageLite;
import org.jetbrains.kotlin.protobuf.Internal;
import org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException;
import org.jetbrains.kotlin.protobuf.Parser;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamException;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrType}
 */
public final class IrType extends
        GeneratedMessageLite implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrType)
        IrTypeOrBuilder {
    public static final int LEGACYSIMPLE_FIELD_NUMBER = 1;
    public static final int DYNAMIC_FIELD_NUMBER = 2;
    public static final int ERROR_FIELD_NUMBER = 3;
    public static final int DNN_FIELD_NUMBER = 4;
    public static final int SIMPLE_FIELD_NUMBER = 5;
    private static final IrType defaultInstance;
    private static final long serialVersionUID = 0L;
    public static Parser<IrType> PARSER =
            new AbstractParser<IrType>() {
                @Override
                public IrType parsePartialFrom(
                        CodedInputStream input,
                        ExtensionRegistryLite extensionRegistry)
                        throws InvalidProtocolBufferException {
                    return new IrType(input, extensionRegistry);
                }
            };

    static {
        defaultInstance = new IrType(true);
        defaultInstance.initFields();
    }

    private final ByteString unknownFields;
    private int bitField0_;
    private int kindCase_ = 0;
    private Object kind_;

    private byte memoizedIsInitialized = -1;
    private int memoizedSerializedSize = -1;

    // Use IrType.newBuilder() to construct.
    private IrType(GeneratedMessageLite.Builder builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
    }

    private IrType(boolean noInit) {
        this.unknownFields = ByteString.EMPTY;
    }

    private IrType(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        ByteString.Output unknownFieldsOutput =
                ByteString.newOutput();
        CodedOutputStream unknownFieldsCodedOutput =
                CodedOutputStream.newInstance(
                        unknownFieldsOutput, 1);
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 10: {
                        IrSimpleTypeLegacy.Builder subBuilder = null;
                        if (kindCase_ == 1) {
                            subBuilder = ((IrSimpleTypeLegacy) kind_).toBuilder();
                        }
                        kind_ = input.readMessage(IrSimpleTypeLegacy.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom((IrSimpleTypeLegacy) kind_);
                            kind_ = subBuilder.buildPartial();
                        }
                        kindCase_ = 1;
                        break;
                    }
                    case 18: {
                        IrDynamicType.Builder subBuilder = null;
                        if (kindCase_ == 2) {
                            subBuilder = ((IrDynamicType) kind_).toBuilder();
                        }
                        kind_ = input.readMessage(IrDynamicType.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom((IrDynamicType) kind_);
                            kind_ = subBuilder.buildPartial();
                        }
                        kindCase_ = 2;
                        break;
                    }
                    case 26: {
                        IrErrorType.Builder subBuilder = null;
                        if (kindCase_ == 3) {
                            subBuilder = ((IrErrorType) kind_).toBuilder();
                        }
                        kind_ = input.readMessage(IrErrorType.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom((IrErrorType) kind_);
                            kind_ = subBuilder.buildPartial();
                        }
                        kindCase_ = 3;
                        break;
                    }
                    case 34: {
                        IrDefinitelyNotNullType.Builder subBuilder = null;
                        if (kindCase_ == 4) {
                            subBuilder = ((IrDefinitelyNotNullType) kind_).toBuilder();
                        }
                        kind_ = input.readMessage(IrDefinitelyNotNullType.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom((IrDefinitelyNotNullType) kind_);
                            kind_ = subBuilder.buildPartial();
                        }
                        kindCase_ = 4;
                        break;
                    }
                    case 42: {
                        IrSimpleType.Builder subBuilder = null;
                        if (kindCase_ == 5) {
                            subBuilder = ((IrSimpleType) kind_).toBuilder();
                        }
                        kind_ = input.readMessage(IrSimpleType.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom((IrSimpleType) kind_);
                            kind_ = subBuilder.buildPartial();
                        }
                        kindCase_ = 5;
                        break;
                    }
                }
            }
        } catch (InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (IOException e) {
            throw new InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this);
        } finally {
            try {
                unknownFieldsCodedOutput.flush();
            } catch (IOException e) {
                // Should not happen
            } finally {
                unknownFields = unknownFieldsOutput.toByteString();
            }
            makeExtensionsImmutable();
        }
    }

    public static IrType getDefaultInstance() {
        return defaultInstance;
    }

    public static IrType parseFrom(
            ByteString data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrType parseFrom(
            ByteString data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrType parseFrom(byte[] data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrType parseFrom(
            byte[] data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrType parseFrom(InputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrType parseFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static IrType parseDelimitedFrom(InputStream input)
            throws IOException {
        return PARSER.parseDelimitedFrom(input);
    }

    public static IrType parseDelimitedFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }

    public static IrType parseFrom(
            CodedInputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrType parseFrom(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() {
        return Builder.create();
    }

    public static Builder newBuilder(IrType prototype) {
        return newBuilder().mergeFrom(prototype);
    }

    @Override
    public IrType getDefaultInstanceForType() {
        return defaultInstance;
    }

    @Override
    public Parser<IrType> getParserForType() {
        return PARSER;
    }

    public KindCase
    getKindCase() {
        return KindCase.valueOf(
                kindCase_);
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy legacySimple = 1;</code>
     */
    @Override
    public boolean hasLegacySimple() {
        return kindCase_ == 1;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy legacySimple = 1;</code>
     */
    @Override
    public IrSimpleTypeLegacy getLegacySimple() {
        if (kindCase_ == 1) {
            return (IrSimpleTypeLegacy) kind_;
        }
        return IrSimpleTypeLegacy.getDefaultInstance();
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType dynamic = 2;</code>
     */
    @Override
    public boolean hasDynamic() {
        return kindCase_ == 2;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType dynamic = 2;</code>
     */
    @Override
    public IrDynamicType getDynamic() {
        if (kindCase_ == 2) {
            return (IrDynamicType) kind_;
        }
        return IrDynamicType.getDefaultInstance();
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrErrorType error = 3;</code>
     */
    @Override
    public boolean hasError() {
        return kindCase_ == 3;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrErrorType error = 3;</code>
     */
    @Override
    public IrErrorType getError() {
        if (kindCase_ == 3) {
            return (IrErrorType) kind_;
        }
        return IrErrorType.getDefaultInstance();
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType dnn = 4;</code>
     */
    @Override
    public boolean hasDnn() {
        return kindCase_ == 4;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType dnn = 4;</code>
     */
    @Override
    public IrDefinitelyNotNullType getDnn() {
        if (kindCase_ == 4) {
            return (IrDefinitelyNotNullType) kind_;
        }
        return IrDefinitelyNotNullType.getDefaultInstance();
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType simple = 5;</code>
     */
    @Override
    public boolean hasSimple() {
        return kindCase_ == 5;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType simple = 5;</code>
     */
    @Override
    public IrSimpleType getSimple() {
        if (kindCase_ == 5) {
            return (IrSimpleType) kind_;
        }
        return IrSimpleType.getDefaultInstance();
    }

    private void initFields() {
    }

    @Override
    public boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (hasLegacySimple()) {
            if (!getLegacySimple().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        if (hasDynamic()) {
            if (!getDynamic().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        if (hasError()) {
            if (!getError().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        if (hasSimple()) {
            if (!getSimple().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        memoizedIsInitialized = 1;
        return true;
    }

    @Override
    public void writeTo(CodedOutputStream output)
            throws IOException {
        getSerializedSize();
        if (kindCase_ == 1) {
            output.writeMessage(1, (IrSimpleTypeLegacy) kind_);
        }
        if (kindCase_ == 2) {
            output.writeMessage(2, (IrDynamicType) kind_);
        }
        if (kindCase_ == 3) {
            output.writeMessage(3, (IrErrorType) kind_);
        }
        if (kindCase_ == 4) {
            output.writeMessage(4, (IrDefinitelyNotNullType) kind_);
        }
        if (kindCase_ == 5) {
            output.writeMessage(5, (IrSimpleType) kind_);
        }
        output.writeRawBytes(unknownFields);
    }

    @Override
    public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (kindCase_ == 1) {
            size += CodedOutputStream
                    .computeMessageSize(1, (IrSimpleTypeLegacy) kind_);
        }
        if (kindCase_ == 2) {
            size += CodedOutputStream
                    .computeMessageSize(2, (IrDynamicType) kind_);
        }
        if (kindCase_ == 3) {
            size += CodedOutputStream
                    .computeMessageSize(3, (IrErrorType) kind_);
        }
        if (kindCase_ == 4) {
            size += CodedOutputStream
                    .computeMessageSize(4, (IrDefinitelyNotNullType) kind_);
        }
        if (kindCase_ == 5) {
            size += CodedOutputStream
                    .computeMessageSize(5, (IrSimpleType) kind_);
        }
        size += unknownFields.size();
        memoizedSerializedSize = size;
        return size;
    }

    @Override
    protected Object writeReplace()
            throws ObjectStreamException {
        return super.writeReplace();
    }

    @Override
    public Builder newBuilderForType() {
        return newBuilder();
    }

    @Override
    public Builder toBuilder() {
        return newBuilder(this);
    }

    public enum KindCase
            implements Internal.EnumLite {
        LEGACYSIMPLE(1),
        DYNAMIC(2),
        ERROR(3),
        DNN(4),
        SIMPLE(5),
        KIND_NOT_SET(0);
        private int value = 0;

        KindCase(int value) {
            this.value = value;
        }

        public static KindCase valueOf(int value) {
            switch (value) {
                case 1:
                    return LEGACYSIMPLE;
                case 2:
                    return DYNAMIC;
                case 3:
                    return ERROR;
                case 4:
                    return DNN;
                case 5:
                    return SIMPLE;
                case 0:
                    return KIND_NOT_SET;
                default:
                    throw new IllegalArgumentException(
                            "Value is undefined for this oneof enum.");
            }
        }

        @Override
        public int getNumber() {
            return this.value;
        }
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrType}
     */
    public static final class Builder extends
            GeneratedMessageLite.Builder<
                    IrType, Builder>
            implements
            // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrType)
            IrTypeOrBuilder {
        private int kindCase_ = 0;
        private Object kind_;
        private int bitField0_;

        // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrType.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private static Builder create() {
            return new Builder();
        }

        private void maybeForceBuilderInitialization() {
        }

        @Override
        public Builder clear() {
            super.clear();
            kindCase_ = 0;
            kind_ = null;
            return this;
        }

        @Override
        public Builder clone() {
            return create().mergeFrom(buildPartial());
        }

        @Override
        public IrType getDefaultInstanceForType() {
            return getDefaultInstance();
        }

        @Override
        public IrType build() {
            IrType result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        @Override
        public IrType buildPartial() {
            IrType result = new IrType(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (kindCase_ == 1) {
                result.kind_ = kind_;
            }
            if (kindCase_ == 2) {
                result.kind_ = kind_;
            }
            if (kindCase_ == 3) {
                result.kind_ = kind_;
            }
            if (kindCase_ == 4) {
                result.kind_ = kind_;
            }
            if (kindCase_ == 5) {
                result.kind_ = kind_;
            }
            result.bitField0_ = to_bitField0_;
            result.kindCase_ = kindCase_;
            return result;
        }

        @Override
        public Builder mergeFrom(IrType other) {
            if (other == getDefaultInstance())
                return this;
            switch (other.getKindCase()) {
                case LEGACYSIMPLE: {
                    mergeLegacySimple(other.getLegacySimple());
                    break;
                }
                case DYNAMIC: {
                    mergeDynamic(other.getDynamic());
                    break;
                }
                case ERROR: {
                    mergeError(other.getError());
                    break;
                }
                case DNN: {
                    mergeDnn(other.getDnn());
                    break;
                }
                case SIMPLE: {
                    mergeSimple(other.getSimple());
                    break;
                }
                case KIND_NOT_SET: {
                    break;
                }
            }
            setUnknownFields(
                    getUnknownFields().concat(other.unknownFields));
            return this;
        }

        @Override
        public boolean isInitialized() {
            if (hasLegacySimple()) {
                if (!getLegacySimple().isInitialized()) {

                    return false;
                }
            }
            if (hasDynamic()) {
                if (!getDynamic().isInitialized()) {

                    return false;
                }
            }
            if (hasError()) {
                if (!getError().isInitialized()) {

                    return false;
                }
            }
            if (hasSimple()) {
                if (!getSimple().isInitialized()) {

                    return false;
                }
            }
            return true;
        }

        @Override
        public Builder mergeFrom(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws IOException {
            IrType parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (InvalidProtocolBufferException e) {
                parsedMessage = (IrType) e.getUnfinishedMessage();
                throw e;
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        public KindCase
        getKindCase() {
            return KindCase.valueOf(
                    kindCase_);
        }

        public Builder clearKind() {
            kindCase_ = 0;
            kind_ = null;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy legacySimple = 1;</code>
         */
        @Override
        public boolean hasLegacySimple() {
            return kindCase_ == 1;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy legacySimple = 1;</code>
         */
        @Override
        public IrSimpleTypeLegacy getLegacySimple() {
            if (kindCase_ == 1) {
                return (IrSimpleTypeLegacy) kind_;
            }
            return IrSimpleTypeLegacy.getDefaultInstance();
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy legacySimple = 1;</code>
         */
        public Builder setLegacySimple(IrSimpleTypeLegacy value) {
            if (value == null) {
                throw new NullPointerException();
            }
            kind_ = value;

            kindCase_ = 1;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy legacySimple = 1;</code>
         */
        public Builder setLegacySimple(
                IrSimpleTypeLegacy.Builder builderForValue) {
            kind_ = builderForValue.build();

            kindCase_ = 1;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy legacySimple = 1;</code>
         */
        public Builder mergeLegacySimple(IrSimpleTypeLegacy value) {
            if (kindCase_ == 1 &&
                    kind_ != IrSimpleTypeLegacy.getDefaultInstance()) {
                kind_ = IrSimpleTypeLegacy.newBuilder((IrSimpleTypeLegacy) kind_)
                        .mergeFrom(value).buildPartial();
            } else {
                kind_ = value;
            }

            kindCase_ = 1;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleTypeLegacy legacySimple = 1;</code>
         */
        public Builder clearLegacySimple() {
            if (kindCase_ == 1) {
                kindCase_ = 0;
                kind_ = null;

            }
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType dynamic = 2;</code>
         */
        @Override
        public boolean hasDynamic() {
            return kindCase_ == 2;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType dynamic = 2;</code>
         */
        @Override
        public IrDynamicType getDynamic() {
            if (kindCase_ == 2) {
                return (IrDynamicType) kind_;
            }
            return IrDynamicType.getDefaultInstance();
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType dynamic = 2;</code>
         */
        public Builder setDynamic(IrDynamicType value) {
            if (value == null) {
                throw new NullPointerException();
            }
            kind_ = value;

            kindCase_ = 2;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType dynamic = 2;</code>
         */
        public Builder setDynamic(
                IrDynamicType.Builder builderForValue) {
            kind_ = builderForValue.build();

            kindCase_ = 2;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType dynamic = 2;</code>
         */
        public Builder mergeDynamic(IrDynamicType value) {
            if (kindCase_ == 2 &&
                    kind_ != IrDynamicType.getDefaultInstance()) {
                kind_ = IrDynamicType.newBuilder((IrDynamicType) kind_)
                        .mergeFrom(value).buildPartial();
            } else {
                kind_ = value;
            }

            kindCase_ = 2;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrDynamicType dynamic = 2;</code>
         */
        public Builder clearDynamic() {
            if (kindCase_ == 2) {
                kindCase_ = 0;
                kind_ = null;

            }
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrErrorType error = 3;</code>
         */
        @Override
        public boolean hasError() {
            return kindCase_ == 3;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrErrorType error = 3;</code>
         */
        @Override
        public IrErrorType getError() {
            if (kindCase_ == 3) {
                return (IrErrorType) kind_;
            }
            return IrErrorType.getDefaultInstance();
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrErrorType error = 3;</code>
         */
        public Builder setError(IrErrorType value) {
            if (value == null) {
                throw new NullPointerException();
            }
            kind_ = value;

            kindCase_ = 3;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrErrorType error = 3;</code>
         */
        public Builder setError(
                IrErrorType.Builder builderForValue) {
            kind_ = builderForValue.build();

            kindCase_ = 3;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrErrorType error = 3;</code>
         */
        public Builder mergeError(IrErrorType value) {
            if (kindCase_ == 3 &&
                    kind_ != IrErrorType.getDefaultInstance()) {
                kind_ = IrErrorType.newBuilder((IrErrorType) kind_)
                        .mergeFrom(value).buildPartial();
            } else {
                kind_ = value;
            }

            kindCase_ = 3;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrErrorType error = 3;</code>
         */
        public Builder clearError() {
            if (kindCase_ == 3) {
                kindCase_ = 0;
                kind_ = null;

            }
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType dnn = 4;</code>
         */
        @Override
        public boolean hasDnn() {
            return kindCase_ == 4;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType dnn = 4;</code>
         */
        @Override
        public IrDefinitelyNotNullType getDnn() {
            if (kindCase_ == 4) {
                return (IrDefinitelyNotNullType) kind_;
            }
            return IrDefinitelyNotNullType.getDefaultInstance();
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType dnn = 4;</code>
         */
        public Builder setDnn(IrDefinitelyNotNullType value) {
            if (value == null) {
                throw new NullPointerException();
            }
            kind_ = value;

            kindCase_ = 4;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType dnn = 4;</code>
         */
        public Builder setDnn(
                IrDefinitelyNotNullType.Builder builderForValue) {
            kind_ = builderForValue.build();

            kindCase_ = 4;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType dnn = 4;</code>
         */
        public Builder mergeDnn(IrDefinitelyNotNullType value) {
            if (kindCase_ == 4 &&
                    kind_ != IrDefinitelyNotNullType.getDefaultInstance()) {
                kind_ = IrDefinitelyNotNullType.newBuilder((IrDefinitelyNotNullType) kind_)
                        .mergeFrom(value).buildPartial();
            } else {
                kind_ = value;
            }

            kindCase_ = 4;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType dnn = 4;</code>
         */
        public Builder clearDnn() {
            if (kindCase_ == 4) {
                kindCase_ = 0;
                kind_ = null;

            }
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType simple = 5;</code>
         */
        @Override
        public boolean hasSimple() {
            return kindCase_ == 5;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType simple = 5;</code>
         */
        @Override
        public IrSimpleType getSimple() {
            if (kindCase_ == 5) {
                return (IrSimpleType) kind_;
            }
            return IrSimpleType.getDefaultInstance();
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType simple = 5;</code>
         */
        public Builder setSimple(IrSimpleType value) {
            if (value == null) {
                throw new NullPointerException();
            }
            kind_ = value;

            kindCase_ = 5;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType simple = 5;</code>
         */
        public Builder setSimple(
                IrSimpleType.Builder builderForValue) {
            kind_ = builderForValue.build();

            kindCase_ = 5;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType simple = 5;</code>
         */
        public Builder mergeSimple(IrSimpleType value) {
            if (kindCase_ == 5 &&
                    kind_ != IrSimpleType.getDefaultInstance()) {
                kind_ = IrSimpleType.newBuilder((IrSimpleType) kind_)
                        .mergeFrom(value).buildPartial();
            } else {
                kind_ = value;
            }

            kindCase_ = 5;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSimpleType simple = 5;</code>
         */
        public Builder clearSimple() {
            if (kindCase_ == 5) {
                kindCase_ = 0;
                kind_ = null;

            }
            return this;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrType)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrType)
}
