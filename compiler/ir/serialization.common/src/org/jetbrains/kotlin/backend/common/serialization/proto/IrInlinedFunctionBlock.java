// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

import org.jetbrains.kotlin.protobuf.AbstractParser;
import org.jetbrains.kotlin.protobuf.ByteString;
import org.jetbrains.kotlin.protobuf.CodedInputStream;
import org.jetbrains.kotlin.protobuf.CodedOutputStream;
import org.jetbrains.kotlin.protobuf.ExtensionRegistryLite;
import org.jetbrains.kotlin.protobuf.GeneratedMessageLite;
import org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException;
import org.jetbrains.kotlin.protobuf.Parser;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamException;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrInlinedFunctionBlock}
 */
public final class IrInlinedFunctionBlock extends
        GeneratedMessageLite implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrInlinedFunctionBlock)
        IrInlinedFunctionBlockOrBuilder {
    public static final int INLINED_FUNCTION_SYMBOL_FIELD_NUMBER = 1;
    public static final int INLINED_FUNCTION_FILE_ENTRY_FIELD_NUMBER = 2;
    public static final int BASE_FIELD_NUMBER = 3;
    public static final int INLINED_FUNCTION_START_OFFSET_FIELD_NUMBER = 4;
    public static final int INLINED_FUNCTION_END_OFFSET_FIELD_NUMBER = 5;
    private static final IrInlinedFunctionBlock defaultInstance;
    private static final long serialVersionUID = 0L;
    public static Parser<IrInlinedFunctionBlock> PARSER =
            new AbstractParser<IrInlinedFunctionBlock>() {
                @Override
                public IrInlinedFunctionBlock parsePartialFrom(
                        CodedInputStream input,
                        ExtensionRegistryLite extensionRegistry)
                        throws InvalidProtocolBufferException {
                    return new IrInlinedFunctionBlock(input, extensionRegistry);
                }
            };

    static {
        defaultInstance = new IrInlinedFunctionBlock(true);
        defaultInstance.initFields();
    }

    private final ByteString unknownFields;
    private int bitField0_;
    private long inlinedFunctionSymbol_;
    private FileEntry inlinedFunctionFileEntry_;
    private IrBlock base_;
    private int inlinedFunctionStartOffset_;
    private int inlinedFunctionEndOffset_;
    private byte memoizedIsInitialized = -1;
    private int memoizedSerializedSize = -1;

    // Use IrInlinedFunctionBlock.newBuilder() to construct.
    private IrInlinedFunctionBlock(GeneratedMessageLite.Builder builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
    }
    private IrInlinedFunctionBlock(boolean noInit) {
        this.unknownFields = ByteString.EMPTY;
    }

    private IrInlinedFunctionBlock(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        ByteString.Output unknownFieldsOutput =
                ByteString.newOutput();
        CodedOutputStream unknownFieldsCodedOutput =
                CodedOutputStream.newInstance(
                        unknownFieldsOutput, 1);
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 8: {
                        bitField0_ |= 0x00000001;
                        inlinedFunctionSymbol_ = input.readInt64();
                        break;
                    }
                    case 18: {
                        FileEntry.Builder subBuilder = null;
                        if (((bitField0_ & 0x00000002) == 0x00000002)) {
                            subBuilder = inlinedFunctionFileEntry_.toBuilder();
                        }
                        inlinedFunctionFileEntry_ = input.readMessage(FileEntry.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom(inlinedFunctionFileEntry_);
                            inlinedFunctionFileEntry_ = subBuilder.buildPartial();
                        }
                        bitField0_ |= 0x00000002;
                        break;
                    }
                    case 26: {
                        IrBlock.Builder subBuilder = null;
                        if (((bitField0_ & 0x00000004) == 0x00000004)) {
                            subBuilder = base_.toBuilder();
                        }
                        base_ = input.readMessage(IrBlock.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom(base_);
                            base_ = subBuilder.buildPartial();
                        }
                        bitField0_ |= 0x00000004;
                        break;
                    }
                    case 32: {
                        bitField0_ |= 0x00000008;
                        inlinedFunctionStartOffset_ = input.readInt32();
                        break;
                    }
                    case 40: {
                        bitField0_ |= 0x00000010;
                        inlinedFunctionEndOffset_ = input.readInt32();
                        break;
                    }
                }
            }
        } catch (InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (IOException e) {
            throw new InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this);
        } finally {
            try {
                unknownFieldsCodedOutput.flush();
            } catch (IOException e) {
                // Should not happen
            } finally {
                unknownFields = unknownFieldsOutput.toByteString();
            }
            makeExtensionsImmutable();
        }
    }

    public static IrInlinedFunctionBlock getDefaultInstance() {
        return defaultInstance;
    }

    public static IrInlinedFunctionBlock parseFrom(
            ByteString data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrInlinedFunctionBlock parseFrom(
            ByteString data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrInlinedFunctionBlock parseFrom(byte[] data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrInlinedFunctionBlock parseFrom(
            byte[] data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrInlinedFunctionBlock parseFrom(InputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrInlinedFunctionBlock parseFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static IrInlinedFunctionBlock parseDelimitedFrom(InputStream input)
            throws IOException {
        return PARSER.parseDelimitedFrom(input);
    }

    public static IrInlinedFunctionBlock parseDelimitedFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }

    public static IrInlinedFunctionBlock parseFrom(
            CodedInputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrInlinedFunctionBlock parseFrom(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() {
        return Builder.create();
    }

    public static Builder newBuilder(IrInlinedFunctionBlock prototype) {
        return newBuilder().mergeFrom(prototype);
    }

    @Override
    public IrInlinedFunctionBlock getDefaultInstanceForType() {
        return defaultInstance;
    }

    @Override
    public Parser<IrInlinedFunctionBlock> getParserForType() {
        return PARSER;
    }

    /**
     * <code>optional int64 inlined_function_symbol = 1;</code>
     */
    @Override
    public boolean hasInlinedFunctionSymbol() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
    }

    /**
     * <code>optional int64 inlined_function_symbol = 1;</code>
     */
    @Override
    public long getInlinedFunctionSymbol() {
        return inlinedFunctionSymbol_;
    }

    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry inlined_function_file_entry = 2;</code>
     */
    @Override
    public boolean hasInlinedFunctionFileEntry() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
    }

    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry inlined_function_file_entry = 2;</code>
     */
    @Override
    public FileEntry getInlinedFunctionFileEntry() {
        return inlinedFunctionFileEntry_;
    }

    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrBlock base = 3;</code>
     */
    @Override
    public boolean hasBase() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
    }

    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrBlock base = 3;</code>
     */
    @Override
    public IrBlock getBase() {
        return base_;
    }

    /**
     * <code>required int32 inlined_function_start_offset = 4;</code>
     */
    @Override
    public boolean hasInlinedFunctionStartOffset() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
    }

    /**
     * <code>required int32 inlined_function_start_offset = 4;</code>
     */
    @Override
    public int getInlinedFunctionStartOffset() {
        return inlinedFunctionStartOffset_;
    }

    /**
     * <code>required int32 inlined_function_end_offset = 5;</code>
     */
    @Override
    public boolean hasInlinedFunctionEndOffset() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
    }

    /**
     * <code>required int32 inlined_function_end_offset = 5;</code>
     */
    @Override
    public int getInlinedFunctionEndOffset() {
        return inlinedFunctionEndOffset_;
    }

    private void initFields() {
        inlinedFunctionSymbol_ = 0L;
        inlinedFunctionFileEntry_ = FileEntry.getDefaultInstance();
        base_ = IrBlock.getDefaultInstance();
        inlinedFunctionStartOffset_ = 0;
        inlinedFunctionEndOffset_ = 0;
    }

    @Override
    public boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasInlinedFunctionFileEntry()) {
            memoizedIsInitialized = 0;
            return false;
        }
        if (!hasBase()) {
            memoizedIsInitialized = 0;
            return false;
        }
        if (!hasInlinedFunctionStartOffset()) {
            memoizedIsInitialized = 0;
            return false;
        }
        if (!hasInlinedFunctionEndOffset()) {
            memoizedIsInitialized = 0;
            return false;
        }
        if (!getInlinedFunctionFileEntry().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
        }
        if (!getBase().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
        }
        memoizedIsInitialized = 1;
        return true;
    }

    @Override
    public void writeTo(CodedOutputStream output)
            throws IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            output.writeInt64(1, inlinedFunctionSymbol_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            output.writeMessage(2, inlinedFunctionFileEntry_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            output.writeMessage(3, base_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
            output.writeInt32(4, inlinedFunctionStartOffset_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
            output.writeInt32(5, inlinedFunctionEndOffset_);
        }
        output.writeRawBytes(unknownFields);
    }

    @Override
    public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += CodedOutputStream
                    .computeInt64Size(1, inlinedFunctionSymbol_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += CodedOutputStream
                    .computeMessageSize(2, inlinedFunctionFileEntry_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            size += CodedOutputStream
                    .computeMessageSize(3, base_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
            size += CodedOutputStream
                    .computeInt32Size(4, inlinedFunctionStartOffset_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
            size += CodedOutputStream
                    .computeInt32Size(5, inlinedFunctionEndOffset_);
        }
        size += unknownFields.size();
        memoizedSerializedSize = size;
        return size;
    }

    @Override
    protected Object writeReplace()
            throws ObjectStreamException {
        return super.writeReplace();
    }

    @Override
    public Builder newBuilderForType() {
        return newBuilder();
    }

    @Override
    public Builder toBuilder() {
        return newBuilder(this);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrInlinedFunctionBlock}
     */
    public static final class Builder extends
            GeneratedMessageLite.Builder<
                    IrInlinedFunctionBlock, Builder>
            implements
            // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrInlinedFunctionBlock)
            IrInlinedFunctionBlockOrBuilder {
        private int bitField0_;
        private long inlinedFunctionSymbol_;
        private FileEntry inlinedFunctionFileEntry_ = FileEntry.getDefaultInstance();
        private IrBlock base_ = IrBlock.getDefaultInstance();
        private int inlinedFunctionStartOffset_;
        private int inlinedFunctionEndOffset_;

        // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrInlinedFunctionBlock.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private static Builder create() {
            return new Builder();
        }

        private void maybeForceBuilderInitialization() {
        }

        @Override
        public Builder clear() {
            super.clear();
            inlinedFunctionSymbol_ = 0L;
            bitField0_ &= ~0x00000001;
            inlinedFunctionFileEntry_ = FileEntry.getDefaultInstance();
            bitField0_ &= ~0x00000002;
            base_ = IrBlock.getDefaultInstance();
            bitField0_ &= ~0x00000004;
            inlinedFunctionStartOffset_ = 0;
            bitField0_ &= ~0x00000008;
            inlinedFunctionEndOffset_ = 0;
            bitField0_ &= ~0x00000010;
            return this;
        }

        @Override
        public Builder clone() {
            return create().mergeFrom(buildPartial());
        }

        @Override
        public IrInlinedFunctionBlock getDefaultInstanceForType() {
            return getDefaultInstance();
        }

        @Override
        public IrInlinedFunctionBlock build() {
            IrInlinedFunctionBlock result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        @Override
        public IrInlinedFunctionBlock buildPartial() {
            IrInlinedFunctionBlock result = new IrInlinedFunctionBlock(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                to_bitField0_ |= 0x00000001;
            }
            result.inlinedFunctionSymbol_ = inlinedFunctionSymbol_;
            if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                to_bitField0_ |= 0x00000002;
            }
            result.inlinedFunctionFileEntry_ = inlinedFunctionFileEntry_;
            if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                to_bitField0_ |= 0x00000004;
            }
            result.base_ = base_;
            if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                to_bitField0_ |= 0x00000008;
            }
            result.inlinedFunctionStartOffset_ = inlinedFunctionStartOffset_;
            if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
                to_bitField0_ |= 0x00000010;
            }
            result.inlinedFunctionEndOffset_ = inlinedFunctionEndOffset_;
            result.bitField0_ = to_bitField0_;
            return result;
        }

        @Override
        public Builder mergeFrom(IrInlinedFunctionBlock other) {
            if (other == getDefaultInstance())
                return this;
            if (other.hasInlinedFunctionSymbol()) {
                setInlinedFunctionSymbol(other.getInlinedFunctionSymbol());
            }
            if (other.hasInlinedFunctionFileEntry()) {
                mergeInlinedFunctionFileEntry(other.getInlinedFunctionFileEntry());
            }
            if (other.hasBase()) {
                mergeBase(other.getBase());
            }
            if (other.hasInlinedFunctionStartOffset()) {
                setInlinedFunctionStartOffset(other.getInlinedFunctionStartOffset());
            }
            if (other.hasInlinedFunctionEndOffset()) {
                setInlinedFunctionEndOffset(other.getInlinedFunctionEndOffset());
            }
            setUnknownFields(
                    getUnknownFields().concat(other.unknownFields));
            return this;
        }

        @Override
        public boolean isInitialized() {
            if (!hasInlinedFunctionFileEntry()) {

                return false;
            }
            if (!hasBase()) {

                return false;
            }
            if (!hasInlinedFunctionStartOffset()) {

                return false;
            }
            if (!hasInlinedFunctionEndOffset()) {

                return false;
            }
            if (!getInlinedFunctionFileEntry().isInitialized()) {

                return false;
            }
            if (!getBase().isInitialized()) {

                return false;
            }
            return true;
        }

        @Override
        public Builder mergeFrom(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws IOException {
            IrInlinedFunctionBlock parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (InvalidProtocolBufferException e) {
                parsedMessage = (IrInlinedFunctionBlock) e.getUnfinishedMessage();
                throw e;
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        /**
         * <code>optional int64 inlined_function_symbol = 1;</code>
         */
        @Override
        public boolean hasInlinedFunctionSymbol() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>optional int64 inlined_function_symbol = 1;</code>
         */
        @Override
        public long getInlinedFunctionSymbol() {
            return inlinedFunctionSymbol_;
        }

        /**
         * <code>optional int64 inlined_function_symbol = 1;</code>
         */
        public Builder setInlinedFunctionSymbol(long value) {
            bitField0_ |= 0x00000001;
            inlinedFunctionSymbol_ = value;

            return this;
        }

        /**
         * <code>optional int64 inlined_function_symbol = 1;</code>
         */
        public Builder clearInlinedFunctionSymbol() {
            bitField0_ &= ~0x00000001;
            inlinedFunctionSymbol_ = 0L;

            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry inlined_function_file_entry = 2;</code>
         */
        @Override
        public boolean hasInlinedFunctionFileEntry() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry inlined_function_file_entry = 2;</code>
         */
        @Override
        public FileEntry getInlinedFunctionFileEntry() {
            return inlinedFunctionFileEntry_;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry inlined_function_file_entry = 2;</code>
         */
        public Builder setInlinedFunctionFileEntry(FileEntry value) {
            if (value == null) {
                throw new NullPointerException();
            }
            inlinedFunctionFileEntry_ = value;

            bitField0_ |= 0x00000002;
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry inlined_function_file_entry = 2;</code>
         */
        public Builder setInlinedFunctionFileEntry(
                FileEntry.Builder builderForValue) {
            inlinedFunctionFileEntry_ = builderForValue.build();

            bitField0_ |= 0x00000002;
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry inlined_function_file_entry = 2;</code>
         */
        public Builder mergeInlinedFunctionFileEntry(FileEntry value) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                    inlinedFunctionFileEntry_ != FileEntry.getDefaultInstance()) {
                inlinedFunctionFileEntry_ =
                        FileEntry.newBuilder(inlinedFunctionFileEntry_).mergeFrom(value).buildPartial();
            } else {
                inlinedFunctionFileEntry_ = value;
            }

            bitField0_ |= 0x00000002;
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry inlined_function_file_entry = 2;</code>
         */
        public Builder clearInlinedFunctionFileEntry() {
            inlinedFunctionFileEntry_ = FileEntry.getDefaultInstance();

            bitField0_ &= ~0x00000002;
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrBlock base = 3;</code>
         */
        @Override
        public boolean hasBase() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrBlock base = 3;</code>
         */
        @Override
        public IrBlock getBase() {
            return base_;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrBlock base = 3;</code>
         */
        public Builder setBase(IrBlock value) {
            if (value == null) {
                throw new NullPointerException();
            }
            base_ = value;

            bitField0_ |= 0x00000004;
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrBlock base = 3;</code>
         */
        public Builder setBase(
                IrBlock.Builder builderForValue) {
            base_ = builderForValue.build();

            bitField0_ |= 0x00000004;
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrBlock base = 3;</code>
         */
        public Builder mergeBase(IrBlock value) {
            if (((bitField0_ & 0x00000004) == 0x00000004) &&
                    base_ != IrBlock.getDefaultInstance()) {
                base_ =
                        IrBlock.newBuilder(base_).mergeFrom(value).buildPartial();
            } else {
                base_ = value;
            }

            bitField0_ |= 0x00000004;
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrBlock base = 3;</code>
         */
        public Builder clearBase() {
            base_ = IrBlock.getDefaultInstance();

            bitField0_ &= ~0x00000004;
            return this;
        }

        /**
         * <code>required int32 inlined_function_start_offset = 4;</code>
         */
        @Override
        public boolean hasInlinedFunctionStartOffset() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>required int32 inlined_function_start_offset = 4;</code>
         */
        @Override
        public int getInlinedFunctionStartOffset() {
            return inlinedFunctionStartOffset_;
        }

        /**
         * <code>required int32 inlined_function_start_offset = 4;</code>
         */
        public Builder setInlinedFunctionStartOffset(int value) {
            bitField0_ |= 0x00000008;
            inlinedFunctionStartOffset_ = value;

            return this;
        }

        /**
         * <code>required int32 inlined_function_start_offset = 4;</code>
         */
        public Builder clearInlinedFunctionStartOffset() {
            bitField0_ &= ~0x00000008;
            inlinedFunctionStartOffset_ = 0;

            return this;
        }

        /**
         * <code>required int32 inlined_function_end_offset = 5;</code>
         */
        @Override
        public boolean hasInlinedFunctionEndOffset() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }

        /**
         * <code>required int32 inlined_function_end_offset = 5;</code>
         */
        @Override
        public int getInlinedFunctionEndOffset() {
            return inlinedFunctionEndOffset_;
        }

        /**
         * <code>required int32 inlined_function_end_offset = 5;</code>
         */
        public Builder setInlinedFunctionEndOffset(int value) {
            bitField0_ |= 0x00000010;
            inlinedFunctionEndOffset_ = value;

            return this;
        }

        /**
         * <code>required int32 inlined_function_end_offset = 5;</code>
         */
        public Builder clearInlinedFunctionEndOffset() {
            bitField0_ &= ~0x00000010;
            inlinedFunctionEndOffset_ = 0;

            return this;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrInlinedFunctionBlock)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrInlinedFunctionBlock)
}
