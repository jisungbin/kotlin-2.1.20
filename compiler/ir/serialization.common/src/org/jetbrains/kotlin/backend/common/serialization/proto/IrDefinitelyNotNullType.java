// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

import org.jetbrains.kotlin.protobuf.AbstractParser;
import org.jetbrains.kotlin.protobuf.ByteString;
import org.jetbrains.kotlin.protobuf.CodedInputStream;
import org.jetbrains.kotlin.protobuf.CodedOutputStream;
import org.jetbrains.kotlin.protobuf.ExtensionRegistryLite;
import org.jetbrains.kotlin.protobuf.GeneratedMessageLite;
import org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException;
import org.jetbrains.kotlin.protobuf.Parser;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType}
 */
public final class IrDefinitelyNotNullType extends
        GeneratedMessageLite implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType)
        IrDefinitelyNotNullTypeOrBuilder {
    public static final int TYPES_FIELD_NUMBER = 1;
    private static final IrDefinitelyNotNullType defaultInstance;
    private static final long serialVersionUID = 0L;
    public static Parser<IrDefinitelyNotNullType> PARSER =
            new AbstractParser<IrDefinitelyNotNullType>() {
                @Override
                public IrDefinitelyNotNullType parsePartialFrom(
                        CodedInputStream input,
                        ExtensionRegistryLite extensionRegistry)
                        throws InvalidProtocolBufferException {
                    return new IrDefinitelyNotNullType(input, extensionRegistry);
                }
            };

    static {
        defaultInstance = new IrDefinitelyNotNullType(true);
        defaultInstance.initFields();
    }

    private final ByteString unknownFields;
    private List<Integer> types_;
    private int typesMemoizedSerializedSize = -1;
    private byte memoizedIsInitialized = -1;
    private int memoizedSerializedSize = -1;
    // Use IrDefinitelyNotNullType.newBuilder() to construct.
    private IrDefinitelyNotNullType(GeneratedMessageLite.Builder builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
    }

    private IrDefinitelyNotNullType(boolean noInit) {
        this.unknownFields = ByteString.EMPTY;
    }

    private IrDefinitelyNotNullType(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        ByteString.Output unknownFieldsOutput =
                ByteString.newOutput();
        CodedOutputStream unknownFieldsCodedOutput =
                CodedOutputStream.newInstance(
                        unknownFieldsOutput, 1);
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 8: {
                        if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                            types_ = new ArrayList<Integer>();
                            mutable_bitField0_ |= 0x00000001;
                        }
                        types_.add(input.readInt32());
                        break;
                    }
                    case 10: {
                        int length = input.readRawVarint32();
                        int limit = input.pushLimit(length);
                        if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                            types_ = new ArrayList<Integer>();
                            mutable_bitField0_ |= 0x00000001;
                        }
                        while (input.getBytesUntilLimit() > 0) {
                            types_.add(input.readInt32());
                        }
                        input.popLimit(limit);
                        break;
                    }
                }
            }
        } catch (InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (IOException e) {
            throw new InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this);
        } finally {
            if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                types_ = Collections.unmodifiableList(types_);
            }
            try {
                unknownFieldsCodedOutput.flush();
            } catch (IOException e) {
                // Should not happen
            } finally {
                unknownFields = unknownFieldsOutput.toByteString();
            }
            makeExtensionsImmutable();
        }
    }

    public static IrDefinitelyNotNullType getDefaultInstance() {
        return defaultInstance;
    }

    public static IrDefinitelyNotNullType parseFrom(
            ByteString data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrDefinitelyNotNullType parseFrom(
            ByteString data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrDefinitelyNotNullType parseFrom(byte[] data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrDefinitelyNotNullType parseFrom(
            byte[] data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrDefinitelyNotNullType parseFrom(InputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrDefinitelyNotNullType parseFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static IrDefinitelyNotNullType parseDelimitedFrom(InputStream input)
            throws IOException {
        return PARSER.parseDelimitedFrom(input);
    }

    public static IrDefinitelyNotNullType parseDelimitedFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }

    public static IrDefinitelyNotNullType parseFrom(
            CodedInputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrDefinitelyNotNullType parseFrom(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() {
        return Builder.create();
    }

    public static Builder newBuilder(IrDefinitelyNotNullType prototype) {
        return newBuilder().mergeFrom(prototype);
    }

    @Override
    public IrDefinitelyNotNullType getDefaultInstanceForType() {
        return defaultInstance;
    }

    @Override
    public Parser<IrDefinitelyNotNullType> getParserForType() {
        return PARSER;
    }

    /**
     * <code>repeated int32 types = 1 [packed = true];</code>
     *
     * <pre>
     * In fact that is an `IntersectionType` so let represent it as it. In future it could be easy to support general case
     * </pre>
     */
    @Override
    public List<Integer>
    getTypesList() {
        return types_;
    }

    /**
     * <code>repeated int32 types = 1 [packed = true];</code>
     *
     * <pre>
     * In fact that is an `IntersectionType` so let represent it as it. In future it could be easy to support general case
     * </pre>
     */
    @Override
    public int getTypesCount() {
        return types_.size();
    }

    /**
     * <code>repeated int32 types = 1 [packed = true];</code>
     *
     * <pre>
     * In fact that is an `IntersectionType` so let represent it as it. In future it could be easy to support general case
     * </pre>
     */
    @Override
    public int getTypes(int index) {
        return types_.get(index);
    }

    private void initFields() {
        types_ = Collections.emptyList();
    }

    @Override
    public boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
    }

    @Override
    public void writeTo(CodedOutputStream output)
            throws IOException {
        getSerializedSize();
        if (getTypesList().size() > 0) {
            output.writeRawVarint32(10);
            output.writeRawVarint32(typesMemoizedSerializedSize);
        }
        for (int i = 0; i < types_.size(); i++) {
            output.writeInt32NoTag(types_.get(i));
        }
        output.writeRawBytes(unknownFields);
    }

    @Override
    public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        {
            int dataSize = 0;
            for (int i = 0; i < types_.size(); i++) {
                dataSize += CodedOutputStream
                        .computeInt32SizeNoTag(types_.get(i));
            }
            size += dataSize;
            if (!getTypesList().isEmpty()) {
                size += 1;
                size += CodedOutputStream
                        .computeInt32SizeNoTag(dataSize);
            }
            typesMemoizedSerializedSize = dataSize;
        }
        size += unknownFields.size();
        memoizedSerializedSize = size;
        return size;
    }

    @Override
    protected Object writeReplace()
            throws ObjectStreamException {
        return super.writeReplace();
    }

    @Override
    public Builder newBuilderForType() {
        return newBuilder();
    }

    @Override
    public Builder toBuilder() {
        return newBuilder(this);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType}
     */
    public static final class Builder extends
            GeneratedMessageLite.Builder<
                    IrDefinitelyNotNullType, Builder>
            implements
            // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType)
            IrDefinitelyNotNullTypeOrBuilder {
        private int bitField0_;
        private List<Integer> types_ = Collections.emptyList();

        // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private static Builder create() {
            return new Builder();
        }

        private void maybeForceBuilderInitialization() {
        }

        @Override
        public Builder clear() {
            super.clear();
            types_ = Collections.emptyList();
            bitField0_ &= ~0x00000001;
            return this;
        }

        @Override
        public Builder clone() {
            return create().mergeFrom(buildPartial());
        }

        @Override
        public IrDefinitelyNotNullType getDefaultInstanceForType() {
            return getDefaultInstance();
        }

        @Override
        public IrDefinitelyNotNullType build() {
            IrDefinitelyNotNullType result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        @Override
        public IrDefinitelyNotNullType buildPartial() {
            IrDefinitelyNotNullType result = new IrDefinitelyNotNullType(this);
            int from_bitField0_ = bitField0_;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                types_ = Collections.unmodifiableList(types_);
                bitField0_ &= ~0x00000001;
            }
            result.types_ = types_;
            return result;
        }

        @Override
        public Builder mergeFrom(IrDefinitelyNotNullType other) {
            if (other == getDefaultInstance())
                return this;
            if (!other.types_.isEmpty()) {
                if (types_.isEmpty()) {
                    types_ = other.types_;
                    bitField0_ &= ~0x00000001;
                } else {
                    ensureTypesIsMutable();
                    types_.addAll(other.types_);
                }

            }
            setUnknownFields(
                    getUnknownFields().concat(other.unknownFields));
            return this;
        }

        @Override
        public boolean isInitialized() {
            return true;
        }

        @Override
        public Builder mergeFrom(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws IOException {
            IrDefinitelyNotNullType parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (InvalidProtocolBufferException e) {
                parsedMessage = (IrDefinitelyNotNullType) e.getUnfinishedMessage();
                throw e;
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        private void ensureTypesIsMutable() {
            if (!((bitField0_ & 0x00000001) == 0x00000001)) {
                types_ = new ArrayList<Integer>(types_);
                bitField0_ |= 0x00000001;
            }
        }

        /**
         * <code>repeated int32 types = 1 [packed = true];</code>
         *
         * <pre>
         * In fact that is an `IntersectionType` so let represent it as it. In future it could be easy to support general case
         * </pre>
         */
        @Override
        public List<Integer>
        getTypesList() {
            return Collections.unmodifiableList(types_);
        }

        /**
         * <code>repeated int32 types = 1 [packed = true];</code>
         *
         * <pre>
         * In fact that is an `IntersectionType` so let represent it as it. In future it could be easy to support general case
         * </pre>
         */
        @Override
        public int getTypesCount() {
            return types_.size();
        }

        /**
         * <code>repeated int32 types = 1 [packed = true];</code>
         *
         * <pre>
         * In fact that is an `IntersectionType` so let represent it as it. In future it could be easy to support general case
         * </pre>
         */
        @Override
        public int getTypes(int index) {
            return types_.get(index);
        }

        /**
         * <code>repeated int32 types = 1 [packed = true];</code>
         *
         * <pre>
         * In fact that is an `IntersectionType` so let represent it as it. In future it could be easy to support general case
         * </pre>
         */
        public Builder setTypes(
                int index, int value) {
            ensureTypesIsMutable();
            types_.set(index, value);

            return this;
        }

        /**
         * <code>repeated int32 types = 1 [packed = true];</code>
         *
         * <pre>
         * In fact that is an `IntersectionType` so let represent it as it. In future it could be easy to support general case
         * </pre>
         */
        public Builder addTypes(int value) {
            ensureTypesIsMutable();
            types_.add(value);

            return this;
        }

        /**
         * <code>repeated int32 types = 1 [packed = true];</code>
         *
         * <pre>
         * In fact that is an `IntersectionType` so let represent it as it. In future it could be easy to support general case
         * </pre>
         */
        public Builder addAllTypes(
                Iterable<? extends Integer> values) {
            ensureTypesIsMutable();
            addAll(
                    values, types_);

            return this;
        }

        /**
         * <code>repeated int32 types = 1 [packed = true];</code>
         *
         * <pre>
         * In fact that is an `IntersectionType` so let represent it as it. In future it could be easy to support general case
         * </pre>
         */
        public Builder clearTypes() {
            types_ = Collections.emptyList();
            bitField0_ &= ~0x00000001;

            return this;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrDefinitelyNotNullType)
}
