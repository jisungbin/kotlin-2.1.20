// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

import org.jetbrains.kotlin.protobuf.AbstractParser;
import org.jetbrains.kotlin.protobuf.ByteString;
import org.jetbrains.kotlin.protobuf.CodedInputStream;
import org.jetbrains.kotlin.protobuf.CodedOutputStream;
import org.jetbrains.kotlin.protobuf.ExtensionRegistryLite;
import org.jetbrains.kotlin.protobuf.GeneratedMessageLite;
import org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException;
import org.jetbrains.kotlin.protobuf.Parser;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction}
 */
public final class IrFunction extends
        GeneratedMessageLite implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction)
        IrFunctionOrBuilder {
    public static final int BASE_FIELD_NUMBER = 1;
    public static final int OVERRIDDEN_FIELD_NUMBER = 2;
    private static final IrFunction defaultInstance;
    private static final long serialVersionUID = 0L;
    public static Parser<IrFunction> PARSER =
            new AbstractParser<IrFunction>() {
                @Override
                public IrFunction parsePartialFrom(
                        CodedInputStream input,
                        ExtensionRegistryLite extensionRegistry)
                        throws InvalidProtocolBufferException {
                    return new IrFunction(input, extensionRegistry);
                }
            };

    static {
        defaultInstance = new IrFunction(true);
        defaultInstance.initFields();
    }

    private final ByteString unknownFields;
    private int bitField0_;
    private IrFunctionBase base_;
    private List<Long> overridden_;
    private int overriddenMemoizedSerializedSize = -1;
    private byte memoizedIsInitialized = -1;
    private int memoizedSerializedSize = -1;

    // Use IrFunction.newBuilder() to construct.
    private IrFunction(GeneratedMessageLite.Builder builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
    }

    private IrFunction(boolean noInit) {
        this.unknownFields = ByteString.EMPTY;
    }
    private IrFunction(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        ByteString.Output unknownFieldsOutput =
                ByteString.newOutput();
        CodedOutputStream unknownFieldsCodedOutput =
                CodedOutputStream.newInstance(
                        unknownFieldsOutput, 1);
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 10: {
                        IrFunctionBase.Builder subBuilder = null;
                        if (((bitField0_ & 0x00000001) == 0x00000001)) {
                            subBuilder = base_.toBuilder();
                        }
                        base_ = input.readMessage(IrFunctionBase.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom(base_);
                            base_ = subBuilder.buildPartial();
                        }
                        bitField0_ |= 0x00000001;
                        break;
                    }
                    case 16: {
                        if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                            overridden_ = new ArrayList<Long>();
                            mutable_bitField0_ |= 0x00000002;
                        }
                        overridden_.add(input.readInt64());
                        break;
                    }
                    case 18: {
                        int length = input.readRawVarint32();
                        int limit = input.pushLimit(length);
                        if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                            overridden_ = new ArrayList<Long>();
                            mutable_bitField0_ |= 0x00000002;
                        }
                        while (input.getBytesUntilLimit() > 0) {
                            overridden_.add(input.readInt64());
                        }
                        input.popLimit(limit);
                        break;
                    }
                }
            }
        } catch (InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (IOException e) {
            throw new InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this);
        } finally {
            if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                overridden_ = Collections.unmodifiableList(overridden_);
            }
            try {
                unknownFieldsCodedOutput.flush();
            } catch (IOException e) {
                // Should not happen
            } finally {
                unknownFields = unknownFieldsOutput.toByteString();
            }
            makeExtensionsImmutable();
        }
    }

    public static IrFunction getDefaultInstance() {
        return defaultInstance;
    }

    public static IrFunction parseFrom(
            ByteString data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrFunction parseFrom(
            ByteString data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrFunction parseFrom(byte[] data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrFunction parseFrom(
            byte[] data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrFunction parseFrom(InputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrFunction parseFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static IrFunction parseDelimitedFrom(InputStream input)
            throws IOException {
        return PARSER.parseDelimitedFrom(input);
    }

    public static IrFunction parseDelimitedFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }

    public static IrFunction parseFrom(
            CodedInputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrFunction parseFrom(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() {
        return Builder.create();
    }

    public static Builder newBuilder(IrFunction prototype) {
        return newBuilder().mergeFrom(prototype);
    }

    @Override
    public IrFunction getDefaultInstanceForType() {
        return defaultInstance;
    }

    @Override
    public Parser<IrFunction> getParserForType() {
        return PARSER;
    }

    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase base = 1;</code>
     */
    @Override
    public boolean hasBase() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
    }

    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase base = 1;</code>
     */
    @Override
    public IrFunctionBase getBase() {
        return base_;
    }

    /**
     * <code>repeated int64 overridden = 2 [packed = true];</code>
     *
     * <pre>
     * TODO: supposed to be deleted
     * </pre>
     */
    @Override
    public List<Long>
    getOverriddenList() {
        return overridden_;
    }

    /**
     * <code>repeated int64 overridden = 2 [packed = true];</code>
     *
     * <pre>
     * TODO: supposed to be deleted
     * </pre>
     */
    @Override
    public int getOverriddenCount() {
        return overridden_.size();
    }

    /**
     * <code>repeated int64 overridden = 2 [packed = true];</code>
     *
     * <pre>
     * TODO: supposed to be deleted
     * </pre>
     */
    @Override
    public long getOverridden(int index) {
        return overridden_.get(index);
    }

    private void initFields() {
        base_ = IrFunctionBase.getDefaultInstance();
        overridden_ = Collections.emptyList();
    }

    @Override
    public boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasBase()) {
            memoizedIsInitialized = 0;
            return false;
        }
        if (!getBase().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
        }
        memoizedIsInitialized = 1;
        return true;
    }

    @Override
    public void writeTo(CodedOutputStream output)
            throws IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            output.writeMessage(1, base_);
        }
        if (getOverriddenList().size() > 0) {
            output.writeRawVarint32(18);
            output.writeRawVarint32(overriddenMemoizedSerializedSize);
        }
        for (int i = 0; i < overridden_.size(); i++) {
            output.writeInt64NoTag(overridden_.get(i));
        }
        output.writeRawBytes(unknownFields);
    }

    @Override
    public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += CodedOutputStream
                    .computeMessageSize(1, base_);
        }
        {
            int dataSize = 0;
            for (int i = 0; i < overridden_.size(); i++) {
                dataSize += CodedOutputStream
                        .computeInt64SizeNoTag(overridden_.get(i));
            }
            size += dataSize;
            if (!getOverriddenList().isEmpty()) {
                size += 1;
                size += CodedOutputStream
                        .computeInt32SizeNoTag(dataSize);
            }
            overriddenMemoizedSerializedSize = dataSize;
        }
        size += unknownFields.size();
        memoizedSerializedSize = size;
        return size;
    }

    @Override
    protected Object writeReplace()
            throws ObjectStreamException {
        return super.writeReplace();
    }

    @Override
    public Builder newBuilderForType() {
        return newBuilder();
    }

    @Override
    public Builder toBuilder() {
        return newBuilder(this);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction}
     */
    public static final class Builder extends
            GeneratedMessageLite.Builder<
                    IrFunction, Builder>
            implements
            // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction)
            IrFunctionOrBuilder {
        private int bitField0_;
        private IrFunctionBase base_ = IrFunctionBase.getDefaultInstance();
        private List<Long> overridden_ = Collections.emptyList();

        // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private static Builder create() {
            return new Builder();
        }

        private void maybeForceBuilderInitialization() {
        }

        @Override
        public Builder clear() {
            super.clear();
            base_ = IrFunctionBase.getDefaultInstance();
            bitField0_ &= ~0x00000001;
            overridden_ = Collections.emptyList();
            bitField0_ &= ~0x00000002;
            return this;
        }

        @Override
        public Builder clone() {
            return create().mergeFrom(buildPartial());
        }

        @Override
        public IrFunction getDefaultInstanceForType() {
            return getDefaultInstance();
        }

        @Override
        public IrFunction build() {
            IrFunction result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        @Override
        public IrFunction buildPartial() {
            IrFunction result = new IrFunction(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                to_bitField0_ |= 0x00000001;
            }
            result.base_ = base_;
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                overridden_ = Collections.unmodifiableList(overridden_);
                bitField0_ &= ~0x00000002;
            }
            result.overridden_ = overridden_;
            result.bitField0_ = to_bitField0_;
            return result;
        }

        @Override
        public Builder mergeFrom(IrFunction other) {
            if (other == getDefaultInstance())
                return this;
            if (other.hasBase()) {
                mergeBase(other.getBase());
            }
            if (!other.overridden_.isEmpty()) {
                if (overridden_.isEmpty()) {
                    overridden_ = other.overridden_;
                    bitField0_ &= ~0x00000002;
                } else {
                    ensureOverriddenIsMutable();
                    overridden_.addAll(other.overridden_);
                }

            }
            setUnknownFields(
                    getUnknownFields().concat(other.unknownFields));
            return this;
        }

        @Override
        public boolean isInitialized() {
            if (!hasBase()) {

                return false;
            }
            if (!getBase().isInitialized()) {

                return false;
            }
            return true;
        }

        @Override
        public Builder mergeFrom(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws IOException {
            IrFunction parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (InvalidProtocolBufferException e) {
                parsedMessage = (IrFunction) e.getUnfinishedMessage();
                throw e;
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase base = 1;</code>
         */
        @Override
        public boolean hasBase() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase base = 1;</code>
         */
        @Override
        public IrFunctionBase getBase() {
            return base_;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase base = 1;</code>
         */
        public Builder setBase(IrFunctionBase value) {
            if (value == null) {
                throw new NullPointerException();
            }
            base_ = value;

            bitField0_ |= 0x00000001;
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase base = 1;</code>
         */
        public Builder setBase(
                IrFunctionBase.Builder builderForValue) {
            base_ = builderForValue.build();

            bitField0_ |= 0x00000001;
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase base = 1;</code>
         */
        public Builder mergeBase(IrFunctionBase value) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                    base_ != IrFunctionBase.getDefaultInstance()) {
                base_ =
                        IrFunctionBase.newBuilder(base_).mergeFrom(value).buildPartial();
            } else {
                base_ = value;
            }

            bitField0_ |= 0x00000001;
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase base = 1;</code>
         */
        public Builder clearBase() {
            base_ = IrFunctionBase.getDefaultInstance();

            bitField0_ &= ~0x00000001;
            return this;
        }

        private void ensureOverriddenIsMutable() {
            if (!((bitField0_ & 0x00000002) == 0x00000002)) {
                overridden_ = new ArrayList<Long>(overridden_);
                bitField0_ |= 0x00000002;
            }
        }

        /**
         * <code>repeated int64 overridden = 2 [packed = true];</code>
         *
         * <pre>
         * TODO: supposed to be deleted
         * </pre>
         */
        @Override
        public List<Long>
        getOverriddenList() {
            return Collections.unmodifiableList(overridden_);
        }

        /**
         * <code>repeated int64 overridden = 2 [packed = true];</code>
         *
         * <pre>
         * TODO: supposed to be deleted
         * </pre>
         */
        @Override
        public int getOverriddenCount() {
            return overridden_.size();
        }

        /**
         * <code>repeated int64 overridden = 2 [packed = true];</code>
         *
         * <pre>
         * TODO: supposed to be deleted
         * </pre>
         */
        @Override
        public long getOverridden(int index) {
            return overridden_.get(index);
        }

        /**
         * <code>repeated int64 overridden = 2 [packed = true];</code>
         *
         * <pre>
         * TODO: supposed to be deleted
         * </pre>
         */
        public Builder setOverridden(
                int index, long value) {
            ensureOverriddenIsMutable();
            overridden_.set(index, value);

            return this;
        }

        /**
         * <code>repeated int64 overridden = 2 [packed = true];</code>
         *
         * <pre>
         * TODO: supposed to be deleted
         * </pre>
         */
        public Builder addOverridden(long value) {
            ensureOverriddenIsMutable();
            overridden_.add(value);

            return this;
        }

        /**
         * <code>repeated int64 overridden = 2 [packed = true];</code>
         *
         * <pre>
         * TODO: supposed to be deleted
         * </pre>
         */
        public Builder addAllOverridden(
                Iterable<? extends Long> values) {
            ensureOverriddenIsMutable();
            addAll(
                    values, overridden_);

            return this;
        }

        /**
         * <code>repeated int64 overridden = 2 [packed = true];</code>
         *
         * <pre>
         * TODO: supposed to be deleted
         * </pre>
         */
        public Builder clearOverridden() {
            overridden_ = Collections.emptyList();
            bitField0_ &= ~0x00000002;

            return this;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrFunction)
}
