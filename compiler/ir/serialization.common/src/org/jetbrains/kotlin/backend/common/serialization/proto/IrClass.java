// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

import org.jetbrains.kotlin.protobuf.AbstractParser;
import org.jetbrains.kotlin.protobuf.ByteString;
import org.jetbrains.kotlin.protobuf.CodedInputStream;
import org.jetbrains.kotlin.protobuf.CodedOutputStream;
import org.jetbrains.kotlin.protobuf.ExtensionRegistryLite;
import org.jetbrains.kotlin.protobuf.GeneratedMessageLite;
import org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException;
import org.jetbrains.kotlin.protobuf.Parser;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrClass}
 */
public final class IrClass extends
        GeneratedMessageLite implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrClass)
        IrClassOrBuilder {
    public static final int BASE_FIELD_NUMBER = 1;
    public static final int NAME_FIELD_NUMBER = 2;
    public static final int THIS_RECEIVER_FIELD_NUMBER = 3;
    public static final int TYPE_PARAMETER_FIELD_NUMBER = 4;
    public static final int DECLARATION_FIELD_NUMBER = 5;
    public static final int SUPER_TYPE_FIELD_NUMBER = 6;
    public static final int INLINE_CLASS_REPRESENTATION_FIELD_NUMBER = 7;
    public static final int MULTI_FIELD_VALUE_CLASS_REPRESENTATION_FIELD_NUMBER = 9;
    public static final int SEALED_SUBCLASS_FIELD_NUMBER = 8;
    private static final IrClass defaultInstance;
    private static final long serialVersionUID = 0L;
    public static Parser<IrClass> PARSER =
            new AbstractParser<IrClass>() {
                @Override
                public IrClass parsePartialFrom(
                        CodedInputStream input,
                        ExtensionRegistryLite extensionRegistry)
                        throws InvalidProtocolBufferException {
                    return new IrClass(input, extensionRegistry);
                }
            };

    static {
        defaultInstance = new IrClass(true);
        defaultInstance.initFields();
    }

    private final ByteString unknownFields;
    private int bitField0_;
    private IrDeclarationBase base_;
    private int name_;
    private IrValueParameter thisReceiver_;
    private List<IrTypeParameter> typeParameter_;
    private List<IrDeclaration> declaration_;
    private List<Integer> superType_;
    private int superTypeMemoizedSerializedSize = -1;
    private IrInlineClassRepresentation inlineClassRepresentation_;
    private IrMultiFieldValueClassRepresentation multiFieldValueClassRepresentation_;
    private List<Long> sealedSubclass_;
    private int sealedSubclassMemoizedSerializedSize = -1;
    private byte memoizedIsInitialized = -1;
    private int memoizedSerializedSize = -1;

    // Use IrClass.newBuilder() to construct.
    private IrClass(GeneratedMessageLite.Builder builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
    }

    private IrClass(boolean noInit) {
        this.unknownFields = ByteString.EMPTY;
    }
    private IrClass(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        ByteString.Output unknownFieldsOutput =
                ByteString.newOutput();
        CodedOutputStream unknownFieldsCodedOutput =
                CodedOutputStream.newInstance(
                        unknownFieldsOutput, 1);
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 10: {
                        IrDeclarationBase.Builder subBuilder = null;
                        if (((bitField0_ & 0x00000001) == 0x00000001)) {
                            subBuilder = base_.toBuilder();
                        }
                        base_ = input.readMessage(IrDeclarationBase.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom(base_);
                            base_ = subBuilder.buildPartial();
                        }
                        bitField0_ |= 0x00000001;
                        break;
                    }
                    case 16: {
                        bitField0_ |= 0x00000002;
                        name_ = input.readInt32();
                        break;
                    }
                    case 26: {
                        IrValueParameter.Builder subBuilder = null;
                        if (((bitField0_ & 0x00000004) == 0x00000004)) {
                            subBuilder = thisReceiver_.toBuilder();
                        }
                        thisReceiver_ = input.readMessage(IrValueParameter.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom(thisReceiver_);
                            thisReceiver_ = subBuilder.buildPartial();
                        }
                        bitField0_ |= 0x00000004;
                        break;
                    }
                    case 34: {
                        if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                            typeParameter_ = new ArrayList<IrTypeParameter>();
                            mutable_bitField0_ |= 0x00000008;
                        }
                        typeParameter_.add(input.readMessage(IrTypeParameter.PARSER, extensionRegistry));
                        break;
                    }
                    case 42: {
                        if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                            declaration_ = new ArrayList<IrDeclaration>();
                            mutable_bitField0_ |= 0x00000010;
                        }
                        declaration_.add(input.readMessage(IrDeclaration.PARSER, extensionRegistry));
                        break;
                    }
                    case 48: {
                        if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                            superType_ = new ArrayList<Integer>();
                            mutable_bitField0_ |= 0x00000020;
                        }
                        superType_.add(input.readInt32());
                        break;
                    }
                    case 50: {
                        int length = input.readRawVarint32();
                        int limit = input.pushLimit(length);
                        if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                            superType_ = new ArrayList<Integer>();
                            mutable_bitField0_ |= 0x00000020;
                        }
                        while (input.getBytesUntilLimit() > 0) {
                            superType_.add(input.readInt32());
                        }
                        input.popLimit(limit);
                        break;
                    }
                    case 58: {
                        IrInlineClassRepresentation.Builder subBuilder = null;
                        if (((bitField0_ & 0x00000008) == 0x00000008)) {
                            subBuilder = inlineClassRepresentation_.toBuilder();
                        }
                        inlineClassRepresentation_ = input.readMessage(IrInlineClassRepresentation.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom(inlineClassRepresentation_);
                            inlineClassRepresentation_ = subBuilder.buildPartial();
                        }
                        bitField0_ |= 0x00000008;
                        break;
                    }
                    case 64: {
                        if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                            sealedSubclass_ = new ArrayList<Long>();
                            mutable_bitField0_ |= 0x00000100;
                        }
                        sealedSubclass_.add(input.readInt64());
                        break;
                    }
                    case 66: {
                        int length = input.readRawVarint32();
                        int limit = input.pushLimit(length);
                        if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                            sealedSubclass_ = new ArrayList<Long>();
                            mutable_bitField0_ |= 0x00000100;
                        }
                        while (input.getBytesUntilLimit() > 0) {
                            sealedSubclass_.add(input.readInt64());
                        }
                        input.popLimit(limit);
                        break;
                    }
                    case 74: {
                        IrMultiFieldValueClassRepresentation.Builder subBuilder = null;
                        if (((bitField0_ & 0x00000010) == 0x00000010)) {
                            subBuilder = multiFieldValueClassRepresentation_.toBuilder();
                        }
                        multiFieldValueClassRepresentation_ = input.readMessage(IrMultiFieldValueClassRepresentation.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom(multiFieldValueClassRepresentation_);
                            multiFieldValueClassRepresentation_ = subBuilder.buildPartial();
                        }
                        bitField0_ |= 0x00000010;
                        break;
                    }
                }
            }
        } catch (InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (IOException e) {
            throw new InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this);
        } finally {
            if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                typeParameter_ = Collections.unmodifiableList(typeParameter_);
            }
            if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                declaration_ = Collections.unmodifiableList(declaration_);
            }
            if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                superType_ = Collections.unmodifiableList(superType_);
            }
            if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                sealedSubclass_ = Collections.unmodifiableList(sealedSubclass_);
            }
            try {
                unknownFieldsCodedOutput.flush();
            } catch (IOException e) {
                // Should not happen
            } finally {
                unknownFields = unknownFieldsOutput.toByteString();
            }
            makeExtensionsImmutable();
        }
    }

    public static IrClass getDefaultInstance() {
        return defaultInstance;
    }

    public static IrClass parseFrom(
            ByteString data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrClass parseFrom(
            ByteString data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrClass parseFrom(byte[] data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrClass parseFrom(
            byte[] data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrClass parseFrom(InputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrClass parseFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static IrClass parseDelimitedFrom(InputStream input)
            throws IOException {
        return PARSER.parseDelimitedFrom(input);
    }

    public static IrClass parseDelimitedFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }

    public static IrClass parseFrom(
            CodedInputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrClass parseFrom(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() {
        return Builder.create();
    }

    public static Builder newBuilder(IrClass prototype) {
        return newBuilder().mergeFrom(prototype);
    }

    @Override
    public IrClass getDefaultInstanceForType() {
        return defaultInstance;
    }

    @Override
    public Parser<IrClass> getParserForType() {
        return PARSER;
    }

    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
     */
    @Override
    public boolean hasBase() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
    }

    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
     */
    @Override
    public IrDeclarationBase getBase() {
        return base_;
    }

    /**
     * <code>required int32 name = 2;</code>
     */
    @Override
    public boolean hasName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
    }

    /**
     * <code>required int32 name = 2;</code>
     */
    @Override
    public int getName() {
        return name_;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter this_receiver = 3;</code>
     */
    @Override
    public boolean hasThisReceiver() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter this_receiver = 3;</code>
     */
    @Override
    public IrValueParameter getThisReceiver() {
        return thisReceiver_;
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 4;</code>
     */
    @Override
    public List<IrTypeParameter> getTypeParameterList() {
        return typeParameter_;
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 4;</code>
     */
    public List<? extends IrTypeParameterOrBuilder>
    getTypeParameterOrBuilderList() {
        return typeParameter_;
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 4;</code>
     */
    @Override
    public int getTypeParameterCount() {
        return typeParameter_.size();
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 4;</code>
     */
    @Override
    public IrTypeParameter getTypeParameter(int index) {
        return typeParameter_.get(index);
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 4;</code>
     */
    public IrTypeParameterOrBuilder getTypeParameterOrBuilder(
            int index) {
        return typeParameter_.get(index);
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 5;</code>
     */
    @Override
    public List<IrDeclaration> getDeclarationList() {
        return declaration_;
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 5;</code>
     */
    public List<? extends IrDeclarationOrBuilder>
    getDeclarationOrBuilderList() {
        return declaration_;
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 5;</code>
     */
    @Override
    public int getDeclarationCount() {
        return declaration_.size();
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 5;</code>
     */
    @Override
    public IrDeclaration getDeclaration(int index) {
        return declaration_.get(index);
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 5;</code>
     */
    public IrDeclarationOrBuilder getDeclarationOrBuilder(
            int index) {
        return declaration_.get(index);
    }

    /**
     * <code>repeated int32 super_type = 6 [packed = true];</code>
     */
    @Override
    public List<Integer>
    getSuperTypeList() {
        return superType_;
    }

    /**
     * <code>repeated int32 super_type = 6 [packed = true];</code>
     */
    @Override
    public int getSuperTypeCount() {
        return superType_.size();
    }

    /**
     * <code>repeated int32 super_type = 6 [packed = true];</code>
     */
    @Override
    public int getSuperType(int index) {
        return superType_.get(index);
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrInlineClassRepresentation inline_class_representation = 7;</code>
     */
    @Override
    public boolean hasInlineClassRepresentation() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrInlineClassRepresentation inline_class_representation = 7;</code>
     */
    @Override
    public IrInlineClassRepresentation getInlineClassRepresentation() {
        return inlineClassRepresentation_;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation multi_field_value_class_representation = 9;</code>
     */
    @Override
    public boolean hasMultiFieldValueClassRepresentation() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation multi_field_value_class_representation = 9;</code>
     */
    @Override
    public IrMultiFieldValueClassRepresentation getMultiFieldValueClassRepresentation() {
        return multiFieldValueClassRepresentation_;
    }

    /**
     * <code>repeated int64 sealed_subclass = 8 [packed = true];</code>
     */
    @Override
    public List<Long>
    getSealedSubclassList() {
        return sealedSubclass_;
    }

    /**
     * <code>repeated int64 sealed_subclass = 8 [packed = true];</code>
     */
    @Override
    public int getSealedSubclassCount() {
        return sealedSubclass_.size();
    }

    /**
     * <code>repeated int64 sealed_subclass = 8 [packed = true];</code>
     */
    @Override
    public long getSealedSubclass(int index) {
        return sealedSubclass_.get(index);
    }

    private void initFields() {
        base_ = IrDeclarationBase.getDefaultInstance();
        name_ = 0;
        thisReceiver_ = IrValueParameter.getDefaultInstance();
        typeParameter_ = Collections.emptyList();
        declaration_ = Collections.emptyList();
        superType_ = Collections.emptyList();
        inlineClassRepresentation_ = IrInlineClassRepresentation.getDefaultInstance();
        multiFieldValueClassRepresentation_ = IrMultiFieldValueClassRepresentation.getDefaultInstance();
        sealedSubclass_ = Collections.emptyList();
    }

    @Override
    public boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasBase()) {
            memoizedIsInitialized = 0;
            return false;
        }
        if (!hasName()) {
            memoizedIsInitialized = 0;
            return false;
        }
        if (!getBase().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
        }
        if (hasThisReceiver()) {
            if (!getThisReceiver().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        for (int i = 0; i < getTypeParameterCount(); i++) {
            if (!getTypeParameter(i).isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        for (int i = 0; i < getDeclarationCount(); i++) {
            if (!getDeclaration(i).isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        if (hasInlineClassRepresentation()) {
            if (!getInlineClassRepresentation().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        memoizedIsInitialized = 1;
        return true;
    }

    @Override
    public void writeTo(CodedOutputStream output)
            throws IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            output.writeMessage(1, base_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            output.writeInt32(2, name_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            output.writeMessage(3, thisReceiver_);
        }
        for (int i = 0; i < typeParameter_.size(); i++) {
            output.writeMessage(4, typeParameter_.get(i));
        }
        for (int i = 0; i < declaration_.size(); i++) {
            output.writeMessage(5, declaration_.get(i));
        }
        if (getSuperTypeList().size() > 0) {
            output.writeRawVarint32(50);
            output.writeRawVarint32(superTypeMemoizedSerializedSize);
        }
        for (int i = 0; i < superType_.size(); i++) {
            output.writeInt32NoTag(superType_.get(i));
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
            output.writeMessage(7, inlineClassRepresentation_);
        }
        if (getSealedSubclassList().size() > 0) {
            output.writeRawVarint32(66);
            output.writeRawVarint32(sealedSubclassMemoizedSerializedSize);
        }
        for (int i = 0; i < sealedSubclass_.size(); i++) {
            output.writeInt64NoTag(sealedSubclass_.get(i));
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
            output.writeMessage(9, multiFieldValueClassRepresentation_);
        }
        output.writeRawBytes(unknownFields);
    }

    @Override
    public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += CodedOutputStream
                    .computeMessageSize(1, base_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += CodedOutputStream
                    .computeInt32Size(2, name_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            size += CodedOutputStream
                    .computeMessageSize(3, thisReceiver_);
        }
        for (int i = 0; i < typeParameter_.size(); i++) {
            size += CodedOutputStream
                    .computeMessageSize(4, typeParameter_.get(i));
        }
        for (int i = 0; i < declaration_.size(); i++) {
            size += CodedOutputStream
                    .computeMessageSize(5, declaration_.get(i));
        }
        {
            int dataSize = 0;
            for (int i = 0; i < superType_.size(); i++) {
                dataSize += CodedOutputStream
                        .computeInt32SizeNoTag(superType_.get(i));
            }
            size += dataSize;
            if (!getSuperTypeList().isEmpty()) {
                size += 1;
                size += CodedOutputStream
                        .computeInt32SizeNoTag(dataSize);
            }
            superTypeMemoizedSerializedSize = dataSize;
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
            size += CodedOutputStream
                    .computeMessageSize(7, inlineClassRepresentation_);
        }
        {
            int dataSize = 0;
            for (int i = 0; i < sealedSubclass_.size(); i++) {
                dataSize += CodedOutputStream
                        .computeInt64SizeNoTag(sealedSubclass_.get(i));
            }
            size += dataSize;
            if (!getSealedSubclassList().isEmpty()) {
                size += 1;
                size += CodedOutputStream
                        .computeInt32SizeNoTag(dataSize);
            }
            sealedSubclassMemoizedSerializedSize = dataSize;
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
            size += CodedOutputStream
                    .computeMessageSize(9, multiFieldValueClassRepresentation_);
        }
        size += unknownFields.size();
        memoizedSerializedSize = size;
        return size;
    }

    @Override
    protected Object writeReplace()
            throws ObjectStreamException {
        return super.writeReplace();
    }

    @Override
    public Builder newBuilderForType() {
        return newBuilder();
    }

    @Override
    public Builder toBuilder() {
        return newBuilder(this);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrClass}
     */
    public static final class Builder extends
            GeneratedMessageLite.Builder<
                    IrClass, Builder>
            implements
            // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrClass)
            IrClassOrBuilder {
        private int bitField0_;
        private IrDeclarationBase base_ = IrDeclarationBase.getDefaultInstance();
        private int name_;
        private IrValueParameter thisReceiver_ = IrValueParameter.getDefaultInstance();
        private List<IrTypeParameter> typeParameter_ =
                Collections.emptyList();
        private List<IrDeclaration> declaration_ =
                Collections.emptyList();
        private List<Integer> superType_ = Collections.emptyList();
        private IrInlineClassRepresentation inlineClassRepresentation_ = IrInlineClassRepresentation.getDefaultInstance();
        private IrMultiFieldValueClassRepresentation multiFieldValueClassRepresentation_ = IrMultiFieldValueClassRepresentation.getDefaultInstance();
        private List<Long> sealedSubclass_ = Collections.emptyList();

        // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrClass.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private static Builder create() {
            return new Builder();
        }

        private void maybeForceBuilderInitialization() {
        }

        @Override
        public Builder clear() {
            super.clear();
            base_ = IrDeclarationBase.getDefaultInstance();
            bitField0_ &= ~0x00000001;
            name_ = 0;
            bitField0_ &= ~0x00000002;
            thisReceiver_ = IrValueParameter.getDefaultInstance();
            bitField0_ &= ~0x00000004;
            typeParameter_ = Collections.emptyList();
            bitField0_ &= ~0x00000008;
            declaration_ = Collections.emptyList();
            bitField0_ &= ~0x00000010;
            superType_ = Collections.emptyList();
            bitField0_ &= ~0x00000020;
            inlineClassRepresentation_ = IrInlineClassRepresentation.getDefaultInstance();
            bitField0_ &= ~0x00000040;
            multiFieldValueClassRepresentation_ = IrMultiFieldValueClassRepresentation.getDefaultInstance();
            bitField0_ &= ~0x00000080;
            sealedSubclass_ = Collections.emptyList();
            bitField0_ &= ~0x00000100;
            return this;
        }

        @Override
        public Builder clone() {
            return create().mergeFrom(buildPartial());
        }

        @Override
        public IrClass getDefaultInstanceForType() {
            return getDefaultInstance();
        }

        @Override
        public IrClass build() {
            IrClass result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        @Override
        public IrClass buildPartial() {
            IrClass result = new IrClass(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                to_bitField0_ |= 0x00000001;
            }
            result.base_ = base_;
            if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                to_bitField0_ |= 0x00000002;
            }
            result.name_ = name_;
            if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                to_bitField0_ |= 0x00000004;
            }
            result.thisReceiver_ = thisReceiver_;
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                typeParameter_ = Collections.unmodifiableList(typeParameter_);
                bitField0_ &= ~0x00000008;
            }
            result.typeParameter_ = typeParameter_;
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
                declaration_ = Collections.unmodifiableList(declaration_);
                bitField0_ &= ~0x00000010;
            }
            result.declaration_ = declaration_;
            if (((bitField0_ & 0x00000020) == 0x00000020)) {
                superType_ = Collections.unmodifiableList(superType_);
                bitField0_ &= ~0x00000020;
            }
            result.superType_ = superType_;
            if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
                to_bitField0_ |= 0x00000008;
            }
            result.inlineClassRepresentation_ = inlineClassRepresentation_;
            if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
                to_bitField0_ |= 0x00000010;
            }
            result.multiFieldValueClassRepresentation_ = multiFieldValueClassRepresentation_;
            if (((bitField0_ & 0x00000100) == 0x00000100)) {
                sealedSubclass_ = Collections.unmodifiableList(sealedSubclass_);
                bitField0_ &= ~0x00000100;
            }
            result.sealedSubclass_ = sealedSubclass_;
            result.bitField0_ = to_bitField0_;
            return result;
        }

        @Override
        public Builder mergeFrom(IrClass other) {
            if (other == getDefaultInstance())
                return this;
            if (other.hasBase()) {
                mergeBase(other.getBase());
            }
            if (other.hasName()) {
                setName(other.getName());
            }
            if (other.hasThisReceiver()) {
                mergeThisReceiver(other.getThisReceiver());
            }
            if (!other.typeParameter_.isEmpty()) {
                if (typeParameter_.isEmpty()) {
                    typeParameter_ = other.typeParameter_;
                    bitField0_ &= ~0x00000008;
                } else {
                    ensureTypeParameterIsMutable();
                    typeParameter_.addAll(other.typeParameter_);
                }

            }
            if (!other.declaration_.isEmpty()) {
                if (declaration_.isEmpty()) {
                    declaration_ = other.declaration_;
                    bitField0_ &= ~0x00000010;
                } else {
                    ensureDeclarationIsMutable();
                    declaration_.addAll(other.declaration_);
                }

            }
            if (!other.superType_.isEmpty()) {
                if (superType_.isEmpty()) {
                    superType_ = other.superType_;
                    bitField0_ &= ~0x00000020;
                } else {
                    ensureSuperTypeIsMutable();
                    superType_.addAll(other.superType_);
                }

            }
            if (other.hasInlineClassRepresentation()) {
                mergeInlineClassRepresentation(other.getInlineClassRepresentation());
            }
            if (other.hasMultiFieldValueClassRepresentation()) {
                mergeMultiFieldValueClassRepresentation(other.getMultiFieldValueClassRepresentation());
            }
            if (!other.sealedSubclass_.isEmpty()) {
                if (sealedSubclass_.isEmpty()) {
                    sealedSubclass_ = other.sealedSubclass_;
                    bitField0_ &= ~0x00000100;
                } else {
                    ensureSealedSubclassIsMutable();
                    sealedSubclass_.addAll(other.sealedSubclass_);
                }

            }
            setUnknownFields(
                    getUnknownFields().concat(other.unknownFields));
            return this;
        }

        @Override
        public boolean isInitialized() {
            if (!hasBase()) {

                return false;
            }
            if (!hasName()) {

                return false;
            }
            if (!getBase().isInitialized()) {

                return false;
            }
            if (hasThisReceiver()) {
                if (!getThisReceiver().isInitialized()) {

                    return false;
                }
            }
            for (int i = 0; i < getTypeParameterCount(); i++) {
                if (!getTypeParameter(i).isInitialized()) {

                    return false;
                }
            }
            for (int i = 0; i < getDeclarationCount(); i++) {
                if (!getDeclaration(i).isInitialized()) {

                    return false;
                }
            }
            if (hasInlineClassRepresentation()) {
                if (!getInlineClassRepresentation().isInitialized()) {

                    return false;
                }
            }
            return true;
        }

        @Override
        public Builder mergeFrom(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws IOException {
            IrClass parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (InvalidProtocolBufferException e) {
                parsedMessage = (IrClass) e.getUnfinishedMessage();
                throw e;
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
         */
        @Override
        public boolean hasBase() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
         */
        @Override
        public IrDeclarationBase getBase() {
            return base_;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
         */
        public Builder setBase(IrDeclarationBase value) {
            if (value == null) {
                throw new NullPointerException();
            }
            base_ = value;

            bitField0_ |= 0x00000001;
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
         */
        public Builder setBase(
                IrDeclarationBase.Builder builderForValue) {
            base_ = builderForValue.build();

            bitField0_ |= 0x00000001;
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
         */
        public Builder mergeBase(IrDeclarationBase value) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                    base_ != IrDeclarationBase.getDefaultInstance()) {
                base_ =
                        IrDeclarationBase.newBuilder(base_).mergeFrom(value).buildPartial();
            } else {
                base_ = value;
            }

            bitField0_ |= 0x00000001;
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
         */
        public Builder clearBase() {
            base_ = IrDeclarationBase.getDefaultInstance();

            bitField0_ &= ~0x00000001;
            return this;
        }

        /**
         * <code>required int32 name = 2;</code>
         */
        @Override
        public boolean hasName() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>required int32 name = 2;</code>
         */
        @Override
        public int getName() {
            return name_;
        }

        /**
         * <code>required int32 name = 2;</code>
         */
        public Builder setName(int value) {
            bitField0_ |= 0x00000002;
            name_ = value;

            return this;
        }

        /**
         * <code>required int32 name = 2;</code>
         */
        public Builder clearName() {
            bitField0_ &= ~0x00000002;
            name_ = 0;

            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter this_receiver = 3;</code>
         */
        @Override
        public boolean hasThisReceiver() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter this_receiver = 3;</code>
         */
        @Override
        public IrValueParameter getThisReceiver() {
            return thisReceiver_;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter this_receiver = 3;</code>
         */
        public Builder setThisReceiver(IrValueParameter value) {
            if (value == null) {
                throw new NullPointerException();
            }
            thisReceiver_ = value;

            bitField0_ |= 0x00000004;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter this_receiver = 3;</code>
         */
        public Builder setThisReceiver(
                IrValueParameter.Builder builderForValue) {
            thisReceiver_ = builderForValue.build();

            bitField0_ |= 0x00000004;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter this_receiver = 3;</code>
         */
        public Builder mergeThisReceiver(IrValueParameter value) {
            if (((bitField0_ & 0x00000004) == 0x00000004) &&
                    thisReceiver_ != IrValueParameter.getDefaultInstance()) {
                thisReceiver_ =
                        IrValueParameter.newBuilder(thisReceiver_).mergeFrom(value).buildPartial();
            } else {
                thisReceiver_ = value;
            }

            bitField0_ |= 0x00000004;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter this_receiver = 3;</code>
         */
        public Builder clearThisReceiver() {
            thisReceiver_ = IrValueParameter.getDefaultInstance();

            bitField0_ &= ~0x00000004;
            return this;
        }

        private void ensureTypeParameterIsMutable() {
            if (!((bitField0_ & 0x00000008) == 0x00000008)) {
                typeParameter_ = new ArrayList<IrTypeParameter>(typeParameter_);
                bitField0_ |= 0x00000008;
            }
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 4;</code>
         */
        @Override
        public List<IrTypeParameter> getTypeParameterList() {
            return Collections.unmodifiableList(typeParameter_);
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 4;</code>
         */
        @Override
        public int getTypeParameterCount() {
            return typeParameter_.size();
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 4;</code>
         */
        @Override
        public IrTypeParameter getTypeParameter(int index) {
            return typeParameter_.get(index);
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 4;</code>
         */
        public Builder setTypeParameter(
                int index, IrTypeParameter value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureTypeParameterIsMutable();
            typeParameter_.set(index, value);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 4;</code>
         */
        public Builder setTypeParameter(
                int index, IrTypeParameter.Builder builderForValue) {
            ensureTypeParameterIsMutable();
            typeParameter_.set(index, builderForValue.build());

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 4;</code>
         */
        public Builder addTypeParameter(IrTypeParameter value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureTypeParameterIsMutable();
            typeParameter_.add(value);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 4;</code>
         */
        public Builder addTypeParameter(
                int index, IrTypeParameter value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureTypeParameterIsMutable();
            typeParameter_.add(index, value);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 4;</code>
         */
        public Builder addTypeParameter(
                IrTypeParameter.Builder builderForValue) {
            ensureTypeParameterIsMutable();
            typeParameter_.add(builderForValue.build());

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 4;</code>
         */
        public Builder addTypeParameter(
                int index, IrTypeParameter.Builder builderForValue) {
            ensureTypeParameterIsMutable();
            typeParameter_.add(index, builderForValue.build());

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 4;</code>
         */
        public Builder addAllTypeParameter(
                Iterable<? extends IrTypeParameter> values) {
            ensureTypeParameterIsMutable();
            addAll(
                    values, typeParameter_);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 4;</code>
         */
        public Builder clearTypeParameter() {
            typeParameter_ = Collections.emptyList();
            bitField0_ &= ~0x00000008;

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 4;</code>
         */
        public Builder removeTypeParameter(int index) {
            ensureTypeParameterIsMutable();
            typeParameter_.remove(index);

            return this;
        }

        private void ensureDeclarationIsMutable() {
            if (!((bitField0_ & 0x00000010) == 0x00000010)) {
                declaration_ = new ArrayList<IrDeclaration>(declaration_);
                bitField0_ |= 0x00000010;
            }
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 5;</code>
         */
        @Override
        public List<IrDeclaration> getDeclarationList() {
            return Collections.unmodifiableList(declaration_);
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 5;</code>
         */
        @Override
        public int getDeclarationCount() {
            return declaration_.size();
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 5;</code>
         */
        @Override
        public IrDeclaration getDeclaration(int index) {
            return declaration_.get(index);
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 5;</code>
         */
        public Builder setDeclaration(
                int index, IrDeclaration value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureDeclarationIsMutable();
            declaration_.set(index, value);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 5;</code>
         */
        public Builder setDeclaration(
                int index, IrDeclaration.Builder builderForValue) {
            ensureDeclarationIsMutable();
            declaration_.set(index, builderForValue.build());

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 5;</code>
         */
        public Builder addDeclaration(IrDeclaration value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureDeclarationIsMutable();
            declaration_.add(value);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 5;</code>
         */
        public Builder addDeclaration(
                int index, IrDeclaration value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureDeclarationIsMutable();
            declaration_.add(index, value);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 5;</code>
         */
        public Builder addDeclaration(
                IrDeclaration.Builder builderForValue) {
            ensureDeclarationIsMutable();
            declaration_.add(builderForValue.build());

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 5;</code>
         */
        public Builder addDeclaration(
                int index, IrDeclaration.Builder builderForValue) {
            ensureDeclarationIsMutable();
            declaration_.add(index, builderForValue.build());

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 5;</code>
         */
        public Builder addAllDeclaration(
                Iterable<? extends IrDeclaration> values) {
            ensureDeclarationIsMutable();
            addAll(
                    values, declaration_);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 5;</code>
         */
        public Builder clearDeclaration() {
            declaration_ = Collections.emptyList();
            bitField0_ &= ~0x00000010;

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 5;</code>
         */
        public Builder removeDeclaration(int index) {
            ensureDeclarationIsMutable();
            declaration_.remove(index);

            return this;
        }

        private void ensureSuperTypeIsMutable() {
            if (!((bitField0_ & 0x00000020) == 0x00000020)) {
                superType_ = new ArrayList<Integer>(superType_);
                bitField0_ |= 0x00000020;
            }
        }

        /**
         * <code>repeated int32 super_type = 6 [packed = true];</code>
         */
        @Override
        public List<Integer>
        getSuperTypeList() {
            return Collections.unmodifiableList(superType_);
        }

        /**
         * <code>repeated int32 super_type = 6 [packed = true];</code>
         */
        @Override
        public int getSuperTypeCount() {
            return superType_.size();
        }

        /**
         * <code>repeated int32 super_type = 6 [packed = true];</code>
         */
        @Override
        public int getSuperType(int index) {
            return superType_.get(index);
        }

        /**
         * <code>repeated int32 super_type = 6 [packed = true];</code>
         */
        public Builder setSuperType(
                int index, int value) {
            ensureSuperTypeIsMutable();
            superType_.set(index, value);

            return this;
        }

        /**
         * <code>repeated int32 super_type = 6 [packed = true];</code>
         */
        public Builder addSuperType(int value) {
            ensureSuperTypeIsMutable();
            superType_.add(value);

            return this;
        }

        /**
         * <code>repeated int32 super_type = 6 [packed = true];</code>
         */
        public Builder addAllSuperType(
                Iterable<? extends Integer> values) {
            ensureSuperTypeIsMutable();
            addAll(
                    values, superType_);

            return this;
        }

        /**
         * <code>repeated int32 super_type = 6 [packed = true];</code>
         */
        public Builder clearSuperType() {
            superType_ = Collections.emptyList();
            bitField0_ &= ~0x00000020;

            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrInlineClassRepresentation inline_class_representation = 7;</code>
         */
        @Override
        public boolean hasInlineClassRepresentation() {
            return ((bitField0_ & 0x00000040) == 0x00000040);
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrInlineClassRepresentation inline_class_representation = 7;</code>
         */
        @Override
        public IrInlineClassRepresentation getInlineClassRepresentation() {
            return inlineClassRepresentation_;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrInlineClassRepresentation inline_class_representation = 7;</code>
         */
        public Builder setInlineClassRepresentation(IrInlineClassRepresentation value) {
            if (value == null) {
                throw new NullPointerException();
            }
            inlineClassRepresentation_ = value;

            bitField0_ |= 0x00000040;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrInlineClassRepresentation inline_class_representation = 7;</code>
         */
        public Builder setInlineClassRepresentation(
                IrInlineClassRepresentation.Builder builderForValue) {
            inlineClassRepresentation_ = builderForValue.build();

            bitField0_ |= 0x00000040;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrInlineClassRepresentation inline_class_representation = 7;</code>
         */
        public Builder mergeInlineClassRepresentation(IrInlineClassRepresentation value) {
            if (((bitField0_ & 0x00000040) == 0x00000040) &&
                    inlineClassRepresentation_ != IrInlineClassRepresentation.getDefaultInstance()) {
                inlineClassRepresentation_ =
                        IrInlineClassRepresentation.newBuilder(inlineClassRepresentation_).mergeFrom(value).buildPartial();
            } else {
                inlineClassRepresentation_ = value;
            }

            bitField0_ |= 0x00000040;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrInlineClassRepresentation inline_class_representation = 7;</code>
         */
        public Builder clearInlineClassRepresentation() {
            inlineClassRepresentation_ = IrInlineClassRepresentation.getDefaultInstance();

            bitField0_ &= ~0x00000040;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation multi_field_value_class_representation = 9;</code>
         */
        @Override
        public boolean hasMultiFieldValueClassRepresentation() {
            return ((bitField0_ & 0x00000080) == 0x00000080);
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation multi_field_value_class_representation = 9;</code>
         */
        @Override
        public IrMultiFieldValueClassRepresentation getMultiFieldValueClassRepresentation() {
            return multiFieldValueClassRepresentation_;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation multi_field_value_class_representation = 9;</code>
         */
        public Builder setMultiFieldValueClassRepresentation(IrMultiFieldValueClassRepresentation value) {
            if (value == null) {
                throw new NullPointerException();
            }
            multiFieldValueClassRepresentation_ = value;

            bitField0_ |= 0x00000080;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation multi_field_value_class_representation = 9;</code>
         */
        public Builder setMultiFieldValueClassRepresentation(
                IrMultiFieldValueClassRepresentation.Builder builderForValue) {
            multiFieldValueClassRepresentation_ = builderForValue.build();

            bitField0_ |= 0x00000080;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation multi_field_value_class_representation = 9;</code>
         */
        public Builder mergeMultiFieldValueClassRepresentation(IrMultiFieldValueClassRepresentation value) {
            if (((bitField0_ & 0x00000080) == 0x00000080) &&
                    multiFieldValueClassRepresentation_ != IrMultiFieldValueClassRepresentation.getDefaultInstance()) {
                multiFieldValueClassRepresentation_ =
                        IrMultiFieldValueClassRepresentation.newBuilder(multiFieldValueClassRepresentation_).mergeFrom(value).buildPartial();
            } else {
                multiFieldValueClassRepresentation_ = value;
            }

            bitField0_ |= 0x00000080;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrMultiFieldValueClassRepresentation multi_field_value_class_representation = 9;</code>
         */
        public Builder clearMultiFieldValueClassRepresentation() {
            multiFieldValueClassRepresentation_ = IrMultiFieldValueClassRepresentation.getDefaultInstance();

            bitField0_ &= ~0x00000080;
            return this;
        }

        private void ensureSealedSubclassIsMutable() {
            if (!((bitField0_ & 0x00000100) == 0x00000100)) {
                sealedSubclass_ = new ArrayList<Long>(sealedSubclass_);
                bitField0_ |= 0x00000100;
            }
        }

        /**
         * <code>repeated int64 sealed_subclass = 8 [packed = true];</code>
         */
        @Override
        public List<Long>
        getSealedSubclassList() {
            return Collections.unmodifiableList(sealedSubclass_);
        }

        /**
         * <code>repeated int64 sealed_subclass = 8 [packed = true];</code>
         */
        @Override
        public int getSealedSubclassCount() {
            return sealedSubclass_.size();
        }

        /**
         * <code>repeated int64 sealed_subclass = 8 [packed = true];</code>
         */
        @Override
        public long getSealedSubclass(int index) {
            return sealedSubclass_.get(index);
        }

        /**
         * <code>repeated int64 sealed_subclass = 8 [packed = true];</code>
         */
        public Builder setSealedSubclass(
                int index, long value) {
            ensureSealedSubclassIsMutable();
            sealedSubclass_.set(index, value);

            return this;
        }

        /**
         * <code>repeated int64 sealed_subclass = 8 [packed = true];</code>
         */
        public Builder addSealedSubclass(long value) {
            ensureSealedSubclassIsMutable();
            sealedSubclass_.add(value);

            return this;
        }

        /**
         * <code>repeated int64 sealed_subclass = 8 [packed = true];</code>
         */
        public Builder addAllSealedSubclass(
                Iterable<? extends Long> values) {
            ensureSealedSubclassIsMutable();
            addAll(
                    values, sealedSubclass_);

            return this;
        }

        /**
         * <code>repeated int64 sealed_subclass = 8 [packed = true];</code>
         */
        public Builder clearSealedSubclass() {
            sealedSubclass_ = Collections.emptyList();
            bitField0_ &= ~0x00000100;

            return this;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrClass)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrClass)
}
