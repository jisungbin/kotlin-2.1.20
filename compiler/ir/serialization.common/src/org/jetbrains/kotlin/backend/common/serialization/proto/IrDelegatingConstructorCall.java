// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

import org.jetbrains.kotlin.protobuf.AbstractParser;
import org.jetbrains.kotlin.protobuf.ByteString;
import org.jetbrains.kotlin.protobuf.CodedInputStream;
import org.jetbrains.kotlin.protobuf.CodedOutputStream;
import org.jetbrains.kotlin.protobuf.ExtensionRegistryLite;
import org.jetbrains.kotlin.protobuf.GeneratedMessageLite;
import org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException;
import org.jetbrains.kotlin.protobuf.Parser;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamException;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrDelegatingConstructorCall}
 */
public final class IrDelegatingConstructorCall extends
        GeneratedMessageLite implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrDelegatingConstructorCall)
        IrDelegatingConstructorCallOrBuilder {
    public static final int SYMBOL_FIELD_NUMBER = 1;
    public static final int MEMBER_ACCESS_FIELD_NUMBER = 2;
    private static final IrDelegatingConstructorCall defaultInstance;
    private static final long serialVersionUID = 0L;
    public static Parser<IrDelegatingConstructorCall> PARSER =
            new AbstractParser<IrDelegatingConstructorCall>() {
                @Override
                public IrDelegatingConstructorCall parsePartialFrom(
                        CodedInputStream input,
                        ExtensionRegistryLite extensionRegistry)
                        throws InvalidProtocolBufferException {
                    return new IrDelegatingConstructorCall(input, extensionRegistry);
                }
            };

    static {
        defaultInstance = new IrDelegatingConstructorCall(true);
        defaultInstance.initFields();
    }

    private final ByteString unknownFields;
    private int bitField0_;
    private long symbol_;
    private MemberAccessCommon memberAccess_;
    private byte memoizedIsInitialized = -1;
    private int memoizedSerializedSize = -1;

    // Use IrDelegatingConstructorCall.newBuilder() to construct.
    private IrDelegatingConstructorCall(GeneratedMessageLite.Builder builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
    }

    private IrDelegatingConstructorCall(boolean noInit) {
        this.unknownFields = ByteString.EMPTY;
    }

    private IrDelegatingConstructorCall(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        ByteString.Output unknownFieldsOutput =
                ByteString.newOutput();
        CodedOutputStream unknownFieldsCodedOutput =
                CodedOutputStream.newInstance(
                        unknownFieldsOutput, 1);
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 8: {
                        bitField0_ |= 0x00000001;
                        symbol_ = input.readInt64();
                        break;
                    }
                    case 18: {
                        MemberAccessCommon.Builder subBuilder = null;
                        if (((bitField0_ & 0x00000002) == 0x00000002)) {
                            subBuilder = memberAccess_.toBuilder();
                        }
                        memberAccess_ = input.readMessage(MemberAccessCommon.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom(memberAccess_);
                            memberAccess_ = subBuilder.buildPartial();
                        }
                        bitField0_ |= 0x00000002;
                        break;
                    }
                }
            }
        } catch (InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (IOException e) {
            throw new InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this);
        } finally {
            try {
                unknownFieldsCodedOutput.flush();
            } catch (IOException e) {
                // Should not happen
            } finally {
                unknownFields = unknownFieldsOutput.toByteString();
            }
            makeExtensionsImmutable();
        }
    }

    public static IrDelegatingConstructorCall getDefaultInstance() {
        return defaultInstance;
    }

    public static IrDelegatingConstructorCall parseFrom(
            ByteString data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrDelegatingConstructorCall parseFrom(
            ByteString data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrDelegatingConstructorCall parseFrom(byte[] data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrDelegatingConstructorCall parseFrom(
            byte[] data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrDelegatingConstructorCall parseFrom(InputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrDelegatingConstructorCall parseFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static IrDelegatingConstructorCall parseDelimitedFrom(InputStream input)
            throws IOException {
        return PARSER.parseDelimitedFrom(input);
    }

    public static IrDelegatingConstructorCall parseDelimitedFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }

    public static IrDelegatingConstructorCall parseFrom(
            CodedInputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrDelegatingConstructorCall parseFrom(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() {
        return Builder.create();
    }

    public static Builder newBuilder(IrDelegatingConstructorCall prototype) {
        return newBuilder().mergeFrom(prototype);
    }

    @Override
    public IrDelegatingConstructorCall getDefaultInstanceForType() {
        return defaultInstance;
    }

    @Override
    public Parser<IrDelegatingConstructorCall> getParserForType() {
        return PARSER;
    }

    /**
     * <code>required int64 symbol = 1;</code>
     */
    @Override
    public boolean hasSymbol() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
    }

    /**
     * <code>required int64 symbol = 1;</code>
     */
    @Override
    public long getSymbol() {
        return symbol_;
    }

    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon member_access = 2;</code>
     */
    @Override
    public boolean hasMemberAccess() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
    }

    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon member_access = 2;</code>
     */
    @Override
    public MemberAccessCommon getMemberAccess() {
        return memberAccess_;
    }

    private void initFields() {
        symbol_ = 0L;
        memberAccess_ = MemberAccessCommon.getDefaultInstance();
    }

    @Override
    public boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasSymbol()) {
            memoizedIsInitialized = 0;
            return false;
        }
        if (!hasMemberAccess()) {
            memoizedIsInitialized = 0;
            return false;
        }
        if (!getMemberAccess().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
        }
        memoizedIsInitialized = 1;
        return true;
    }

    @Override
    public void writeTo(CodedOutputStream output)
            throws IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            output.writeInt64(1, symbol_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            output.writeMessage(2, memberAccess_);
        }
        output.writeRawBytes(unknownFields);
    }

    @Override
    public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += CodedOutputStream
                    .computeInt64Size(1, symbol_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += CodedOutputStream
                    .computeMessageSize(2, memberAccess_);
        }
        size += unknownFields.size();
        memoizedSerializedSize = size;
        return size;
    }

    @Override
    protected Object writeReplace()
            throws ObjectStreamException {
        return super.writeReplace();
    }

    @Override
    public Builder newBuilderForType() {
        return newBuilder();
    }

    @Override
    public Builder toBuilder() {
        return newBuilder(this);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrDelegatingConstructorCall}
     */
    public static final class Builder extends
            GeneratedMessageLite.Builder<
                    IrDelegatingConstructorCall, Builder>
            implements
            // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrDelegatingConstructorCall)
            IrDelegatingConstructorCallOrBuilder {
        private int bitField0_;
        private long symbol_;
        private MemberAccessCommon memberAccess_ = MemberAccessCommon.getDefaultInstance();

        // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrDelegatingConstructorCall.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private static Builder create() {
            return new Builder();
        }

        private void maybeForceBuilderInitialization() {
        }

        @Override
        public Builder clear() {
            super.clear();
            symbol_ = 0L;
            bitField0_ &= ~0x00000001;
            memberAccess_ = MemberAccessCommon.getDefaultInstance();
            bitField0_ &= ~0x00000002;
            return this;
        }

        @Override
        public Builder clone() {
            return create().mergeFrom(buildPartial());
        }

        @Override
        public IrDelegatingConstructorCall getDefaultInstanceForType() {
            return getDefaultInstance();
        }

        @Override
        public IrDelegatingConstructorCall build() {
            IrDelegatingConstructorCall result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        @Override
        public IrDelegatingConstructorCall buildPartial() {
            IrDelegatingConstructorCall result = new IrDelegatingConstructorCall(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                to_bitField0_ |= 0x00000001;
            }
            result.symbol_ = symbol_;
            if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                to_bitField0_ |= 0x00000002;
            }
            result.memberAccess_ = memberAccess_;
            result.bitField0_ = to_bitField0_;
            return result;
        }

        @Override
        public Builder mergeFrom(IrDelegatingConstructorCall other) {
            if (other == getDefaultInstance())
                return this;
            if (other.hasSymbol()) {
                setSymbol(other.getSymbol());
            }
            if (other.hasMemberAccess()) {
                mergeMemberAccess(other.getMemberAccess());
            }
            setUnknownFields(
                    getUnknownFields().concat(other.unknownFields));
            return this;
        }

        @Override
        public boolean isInitialized() {
            if (!hasSymbol()) {

                return false;
            }
            if (!hasMemberAccess()) {

                return false;
            }
            if (!getMemberAccess().isInitialized()) {

                return false;
            }
            return true;
        }

        @Override
        public Builder mergeFrom(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws IOException {
            IrDelegatingConstructorCall parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (InvalidProtocolBufferException e) {
                parsedMessage = (IrDelegatingConstructorCall) e.getUnfinishedMessage();
                throw e;
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        /**
         * <code>required int64 symbol = 1;</code>
         */
        @Override
        public boolean hasSymbol() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required int64 symbol = 1;</code>
         */
        @Override
        public long getSymbol() {
            return symbol_;
        }

        /**
         * <code>required int64 symbol = 1;</code>
         */
        public Builder setSymbol(long value) {
            bitField0_ |= 0x00000001;
            symbol_ = value;

            return this;
        }

        /**
         * <code>required int64 symbol = 1;</code>
         */
        public Builder clearSymbol() {
            bitField0_ &= ~0x00000001;
            symbol_ = 0L;

            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon member_access = 2;</code>
         */
        @Override
        public boolean hasMemberAccess() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon member_access = 2;</code>
         */
        @Override
        public MemberAccessCommon getMemberAccess() {
            return memberAccess_;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon member_access = 2;</code>
         */
        public Builder setMemberAccess(MemberAccessCommon value) {
            if (value == null) {
                throw new NullPointerException();
            }
            memberAccess_ = value;

            bitField0_ |= 0x00000002;
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon member_access = 2;</code>
         */
        public Builder setMemberAccess(
                MemberAccessCommon.Builder builderForValue) {
            memberAccess_ = builderForValue.build();

            bitField0_ |= 0x00000002;
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon member_access = 2;</code>
         */
        public Builder mergeMemberAccess(MemberAccessCommon value) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                    memberAccess_ != MemberAccessCommon.getDefaultInstance()) {
                memberAccess_ =
                        MemberAccessCommon.newBuilder(memberAccess_).mergeFrom(value).buildPartial();
            } else {
                memberAccess_ = value;
            }

            bitField0_ |= 0x00000002;
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon member_access = 2;</code>
         */
        public Builder clearMemberAccess() {
            memberAccess_ = MemberAccessCommon.getDefaultInstance();

            bitField0_ &= ~0x00000002;
            return this;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrDelegatingConstructorCall)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrDelegatingConstructorCall)
}
