// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

import org.jetbrains.kotlin.protobuf.AbstractParser;
import org.jetbrains.kotlin.protobuf.ByteString;
import org.jetbrains.kotlin.protobuf.CodedInputStream;
import org.jetbrains.kotlin.protobuf.CodedOutputStream;
import org.jetbrains.kotlin.protobuf.ExtensionRegistryLite;
import org.jetbrains.kotlin.protobuf.GeneratedMessageLite;
import org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException;
import org.jetbrains.kotlin.protobuf.Parser;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry}
 */
public final class FileEntry extends
        GeneratedMessageLite implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry)
        FileEntryOrBuilder {
    public static final int NAME_FIELD_NUMBER = 1;
    public static final int LINE_START_OFFSET_FIELD_NUMBER = 2;
    private static final FileEntry defaultInstance;
    private static final long serialVersionUID = 0L;
    public static Parser<FileEntry> PARSER =
            new AbstractParser<FileEntry>() {
                @Override
                public FileEntry parsePartialFrom(
                        CodedInputStream input,
                        ExtensionRegistryLite extensionRegistry)
                        throws InvalidProtocolBufferException {
                    return new FileEntry(input, extensionRegistry);
                }
            };

    static {
        defaultInstance = new FileEntry(true);
        defaultInstance.initFields();
    }

    private final ByteString unknownFields;
    private int bitField0_;
    private Object name_;
    private List<Integer> lineStartOffset_;
    private int lineStartOffsetMemoizedSerializedSize = -1;
    private byte memoizedIsInitialized = -1;
    private int memoizedSerializedSize = -1;

    // Use FileEntry.newBuilder() to construct.
    private FileEntry(GeneratedMessageLite.Builder builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
    }

    private FileEntry(boolean noInit) {
        this.unknownFields = ByteString.EMPTY;
    }

    private FileEntry(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        ByteString.Output unknownFieldsOutput =
                ByteString.newOutput();
        CodedOutputStream unknownFieldsCodedOutput =
                CodedOutputStream.newInstance(
                        unknownFieldsOutput, 1);
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 10: {
                        ByteString bs = input.readBytes();
                        bitField0_ |= 0x00000001;
                        name_ = bs;
                        break;
                    }
                    case 16: {
                        if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                            lineStartOffset_ = new ArrayList<Integer>();
                            mutable_bitField0_ |= 0x00000002;
                        }
                        lineStartOffset_.add(input.readInt32());
                        break;
                    }
                    case 18: {
                        int length = input.readRawVarint32();
                        int limit = input.pushLimit(length);
                        if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                            lineStartOffset_ = new ArrayList<Integer>();
                            mutable_bitField0_ |= 0x00000002;
                        }
                        while (input.getBytesUntilLimit() > 0) {
                            lineStartOffset_.add(input.readInt32());
                        }
                        input.popLimit(limit);
                        break;
                    }
                }
            }
        } catch (InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (IOException e) {
            throw new InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this);
        } finally {
            if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                lineStartOffset_ = Collections.unmodifiableList(lineStartOffset_);
            }
            try {
                unknownFieldsCodedOutput.flush();
            } catch (IOException e) {
                // Should not happen
            } finally {
                unknownFields = unknownFieldsOutput.toByteString();
            }
            makeExtensionsImmutable();
        }
    }

    public static FileEntry getDefaultInstance() {
        return defaultInstance;
    }

    public static FileEntry parseFrom(
            ByteString data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static FileEntry parseFrom(
            ByteString data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static FileEntry parseFrom(byte[] data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static FileEntry parseFrom(
            byte[] data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static FileEntry parseFrom(InputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static FileEntry parseFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static FileEntry parseDelimitedFrom(InputStream input)
            throws IOException {
        return PARSER.parseDelimitedFrom(input);
    }

    public static FileEntry parseDelimitedFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }

    public static FileEntry parseFrom(
            CodedInputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static FileEntry parseFrom(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() {
        return Builder.create();
    }

    public static Builder newBuilder(FileEntry prototype) {
        return newBuilder().mergeFrom(prototype);
    }

    @Override
    public FileEntry getDefaultInstanceForType() {
        return defaultInstance;
    }

    @Override
    public Parser<FileEntry> getParserForType() {
        return PARSER;
    }

    /**
     * <code>required string name = 1;</code>
     */
    @Override
    public boolean hasName() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
    }

    /**
     * <code>required string name = 1;</code>
     */
    @Override
    public String getName() {
        Object ref = name_;
        if (ref instanceof String) {
            return (String) ref;
        } else {
            ByteString bs =
                    (ByteString) ref;
            String s = bs.toStringUtf8();
            if (bs.isValidUtf8()) {
                name_ = s;
            }
            return s;
        }
    }

    /**
     * <code>required string name = 1;</code>
     */
    @Override
    public ByteString
    getNameBytes() {
        Object ref = name_;
        if (ref instanceof String) {
            ByteString b =
                    ByteString.copyFromUtf8(
                            (String) ref);
            name_ = b;
            return b;
        } else {
            return (ByteString) ref;
        }
    }

    /**
     * <code>repeated int32 line_start_offset = 2 [packed = true];</code>
     */
    @Override
    public List<Integer>
    getLineStartOffsetList() {
        return lineStartOffset_;
    }

    /**
     * <code>repeated int32 line_start_offset = 2 [packed = true];</code>
     */
    @Override
    public int getLineStartOffsetCount() {
        return lineStartOffset_.size();
    }

    /**
     * <code>repeated int32 line_start_offset = 2 [packed = true];</code>
     */
    @Override
    public int getLineStartOffset(int index) {
        return lineStartOffset_.get(index);
    }

    private void initFields() {
        name_ = "";
        lineStartOffset_ = Collections.emptyList();
    }

    @Override
    public boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasName()) {
            memoizedIsInitialized = 0;
            return false;
        }
        memoizedIsInitialized = 1;
        return true;
    }

    @Override
    public void writeTo(CodedOutputStream output)
            throws IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            output.writeBytes(1, getNameBytes());
        }
        if (getLineStartOffsetList().size() > 0) {
            output.writeRawVarint32(18);
            output.writeRawVarint32(lineStartOffsetMemoizedSerializedSize);
        }
        for (int i = 0; i < lineStartOffset_.size(); i++) {
            output.writeInt32NoTag(lineStartOffset_.get(i));
        }
        output.writeRawBytes(unknownFields);
    }

    @Override
    public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += CodedOutputStream
                    .computeBytesSize(1, getNameBytes());
        }
        {
            int dataSize = 0;
            for (int i = 0; i < lineStartOffset_.size(); i++) {
                dataSize += CodedOutputStream
                        .computeInt32SizeNoTag(lineStartOffset_.get(i));
            }
            size += dataSize;
            if (!getLineStartOffsetList().isEmpty()) {
                size += 1;
                size += CodedOutputStream
                        .computeInt32SizeNoTag(dataSize);
            }
            lineStartOffsetMemoizedSerializedSize = dataSize;
        }
        size += unknownFields.size();
        memoizedSerializedSize = size;
        return size;
    }

    @Override
    protected Object writeReplace()
            throws ObjectStreamException {
        return super.writeReplace();
    }

    @Override
    public Builder newBuilderForType() {
        return newBuilder();
    }

    @Override
    public Builder toBuilder() {
        return newBuilder(this);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry}
     */
    public static final class Builder extends
            GeneratedMessageLite.Builder<
                    FileEntry, Builder>
            implements
            // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry)
            FileEntryOrBuilder {
        private int bitField0_;
        private Object name_ = "";
        private List<Integer> lineStartOffset_ = Collections.emptyList();

        // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private static Builder create() {
            return new Builder();
        }

        private void maybeForceBuilderInitialization() {
        }

        @Override
        public Builder clear() {
            super.clear();
            name_ = "";
            bitField0_ &= ~0x00000001;
            lineStartOffset_ = Collections.emptyList();
            bitField0_ &= ~0x00000002;
            return this;
        }

        @Override
        public Builder clone() {
            return create().mergeFrom(buildPartial());
        }

        @Override
        public FileEntry getDefaultInstanceForType() {
            return getDefaultInstance();
        }

        @Override
        public FileEntry build() {
            FileEntry result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        @Override
        public FileEntry buildPartial() {
            FileEntry result = new FileEntry(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                to_bitField0_ |= 0x00000001;
            }
            result.name_ = name_;
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                lineStartOffset_ = Collections.unmodifiableList(lineStartOffset_);
                bitField0_ &= ~0x00000002;
            }
            result.lineStartOffset_ = lineStartOffset_;
            result.bitField0_ = to_bitField0_;
            return result;
        }

        @Override
        public Builder mergeFrom(FileEntry other) {
            if (other == getDefaultInstance())
                return this;
            if (other.hasName()) {
                bitField0_ |= 0x00000001;
                name_ = other.name_;

            }
            if (!other.lineStartOffset_.isEmpty()) {
                if (lineStartOffset_.isEmpty()) {
                    lineStartOffset_ = other.lineStartOffset_;
                    bitField0_ &= ~0x00000002;
                } else {
                    ensureLineStartOffsetIsMutable();
                    lineStartOffset_.addAll(other.lineStartOffset_);
                }

            }
            setUnknownFields(
                    getUnknownFields().concat(other.unknownFields));
            return this;
        }

        @Override
        public boolean isInitialized() {
            if (!hasName()) {

                return false;
            }
            return true;
        }

        @Override
        public Builder mergeFrom(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws IOException {
            FileEntry parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (InvalidProtocolBufferException e) {
                parsedMessage = (FileEntry) e.getUnfinishedMessage();
                throw e;
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        /**
         * <code>required string name = 1;</code>
         */
        @Override
        public boolean hasName() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required string name = 1;</code>
         */
        @Override
        public String getName() {
            Object ref = name_;
            if (!(ref instanceof String)) {
                ByteString bs =
                        (ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    name_ = s;
                }
                return s;
            } else {
                return (String) ref;
            }
        }

        /**
         * <code>required string name = 1;</code>
         */
        public Builder setName(
                String value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000001;
            name_ = value;

            return this;
        }

        /**
         * <code>required string name = 1;</code>
         */
        @Override
        public ByteString
        getNameBytes() {
            Object ref = name_;
            if (ref instanceof String) {
                ByteString b =
                        ByteString.copyFromUtf8(
                                (String) ref);
                name_ = b;
                return b;
            } else {
                return (ByteString) ref;
            }
        }

        /**
         * <code>required string name = 1;</code>
         */
        public Builder setNameBytes(
                ByteString value) {
            if (value == null) {
                throw new NullPointerException();
            }
            bitField0_ |= 0x00000001;
            name_ = value;

            return this;
        }

        /**
         * <code>required string name = 1;</code>
         */
        public Builder clearName() {
            bitField0_ &= ~0x00000001;
            name_ = getDefaultInstance().getName();

            return this;
        }

        private void ensureLineStartOffsetIsMutable() {
            if (!((bitField0_ & 0x00000002) == 0x00000002)) {
                lineStartOffset_ = new ArrayList<Integer>(lineStartOffset_);
                bitField0_ |= 0x00000002;
            }
        }

        /**
         * <code>repeated int32 line_start_offset = 2 [packed = true];</code>
         */
        @Override
        public List<Integer>
        getLineStartOffsetList() {
            return Collections.unmodifiableList(lineStartOffset_);
        }

        /**
         * <code>repeated int32 line_start_offset = 2 [packed = true];</code>
         */
        @Override
        public int getLineStartOffsetCount() {
            return lineStartOffset_.size();
        }

        /**
         * <code>repeated int32 line_start_offset = 2 [packed = true];</code>
         */
        @Override
        public int getLineStartOffset(int index) {
            return lineStartOffset_.get(index);
        }

        /**
         * <code>repeated int32 line_start_offset = 2 [packed = true];</code>
         */
        public Builder setLineStartOffset(
                int index, int value) {
            ensureLineStartOffsetIsMutable();
            lineStartOffset_.set(index, value);

            return this;
        }

        /**
         * <code>repeated int32 line_start_offset = 2 [packed = true];</code>
         */
        public Builder addLineStartOffset(int value) {
            ensureLineStartOffsetIsMutable();
            lineStartOffset_.add(value);

            return this;
        }

        /**
         * <code>repeated int32 line_start_offset = 2 [packed = true];</code>
         */
        public Builder addAllLineStartOffset(
                Iterable<? extends Integer> values) {
            ensureLineStartOffsetIsMutable();
            addAll(
                    values, lineStartOffset_);

            return this;
        }

        /**
         * <code>repeated int32 line_start_offset = 2 [packed = true];</code>
         */
        public Builder clearLineStartOffset() {
            lineStartOffset_ = Collections.emptyList();
            bitField0_ &= ~0x00000002;

            return this;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.FileEntry)
}
