// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

import org.jetbrains.kotlin.protobuf.AbstractParser;
import org.jetbrains.kotlin.protobuf.ByteString;
import org.jetbrains.kotlin.protobuf.CodedInputStream;
import org.jetbrains.kotlin.protobuf.CodedOutputStream;
import org.jetbrains.kotlin.protobuf.ExtensionRegistryLite;
import org.jetbrains.kotlin.protobuf.GeneratedMessageLite;
import org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException;
import org.jetbrains.kotlin.protobuf.Parser;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature}
 */
public final class CommonIdSignature extends
        GeneratedMessageLite implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature)
        CommonIdSignatureOrBuilder {
    public static final int PACKAGE_FQ_NAME_FIELD_NUMBER = 1;
    public static final int DECLARATION_FQ_NAME_FIELD_NUMBER = 2;
    public static final int MEMBER_UNIQ_ID_FIELD_NUMBER = 3;
    public static final int FLAGS_FIELD_NUMBER = 4;
    public static final int DEBUG_INFO_FIELD_NUMBER = 5;
    private static final CommonIdSignature defaultInstance;
    private static final long serialVersionUID = 0L;
    public static Parser<CommonIdSignature> PARSER =
            new AbstractParser<CommonIdSignature>() {
                @Override
                public CommonIdSignature parsePartialFrom(
                        CodedInputStream input,
                        ExtensionRegistryLite extensionRegistry)
                        throws InvalidProtocolBufferException {
                    return new CommonIdSignature(input, extensionRegistry);
                }
            };

    static {
        defaultInstance = new CommonIdSignature(true);
        defaultInstance.initFields();
    }

    private final ByteString unknownFields;
    private int bitField0_;
    private List<Integer> packageFqName_;
    private int packageFqNameMemoizedSerializedSize = -1;
    private List<Integer> declarationFqName_;
    private int declarationFqNameMemoizedSerializedSize = -1;
    private long memberUniqId_;
    private long flags_;
    private int debugInfo_;
    private byte memoizedIsInitialized = -1;
    private int memoizedSerializedSize = -1;

    // Use CommonIdSignature.newBuilder() to construct.
    private CommonIdSignature(GeneratedMessageLite.Builder builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
    }

    private CommonIdSignature(boolean noInit) {
        this.unknownFields = ByteString.EMPTY;
    }

    private CommonIdSignature(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        ByteString.Output unknownFieldsOutput =
                ByteString.newOutput();
        CodedOutputStream unknownFieldsCodedOutput =
                CodedOutputStream.newInstance(
                        unknownFieldsOutput, 1);
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 8: {
                        if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                            packageFqName_ = new ArrayList<Integer>();
                            mutable_bitField0_ |= 0x00000001;
                        }
                        packageFqName_.add(input.readInt32());
                        break;
                    }
                    case 10: {
                        int length = input.readRawVarint32();
                        int limit = input.pushLimit(length);
                        if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                            packageFqName_ = new ArrayList<Integer>();
                            mutable_bitField0_ |= 0x00000001;
                        }
                        while (input.getBytesUntilLimit() > 0) {
                            packageFqName_.add(input.readInt32());
                        }
                        input.popLimit(limit);
                        break;
                    }
                    case 16: {
                        if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                            declarationFqName_ = new ArrayList<Integer>();
                            mutable_bitField0_ |= 0x00000002;
                        }
                        declarationFqName_.add(input.readInt32());
                        break;
                    }
                    case 18: {
                        int length = input.readRawVarint32();
                        int limit = input.pushLimit(length);
                        if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                            declarationFqName_ = new ArrayList<Integer>();
                            mutable_bitField0_ |= 0x00000002;
                        }
                        while (input.getBytesUntilLimit() > 0) {
                            declarationFqName_.add(input.readInt32());
                        }
                        input.popLimit(limit);
                        break;
                    }
                    case 24: {
                        bitField0_ |= 0x00000001;
                        memberUniqId_ = input.readInt64();
                        break;
                    }
                    case 32: {
                        bitField0_ |= 0x00000002;
                        flags_ = input.readInt64();
                        break;
                    }
                    case 40: {
                        bitField0_ |= 0x00000004;
                        debugInfo_ = input.readInt32();
                        break;
                    }
                }
            }
        } catch (InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (IOException e) {
            throw new InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this);
        } finally {
            if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                packageFqName_ = Collections.unmodifiableList(packageFqName_);
            }
            if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                declarationFqName_ = Collections.unmodifiableList(declarationFqName_);
            }
            try {
                unknownFieldsCodedOutput.flush();
            } catch (IOException e) {
                // Should not happen
            } finally {
                unknownFields = unknownFieldsOutput.toByteString();
            }
            makeExtensionsImmutable();
        }
    }

    public static CommonIdSignature getDefaultInstance() {
        return defaultInstance;
    }

    public static CommonIdSignature parseFrom(
            ByteString data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static CommonIdSignature parseFrom(
            ByteString data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static CommonIdSignature parseFrom(byte[] data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static CommonIdSignature parseFrom(
            byte[] data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static CommonIdSignature parseFrom(InputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static CommonIdSignature parseFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static CommonIdSignature parseDelimitedFrom(InputStream input)
            throws IOException {
        return PARSER.parseDelimitedFrom(input);
    }

    public static CommonIdSignature parseDelimitedFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }

    public static CommonIdSignature parseFrom(
            CodedInputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static CommonIdSignature parseFrom(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() {
        return Builder.create();
    }

    public static Builder newBuilder(CommonIdSignature prototype) {
        return newBuilder().mergeFrom(prototype);
    }

    @Override
    public CommonIdSignature getDefaultInstanceForType() {
        return defaultInstance;
    }

    @Override
    public Parser<CommonIdSignature> getParserForType() {
        return PARSER;
    }

    /**
     * <code>repeated int32 package_fq_name = 1 [packed = true];</code>
     */
    @Override
    public List<Integer>
    getPackageFqNameList() {
        return packageFqName_;
    }

    /**
     * <code>repeated int32 package_fq_name = 1 [packed = true];</code>
     */
    @Override
    public int getPackageFqNameCount() {
        return packageFqName_.size();
    }

    /**
     * <code>repeated int32 package_fq_name = 1 [packed = true];</code>
     */
    @Override
    public int getPackageFqName(int index) {
        return packageFqName_.get(index);
    }

    /**
     * <code>repeated int32 declaration_fq_name = 2 [packed = true];</code>
     */
    @Override
    public List<Integer>
    getDeclarationFqNameList() {
        return declarationFqName_;
    }

    /**
     * <code>repeated int32 declaration_fq_name = 2 [packed = true];</code>
     */
    @Override
    public int getDeclarationFqNameCount() {
        return declarationFqName_.size();
    }

    /**
     * <code>repeated int32 declaration_fq_name = 2 [packed = true];</code>
     */
    @Override
    public int getDeclarationFqName(int index) {
        return declarationFqName_.get(index);
    }

    /**
     * <code>optional int64 member_uniq_id = 3;</code>
     */
    @Override
    public boolean hasMemberUniqId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
    }

    /**
     * <code>optional int64 member_uniq_id = 3;</code>
     */
    @Override
    public long getMemberUniqId() {
        return memberUniqId_;
    }

    /**
     * <code>optional int64 flags = 4 [default = 0];</code>
     */
    @Override
    public boolean hasFlags() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
    }

    /**
     * <code>optional int64 flags = 4 [default = 0];</code>
     */
    @Override
    public long getFlags() {
        return flags_;
    }

    /**
     * <code>optional int32 debug_info = 5;</code>
     */
    @Override
    public boolean hasDebugInfo() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
    }

    /**
     * <code>optional int32 debug_info = 5;</code>
     */
    @Override
    public int getDebugInfo() {
        return debugInfo_;
    }

    private void initFields() {
        packageFqName_ = Collections.emptyList();
        declarationFqName_ = Collections.emptyList();
        memberUniqId_ = 0L;
        flags_ = 0L;
        debugInfo_ = 0;
    }

    @Override
    public boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
    }

    @Override
    public void writeTo(CodedOutputStream output)
            throws IOException {
        getSerializedSize();
        if (getPackageFqNameList().size() > 0) {
            output.writeRawVarint32(10);
            output.writeRawVarint32(packageFqNameMemoizedSerializedSize);
        }
        for (int i = 0; i < packageFqName_.size(); i++) {
            output.writeInt32NoTag(packageFqName_.get(i));
        }
        if (getDeclarationFqNameList().size() > 0) {
            output.writeRawVarint32(18);
            output.writeRawVarint32(declarationFqNameMemoizedSerializedSize);
        }
        for (int i = 0; i < declarationFqName_.size(); i++) {
            output.writeInt32NoTag(declarationFqName_.get(i));
        }
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            output.writeInt64(3, memberUniqId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            output.writeInt64(4, flags_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            output.writeInt32(5, debugInfo_);
        }
        output.writeRawBytes(unknownFields);
    }

    @Override
    public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        {
            int dataSize = 0;
            for (int i = 0; i < packageFqName_.size(); i++) {
                dataSize += CodedOutputStream
                        .computeInt32SizeNoTag(packageFqName_.get(i));
            }
            size += dataSize;
            if (!getPackageFqNameList().isEmpty()) {
                size += 1;
                size += CodedOutputStream
                        .computeInt32SizeNoTag(dataSize);
            }
            packageFqNameMemoizedSerializedSize = dataSize;
        }
        {
            int dataSize = 0;
            for (int i = 0; i < declarationFqName_.size(); i++) {
                dataSize += CodedOutputStream
                        .computeInt32SizeNoTag(declarationFqName_.get(i));
            }
            size += dataSize;
            if (!getDeclarationFqNameList().isEmpty()) {
                size += 1;
                size += CodedOutputStream
                        .computeInt32SizeNoTag(dataSize);
            }
            declarationFqNameMemoizedSerializedSize = dataSize;
        }
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += CodedOutputStream
                    .computeInt64Size(3, memberUniqId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += CodedOutputStream
                    .computeInt64Size(4, flags_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            size += CodedOutputStream
                    .computeInt32Size(5, debugInfo_);
        }
        size += unknownFields.size();
        memoizedSerializedSize = size;
        return size;
    }

    @Override
    protected Object writeReplace()
            throws ObjectStreamException {
        return super.writeReplace();
    }

    @Override
    public Builder newBuilderForType() {
        return newBuilder();
    }

    @Override
    public Builder toBuilder() {
        return newBuilder(this);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature}
     */
    public static final class Builder extends
            GeneratedMessageLite.Builder<
                    CommonIdSignature, Builder>
            implements
            // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature)
            CommonIdSignatureOrBuilder {
        private int bitField0_;
        private List<Integer> packageFqName_ = Collections.emptyList();
        private List<Integer> declarationFqName_ = Collections.emptyList();
        private long memberUniqId_;
        private long flags_;
        private int debugInfo_;

        // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private static Builder create() {
            return new Builder();
        }

        private void maybeForceBuilderInitialization() {
        }

        @Override
        public Builder clear() {
            super.clear();
            packageFqName_ = Collections.emptyList();
            bitField0_ &= ~0x00000001;
            declarationFqName_ = Collections.emptyList();
            bitField0_ &= ~0x00000002;
            memberUniqId_ = 0L;
            bitField0_ &= ~0x00000004;
            flags_ = 0L;
            bitField0_ &= ~0x00000008;
            debugInfo_ = 0;
            bitField0_ &= ~0x00000010;
            return this;
        }

        @Override
        public Builder clone() {
            return create().mergeFrom(buildPartial());
        }

        @Override
        public CommonIdSignature getDefaultInstanceForType() {
            return getDefaultInstance();
        }

        @Override
        public CommonIdSignature build() {
            CommonIdSignature result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        @Override
        public CommonIdSignature buildPartial() {
            CommonIdSignature result = new CommonIdSignature(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                packageFqName_ = Collections.unmodifiableList(packageFqName_);
                bitField0_ &= ~0x00000001;
            }
            result.packageFqName_ = packageFqName_;
            if (((bitField0_ & 0x00000002) == 0x00000002)) {
                declarationFqName_ = Collections.unmodifiableList(declarationFqName_);
                bitField0_ &= ~0x00000002;
            }
            result.declarationFqName_ = declarationFqName_;
            if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                to_bitField0_ |= 0x00000001;
            }
            result.memberUniqId_ = memberUniqId_;
            if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                to_bitField0_ |= 0x00000002;
            }
            result.flags_ = flags_;
            if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
                to_bitField0_ |= 0x00000004;
            }
            result.debugInfo_ = debugInfo_;
            result.bitField0_ = to_bitField0_;
            return result;
        }

        @Override
        public Builder mergeFrom(CommonIdSignature other) {
            if (other == getDefaultInstance())
                return this;
            if (!other.packageFqName_.isEmpty()) {
                if (packageFqName_.isEmpty()) {
                    packageFqName_ = other.packageFqName_;
                    bitField0_ &= ~0x00000001;
                } else {
                    ensurePackageFqNameIsMutable();
                    packageFqName_.addAll(other.packageFqName_);
                }

            }
            if (!other.declarationFqName_.isEmpty()) {
                if (declarationFqName_.isEmpty()) {
                    declarationFqName_ = other.declarationFqName_;
                    bitField0_ &= ~0x00000002;
                } else {
                    ensureDeclarationFqNameIsMutable();
                    declarationFqName_.addAll(other.declarationFqName_);
                }

            }
            if (other.hasMemberUniqId()) {
                setMemberUniqId(other.getMemberUniqId());
            }
            if (other.hasFlags()) {
                setFlags(other.getFlags());
            }
            if (other.hasDebugInfo()) {
                setDebugInfo(other.getDebugInfo());
            }
            setUnknownFields(
                    getUnknownFields().concat(other.unknownFields));
            return this;
        }

        @Override
        public boolean isInitialized() {
            return true;
        }

        @Override
        public Builder mergeFrom(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws IOException {
            CommonIdSignature parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (InvalidProtocolBufferException e) {
                parsedMessage = (CommonIdSignature) e.getUnfinishedMessage();
                throw e;
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        private void ensurePackageFqNameIsMutable() {
            if (!((bitField0_ & 0x00000001) == 0x00000001)) {
                packageFqName_ = new ArrayList<Integer>(packageFqName_);
                bitField0_ |= 0x00000001;
            }
        }

        /**
         * <code>repeated int32 package_fq_name = 1 [packed = true];</code>
         */
        @Override
        public List<Integer>
        getPackageFqNameList() {
            return Collections.unmodifiableList(packageFqName_);
        }

        /**
         * <code>repeated int32 package_fq_name = 1 [packed = true];</code>
         */
        @Override
        public int getPackageFqNameCount() {
            return packageFqName_.size();
        }

        /**
         * <code>repeated int32 package_fq_name = 1 [packed = true];</code>
         */
        @Override
        public int getPackageFqName(int index) {
            return packageFqName_.get(index);
        }

        /**
         * <code>repeated int32 package_fq_name = 1 [packed = true];</code>
         */
        public Builder setPackageFqName(
                int index, int value) {
            ensurePackageFqNameIsMutable();
            packageFqName_.set(index, value);

            return this;
        }

        /**
         * <code>repeated int32 package_fq_name = 1 [packed = true];</code>
         */
        public Builder addPackageFqName(int value) {
            ensurePackageFqNameIsMutable();
            packageFqName_.add(value);

            return this;
        }

        /**
         * <code>repeated int32 package_fq_name = 1 [packed = true];</code>
         */
        public Builder addAllPackageFqName(
                Iterable<? extends Integer> values) {
            ensurePackageFqNameIsMutable();
            addAll(
                    values, packageFqName_);

            return this;
        }

        /**
         * <code>repeated int32 package_fq_name = 1 [packed = true];</code>
         */
        public Builder clearPackageFqName() {
            packageFqName_ = Collections.emptyList();
            bitField0_ &= ~0x00000001;

            return this;
        }

        private void ensureDeclarationFqNameIsMutable() {
            if (!((bitField0_ & 0x00000002) == 0x00000002)) {
                declarationFqName_ = new ArrayList<Integer>(declarationFqName_);
                bitField0_ |= 0x00000002;
            }
        }

        /**
         * <code>repeated int32 declaration_fq_name = 2 [packed = true];</code>
         */
        @Override
        public List<Integer>
        getDeclarationFqNameList() {
            return Collections.unmodifiableList(declarationFqName_);
        }

        /**
         * <code>repeated int32 declaration_fq_name = 2 [packed = true];</code>
         */
        @Override
        public int getDeclarationFqNameCount() {
            return declarationFqName_.size();
        }

        /**
         * <code>repeated int32 declaration_fq_name = 2 [packed = true];</code>
         */
        @Override
        public int getDeclarationFqName(int index) {
            return declarationFqName_.get(index);
        }

        /**
         * <code>repeated int32 declaration_fq_name = 2 [packed = true];</code>
         */
        public Builder setDeclarationFqName(
                int index, int value) {
            ensureDeclarationFqNameIsMutable();
            declarationFqName_.set(index, value);

            return this;
        }

        /**
         * <code>repeated int32 declaration_fq_name = 2 [packed = true];</code>
         */
        public Builder addDeclarationFqName(int value) {
            ensureDeclarationFqNameIsMutable();
            declarationFqName_.add(value);

            return this;
        }

        /**
         * <code>repeated int32 declaration_fq_name = 2 [packed = true];</code>
         */
        public Builder addAllDeclarationFqName(
                Iterable<? extends Integer> values) {
            ensureDeclarationFqNameIsMutable();
            addAll(
                    values, declarationFqName_);

            return this;
        }

        /**
         * <code>repeated int32 declaration_fq_name = 2 [packed = true];</code>
         */
        public Builder clearDeclarationFqName() {
            declarationFqName_ = Collections.emptyList();
            bitField0_ &= ~0x00000002;

            return this;
        }

        /**
         * <code>optional int64 member_uniq_id = 3;</code>
         */
        @Override
        public boolean hasMemberUniqId() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>optional int64 member_uniq_id = 3;</code>
         */
        @Override
        public long getMemberUniqId() {
            return memberUniqId_;
        }

        /**
         * <code>optional int64 member_uniq_id = 3;</code>
         */
        public Builder setMemberUniqId(long value) {
            bitField0_ |= 0x00000004;
            memberUniqId_ = value;

            return this;
        }

        /**
         * <code>optional int64 member_uniq_id = 3;</code>
         */
        public Builder clearMemberUniqId() {
            bitField0_ &= ~0x00000004;
            memberUniqId_ = 0L;

            return this;
        }

        /**
         * <code>optional int64 flags = 4 [default = 0];</code>
         */
        @Override
        public boolean hasFlags() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>optional int64 flags = 4 [default = 0];</code>
         */
        @Override
        public long getFlags() {
            return flags_;
        }

        /**
         * <code>optional int64 flags = 4 [default = 0];</code>
         */
        public Builder setFlags(long value) {
            bitField0_ |= 0x00000008;
            flags_ = value;

            return this;
        }

        /**
         * <code>optional int64 flags = 4 [default = 0];</code>
         */
        public Builder clearFlags() {
            bitField0_ &= ~0x00000008;
            flags_ = 0L;

            return this;
        }

        /**
         * <code>optional int32 debug_info = 5;</code>
         */
        @Override
        public boolean hasDebugInfo() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }

        /**
         * <code>optional int32 debug_info = 5;</code>
         */
        @Override
        public int getDebugInfo() {
            return debugInfo_;
        }

        /**
         * <code>optional int32 debug_info = 5;</code>
         */
        public Builder setDebugInfo(int value) {
            bitField0_ |= 0x00000010;
            debugInfo_ = value;

            return this;
        }

        /**
         * <code>optional int32 debug_info = 5;</code>
         */
        public Builder clearDebugInfo() {
            bitField0_ &= ~0x00000010;
            debugInfo_ = 0;

            return this;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.CommonIdSignature)
}
