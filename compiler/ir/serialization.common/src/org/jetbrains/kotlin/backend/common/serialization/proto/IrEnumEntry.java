// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

import org.jetbrains.kotlin.protobuf.AbstractParser;
import org.jetbrains.kotlin.protobuf.ByteString;
import org.jetbrains.kotlin.protobuf.CodedInputStream;
import org.jetbrains.kotlin.protobuf.CodedOutputStream;
import org.jetbrains.kotlin.protobuf.ExtensionRegistryLite;
import org.jetbrains.kotlin.protobuf.GeneratedMessageLite;
import org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException;
import org.jetbrains.kotlin.protobuf.Parser;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamException;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry}
 */
public final class IrEnumEntry extends
        GeneratedMessageLite implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry)
        IrEnumEntryOrBuilder {
    public static final int BASE_FIELD_NUMBER = 1;
    public static final int NAME_FIELD_NUMBER = 2;
    public static final int INITIALIZER_FIELD_NUMBER = 3;
    public static final int CORRESPONDING_CLASS_FIELD_NUMBER = 4;
    private static final IrEnumEntry defaultInstance;
    private static final long serialVersionUID = 0L;
    public static Parser<IrEnumEntry> PARSER =
            new AbstractParser<IrEnumEntry>() {
                @Override
                public IrEnumEntry parsePartialFrom(
                        CodedInputStream input,
                        ExtensionRegistryLite extensionRegistry)
                        throws InvalidProtocolBufferException {
                    return new IrEnumEntry(input, extensionRegistry);
                }
            };

    static {
        defaultInstance = new IrEnumEntry(true);
        defaultInstance.initFields();
    }

    private final ByteString unknownFields;
    private int bitField0_;
    private IrDeclarationBase base_;
    private int name_;
    private int initializer_;
    private IrClass correspondingClass_;
    private byte memoizedIsInitialized = -1;
    private int memoizedSerializedSize = -1;

    // Use IrEnumEntry.newBuilder() to construct.
    private IrEnumEntry(GeneratedMessageLite.Builder builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
    }

    private IrEnumEntry(boolean noInit) {
        this.unknownFields = ByteString.EMPTY;
    }

    private IrEnumEntry(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        ByteString.Output unknownFieldsOutput =
                ByteString.newOutput();
        CodedOutputStream unknownFieldsCodedOutput =
                CodedOutputStream.newInstance(
                        unknownFieldsOutput, 1);
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 10: {
                        IrDeclarationBase.Builder subBuilder = null;
                        if (((bitField0_ & 0x00000001) == 0x00000001)) {
                            subBuilder = base_.toBuilder();
                        }
                        base_ = input.readMessage(IrDeclarationBase.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom(base_);
                            base_ = subBuilder.buildPartial();
                        }
                        bitField0_ |= 0x00000001;
                        break;
                    }
                    case 16: {
                        bitField0_ |= 0x00000002;
                        name_ = input.readInt32();
                        break;
                    }
                    case 24: {
                        bitField0_ |= 0x00000004;
                        initializer_ = input.readInt32();
                        break;
                    }
                    case 34: {
                        IrClass.Builder subBuilder = null;
                        if (((bitField0_ & 0x00000008) == 0x00000008)) {
                            subBuilder = correspondingClass_.toBuilder();
                        }
                        correspondingClass_ = input.readMessage(IrClass.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom(correspondingClass_);
                            correspondingClass_ = subBuilder.buildPartial();
                        }
                        bitField0_ |= 0x00000008;
                        break;
                    }
                }
            }
        } catch (InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (IOException e) {
            throw new InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this);
        } finally {
            try {
                unknownFieldsCodedOutput.flush();
            } catch (IOException e) {
                // Should not happen
            } finally {
                unknownFields = unknownFieldsOutput.toByteString();
            }
            makeExtensionsImmutable();
        }
    }

    public static IrEnumEntry getDefaultInstance() {
        return defaultInstance;
    }

    public static IrEnumEntry parseFrom(
            ByteString data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrEnumEntry parseFrom(
            ByteString data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrEnumEntry parseFrom(byte[] data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrEnumEntry parseFrom(
            byte[] data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrEnumEntry parseFrom(InputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrEnumEntry parseFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static IrEnumEntry parseDelimitedFrom(InputStream input)
            throws IOException {
        return PARSER.parseDelimitedFrom(input);
    }

    public static IrEnumEntry parseDelimitedFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }

    public static IrEnumEntry parseFrom(
            CodedInputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrEnumEntry parseFrom(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() {
        return Builder.create();
    }

    public static Builder newBuilder(IrEnumEntry prototype) {
        return newBuilder().mergeFrom(prototype);
    }

    @Override
    public IrEnumEntry getDefaultInstanceForType() {
        return defaultInstance;
    }

    @Override
    public Parser<IrEnumEntry> getParserForType() {
        return PARSER;
    }

    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
     */
    @Override
    public boolean hasBase() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
    }

    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
     */
    @Override
    public IrDeclarationBase getBase() {
        return base_;
    }

    /**
     * <code>required int32 name = 2;</code>
     */
    @Override
    public boolean hasName() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
    }

    /**
     * <code>required int32 name = 2;</code>
     */
    @Override
    public int getName() {
        return name_;
    }

    /**
     * <code>optional int32 initializer = 3;</code>
     */
    @Override
    public boolean hasInitializer() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
    }

    /**
     * <code>optional int32 initializer = 3;</code>
     */
    @Override
    public int getInitializer() {
        return initializer_;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
     */
    @Override
    public boolean hasCorrespondingClass() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
     */
    @Override
    public IrClass getCorrespondingClass() {
        return correspondingClass_;
    }

    private void initFields() {
        base_ = IrDeclarationBase.getDefaultInstance();
        name_ = 0;
        initializer_ = 0;
        correspondingClass_ = IrClass.getDefaultInstance();
    }

    @Override
    public boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasBase()) {
            memoizedIsInitialized = 0;
            return false;
        }
        if (!hasName()) {
            memoizedIsInitialized = 0;
            return false;
        }
        if (!getBase().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
        }
        if (hasCorrespondingClass()) {
            if (!getCorrespondingClass().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        memoizedIsInitialized = 1;
        return true;
    }

    @Override
    public void writeTo(CodedOutputStream output)
            throws IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            output.writeMessage(1, base_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            output.writeInt32(2, name_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            output.writeInt32(3, initializer_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
            output.writeMessage(4, correspondingClass_);
        }
        output.writeRawBytes(unknownFields);
    }

    @Override
    public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += CodedOutputStream
                    .computeMessageSize(1, base_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += CodedOutputStream
                    .computeInt32Size(2, name_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            size += CodedOutputStream
                    .computeInt32Size(3, initializer_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
            size += CodedOutputStream
                    .computeMessageSize(4, correspondingClass_);
        }
        size += unknownFields.size();
        memoizedSerializedSize = size;
        return size;
    }

    @Override
    protected Object writeReplace()
            throws ObjectStreamException {
        return super.writeReplace();
    }

    @Override
    public Builder newBuilderForType() {
        return newBuilder();
    }

    @Override
    public Builder toBuilder() {
        return newBuilder(this);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry}
     */
    public static final class Builder extends
            GeneratedMessageLite.Builder<
                    IrEnumEntry, Builder>
            implements
            // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry)
            IrEnumEntryOrBuilder {
        private int bitField0_;
        private IrDeclarationBase base_ = IrDeclarationBase.getDefaultInstance();
        private int name_;
        private int initializer_;
        private IrClass correspondingClass_ = IrClass.getDefaultInstance();

        // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private static Builder create() {
            return new Builder();
        }

        private void maybeForceBuilderInitialization() {
        }

        @Override
        public Builder clear() {
            super.clear();
            base_ = IrDeclarationBase.getDefaultInstance();
            bitField0_ &= ~0x00000001;
            name_ = 0;
            bitField0_ &= ~0x00000002;
            initializer_ = 0;
            bitField0_ &= ~0x00000004;
            correspondingClass_ = IrClass.getDefaultInstance();
            bitField0_ &= ~0x00000008;
            return this;
        }

        @Override
        public Builder clone() {
            return create().mergeFrom(buildPartial());
        }

        @Override
        public IrEnumEntry getDefaultInstanceForType() {
            return getDefaultInstance();
        }

        @Override
        public IrEnumEntry build() {
            IrEnumEntry result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        @Override
        public IrEnumEntry buildPartial() {
            IrEnumEntry result = new IrEnumEntry(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                to_bitField0_ |= 0x00000001;
            }
            result.base_ = base_;
            if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                to_bitField0_ |= 0x00000002;
            }
            result.name_ = name_;
            if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
                to_bitField0_ |= 0x00000004;
            }
            result.initializer_ = initializer_;
            if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                to_bitField0_ |= 0x00000008;
            }
            result.correspondingClass_ = correspondingClass_;
            result.bitField0_ = to_bitField0_;
            return result;
        }

        @Override
        public Builder mergeFrom(IrEnumEntry other) {
            if (other == getDefaultInstance())
                return this;
            if (other.hasBase()) {
                mergeBase(other.getBase());
            }
            if (other.hasName()) {
                setName(other.getName());
            }
            if (other.hasInitializer()) {
                setInitializer(other.getInitializer());
            }
            if (other.hasCorrespondingClass()) {
                mergeCorrespondingClass(other.getCorrespondingClass());
            }
            setUnknownFields(
                    getUnknownFields().concat(other.unknownFields));
            return this;
        }

        @Override
        public boolean isInitialized() {
            if (!hasBase()) {

                return false;
            }
            if (!hasName()) {

                return false;
            }
            if (!getBase().isInitialized()) {

                return false;
            }
            if (hasCorrespondingClass()) {
                if (!getCorrespondingClass().isInitialized()) {

                    return false;
                }
            }
            return true;
        }

        @Override
        public Builder mergeFrom(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws IOException {
            IrEnumEntry parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (InvalidProtocolBufferException e) {
                parsedMessage = (IrEnumEntry) e.getUnfinishedMessage();
                throw e;
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
         */
        @Override
        public boolean hasBase() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
         */
        @Override
        public IrDeclarationBase getBase() {
            return base_;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
         */
        public Builder setBase(IrDeclarationBase value) {
            if (value == null) {
                throw new NullPointerException();
            }
            base_ = value;

            bitField0_ |= 0x00000001;
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
         */
        public Builder setBase(
                IrDeclarationBase.Builder builderForValue) {
            base_ = builderForValue.build();

            bitField0_ |= 0x00000001;
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
         */
        public Builder mergeBase(IrDeclarationBase value) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                    base_ != IrDeclarationBase.getDefaultInstance()) {
                base_ =
                        IrDeclarationBase.newBuilder(base_).mergeFrom(value).buildPartial();
            } else {
                base_ = value;
            }

            bitField0_ |= 0x00000001;
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
         */
        public Builder clearBase() {
            base_ = IrDeclarationBase.getDefaultInstance();

            bitField0_ &= ~0x00000001;
            return this;
        }

        /**
         * <code>required int32 name = 2;</code>
         */
        @Override
        public boolean hasName() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>required int32 name = 2;</code>
         */
        @Override
        public int getName() {
            return name_;
        }

        /**
         * <code>required int32 name = 2;</code>
         */
        public Builder setName(int value) {
            bitField0_ |= 0x00000002;
            name_ = value;

            return this;
        }

        /**
         * <code>required int32 name = 2;</code>
         */
        public Builder clearName() {
            bitField0_ &= ~0x00000002;
            name_ = 0;

            return this;
        }

        /**
         * <code>optional int32 initializer = 3;</code>
         */
        @Override
        public boolean hasInitializer() {
            return ((bitField0_ & 0x00000004) == 0x00000004);
        }

        /**
         * <code>optional int32 initializer = 3;</code>
         */
        @Override
        public int getInitializer() {
            return initializer_;
        }

        /**
         * <code>optional int32 initializer = 3;</code>
         */
        public Builder setInitializer(int value) {
            bitField0_ |= 0x00000004;
            initializer_ = value;

            return this;
        }

        /**
         * <code>optional int32 initializer = 3;</code>
         */
        public Builder clearInitializer() {
            bitField0_ &= ~0x00000004;
            initializer_ = 0;

            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
         */
        @Override
        public boolean hasCorrespondingClass() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
         */
        @Override
        public IrClass getCorrespondingClass() {
            return correspondingClass_;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
         */
        public Builder setCorrespondingClass(IrClass value) {
            if (value == null) {
                throw new NullPointerException();
            }
            correspondingClass_ = value;

            bitField0_ |= 0x00000008;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
         */
        public Builder setCorrespondingClass(
                IrClass.Builder builderForValue) {
            correspondingClass_ = builderForValue.build();

            bitField0_ |= 0x00000008;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
         */
        public Builder mergeCorrespondingClass(IrClass value) {
            if (((bitField0_ & 0x00000008) == 0x00000008) &&
                    correspondingClass_ != IrClass.getDefaultInstance()) {
                correspondingClass_ =
                        IrClass.newBuilder(correspondingClass_).mergeFrom(value).buildPartial();
            } else {
                correspondingClass_ = value;
            }

            bitField0_ |= 0x00000008;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrClass corresponding_class = 4;</code>
         */
        public Builder clearCorrespondingClass() {
            correspondingClass_ = IrClass.getDefaultInstance();

            bitField0_ &= ~0x00000008;
            return this;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrEnumEntry)
}
