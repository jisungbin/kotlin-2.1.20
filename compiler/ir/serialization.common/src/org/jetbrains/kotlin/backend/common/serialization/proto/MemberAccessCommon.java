// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

import org.jetbrains.kotlin.protobuf.AbstractParser;
import org.jetbrains.kotlin.protobuf.ByteString;
import org.jetbrains.kotlin.protobuf.CodedInputStream;
import org.jetbrains.kotlin.protobuf.CodedOutputStream;
import org.jetbrains.kotlin.protobuf.ExtensionRegistryLite;
import org.jetbrains.kotlin.protobuf.GeneratedMessageLite;
import org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException;
import org.jetbrains.kotlin.protobuf.Parser;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon}
 */
public final class MemberAccessCommon extends
        GeneratedMessageLite implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon)
        MemberAccessCommonOrBuilder {
    public static final int DISPATCH_RECEIVER_FIELD_NUMBER = 1;
    public static final int EXTENSION_RECEIVER_FIELD_NUMBER = 2;
    public static final int VALUE_ARGUMENT_FIELD_NUMBER = 3;
    public static final int TYPE_ARGUMENT_FIELD_NUMBER = 4;
    private static final MemberAccessCommon defaultInstance;
    private static final long serialVersionUID = 0L;
    public static Parser<MemberAccessCommon> PARSER =
            new AbstractParser<MemberAccessCommon>() {
                @Override
                public MemberAccessCommon parsePartialFrom(
                        CodedInputStream input,
                        ExtensionRegistryLite extensionRegistry)
                        throws InvalidProtocolBufferException {
                    return new MemberAccessCommon(input, extensionRegistry);
                }
            };

    static {
        defaultInstance = new MemberAccessCommon(true);
        defaultInstance.initFields();
    }

    private final ByteString unknownFields;
    private int bitField0_;
    private IrExpression dispatchReceiver_;
    private IrExpression extensionReceiver_;
    private List<NullableIrExpression> valueArgument_;
    private List<Integer> typeArgument_;
    private int typeArgumentMemoizedSerializedSize = -1;
    private byte memoizedIsInitialized = -1;
    private int memoizedSerializedSize = -1;

    // Use MemberAccessCommon.newBuilder() to construct.
    private MemberAccessCommon(GeneratedMessageLite.Builder builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
    }

    private MemberAccessCommon(boolean noInit) {
        this.unknownFields = ByteString.EMPTY;
    }
    private MemberAccessCommon(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        ByteString.Output unknownFieldsOutput =
                ByteString.newOutput();
        CodedOutputStream unknownFieldsCodedOutput =
                CodedOutputStream.newInstance(
                        unknownFieldsOutput, 1);
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 10: {
                        IrExpression.Builder subBuilder = null;
                        if (((bitField0_ & 0x00000001) == 0x00000001)) {
                            subBuilder = dispatchReceiver_.toBuilder();
                        }
                        dispatchReceiver_ = input.readMessage(IrExpression.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom(dispatchReceiver_);
                            dispatchReceiver_ = subBuilder.buildPartial();
                        }
                        bitField0_ |= 0x00000001;
                        break;
                    }
                    case 18: {
                        IrExpression.Builder subBuilder = null;
                        if (((bitField0_ & 0x00000002) == 0x00000002)) {
                            subBuilder = extensionReceiver_.toBuilder();
                        }
                        extensionReceiver_ = input.readMessage(IrExpression.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom(extensionReceiver_);
                            extensionReceiver_ = subBuilder.buildPartial();
                        }
                        bitField0_ |= 0x00000002;
                        break;
                    }
                    case 26: {
                        if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                            valueArgument_ = new ArrayList<NullableIrExpression>();
                            mutable_bitField0_ |= 0x00000004;
                        }
                        valueArgument_.add(input.readMessage(NullableIrExpression.PARSER, extensionRegistry));
                        break;
                    }
                    case 32: {
                        if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                            typeArgument_ = new ArrayList<Integer>();
                            mutable_bitField0_ |= 0x00000008;
                        }
                        typeArgument_.add(input.readInt32());
                        break;
                    }
                    case 34: {
                        int length = input.readRawVarint32();
                        int limit = input.pushLimit(length);
                        if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                            typeArgument_ = new ArrayList<Integer>();
                            mutable_bitField0_ |= 0x00000008;
                        }
                        while (input.getBytesUntilLimit() > 0) {
                            typeArgument_.add(input.readInt32());
                        }
                        input.popLimit(limit);
                        break;
                    }
                }
            }
        } catch (InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (IOException e) {
            throw new InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this);
        } finally {
            if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                valueArgument_ = Collections.unmodifiableList(valueArgument_);
            }
            if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                typeArgument_ = Collections.unmodifiableList(typeArgument_);
            }
            try {
                unknownFieldsCodedOutput.flush();
            } catch (IOException e) {
                // Should not happen
            } finally {
                unknownFields = unknownFieldsOutput.toByteString();
            }
            makeExtensionsImmutable();
        }
    }

    public static MemberAccessCommon getDefaultInstance() {
        return defaultInstance;
    }

    public static MemberAccessCommon parseFrom(
            ByteString data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static MemberAccessCommon parseFrom(
            ByteString data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static MemberAccessCommon parseFrom(byte[] data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static MemberAccessCommon parseFrom(
            byte[] data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static MemberAccessCommon parseFrom(InputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static MemberAccessCommon parseFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static MemberAccessCommon parseDelimitedFrom(InputStream input)
            throws IOException {
        return PARSER.parseDelimitedFrom(input);
    }

    public static MemberAccessCommon parseDelimitedFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }

    public static MemberAccessCommon parseFrom(
            CodedInputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static MemberAccessCommon parseFrom(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() {
        return Builder.create();
    }

    public static Builder newBuilder(MemberAccessCommon prototype) {
        return newBuilder().mergeFrom(prototype);
    }

    @Override
    public MemberAccessCommon getDefaultInstanceForType() {
        return defaultInstance;
    }

    @Override
    public Parser<MemberAccessCommon> getParserForType() {
        return PARSER;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression dispatch_receiver = 1;</code>
     */
    @Override
    public boolean hasDispatchReceiver() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression dispatch_receiver = 1;</code>
     */
    @Override
    public IrExpression getDispatchReceiver() {
        return dispatchReceiver_;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression extension_receiver = 2;</code>
     */
    @Override
    public boolean hasExtensionReceiver() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression extension_receiver = 2;</code>
     */
    @Override
    public IrExpression getExtensionReceiver() {
        return extensionReceiver_;
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression value_argument = 3;</code>
     */
    @Override
    public List<NullableIrExpression> getValueArgumentList() {
        return valueArgument_;
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression value_argument = 3;</code>
     */
    public List<? extends NullableIrExpressionOrBuilder>
    getValueArgumentOrBuilderList() {
        return valueArgument_;
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression value_argument = 3;</code>
     */
    @Override
    public int getValueArgumentCount() {
        return valueArgument_.size();
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression value_argument = 3;</code>
     */
    @Override
    public NullableIrExpression getValueArgument(int index) {
        return valueArgument_.get(index);
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression value_argument = 3;</code>
     */
    public NullableIrExpressionOrBuilder getValueArgumentOrBuilder(
            int index) {
        return valueArgument_.get(index);
    }

    /**
     * <code>repeated int32 type_argument = 4 [packed = true];</code>
     */
    @Override
    public List<Integer>
    getTypeArgumentList() {
        return typeArgument_;
    }

    /**
     * <code>repeated int32 type_argument = 4 [packed = true];</code>
     */
    @Override
    public int getTypeArgumentCount() {
        return typeArgument_.size();
    }

    /**
     * <code>repeated int32 type_argument = 4 [packed = true];</code>
     */
    @Override
    public int getTypeArgument(int index) {
        return typeArgument_.get(index);
    }

    private void initFields() {
        dispatchReceiver_ = IrExpression.getDefaultInstance();
        extensionReceiver_ = IrExpression.getDefaultInstance();
        valueArgument_ = Collections.emptyList();
        typeArgument_ = Collections.emptyList();
    }

    @Override
    public boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (hasDispatchReceiver()) {
            if (!getDispatchReceiver().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        if (hasExtensionReceiver()) {
            if (!getExtensionReceiver().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        for (int i = 0; i < getValueArgumentCount(); i++) {
            if (!getValueArgument(i).isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        memoizedIsInitialized = 1;
        return true;
    }

    @Override
    public void writeTo(CodedOutputStream output)
            throws IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            output.writeMessage(1, dispatchReceiver_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            output.writeMessage(2, extensionReceiver_);
        }
        for (int i = 0; i < valueArgument_.size(); i++) {
            output.writeMessage(3, valueArgument_.get(i));
        }
        if (getTypeArgumentList().size() > 0) {
            output.writeRawVarint32(34);
            output.writeRawVarint32(typeArgumentMemoizedSerializedSize);
        }
        for (int i = 0; i < typeArgument_.size(); i++) {
            output.writeInt32NoTag(typeArgument_.get(i));
        }
        output.writeRawBytes(unknownFields);
    }

    @Override
    public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += CodedOutputStream
                    .computeMessageSize(1, dispatchReceiver_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += CodedOutputStream
                    .computeMessageSize(2, extensionReceiver_);
        }
        for (int i = 0; i < valueArgument_.size(); i++) {
            size += CodedOutputStream
                    .computeMessageSize(3, valueArgument_.get(i));
        }
        {
            int dataSize = 0;
            for (int i = 0; i < typeArgument_.size(); i++) {
                dataSize += CodedOutputStream
                        .computeInt32SizeNoTag(typeArgument_.get(i));
            }
            size += dataSize;
            if (!getTypeArgumentList().isEmpty()) {
                size += 1;
                size += CodedOutputStream
                        .computeInt32SizeNoTag(dataSize);
            }
            typeArgumentMemoizedSerializedSize = dataSize;
        }
        size += unknownFields.size();
        memoizedSerializedSize = size;
        return size;
    }

    @Override
    protected Object writeReplace()
            throws ObjectStreamException {
        return super.writeReplace();
    }

    @Override
    public Builder newBuilderForType() {
        return newBuilder();
    }

    @Override
    public Builder toBuilder() {
        return newBuilder(this);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon}
     */
    public static final class Builder extends
            GeneratedMessageLite.Builder<
                    MemberAccessCommon, Builder>
            implements
            // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon)
            MemberAccessCommonOrBuilder {
        private int bitField0_;
        private IrExpression dispatchReceiver_ = IrExpression.getDefaultInstance();
        private IrExpression extensionReceiver_ = IrExpression.getDefaultInstance();
        private List<NullableIrExpression> valueArgument_ =
                Collections.emptyList();
        private List<Integer> typeArgument_ = Collections.emptyList();

        // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private static Builder create() {
            return new Builder();
        }

        private void maybeForceBuilderInitialization() {
        }

        @Override
        public Builder clear() {
            super.clear();
            dispatchReceiver_ = IrExpression.getDefaultInstance();
            bitField0_ &= ~0x00000001;
            extensionReceiver_ = IrExpression.getDefaultInstance();
            bitField0_ &= ~0x00000002;
            valueArgument_ = Collections.emptyList();
            bitField0_ &= ~0x00000004;
            typeArgument_ = Collections.emptyList();
            bitField0_ &= ~0x00000008;
            return this;
        }

        @Override
        public Builder clone() {
            return create().mergeFrom(buildPartial());
        }

        @Override
        public MemberAccessCommon getDefaultInstanceForType() {
            return getDefaultInstance();
        }

        @Override
        public MemberAccessCommon build() {
            MemberAccessCommon result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        @Override
        public MemberAccessCommon buildPartial() {
            MemberAccessCommon result = new MemberAccessCommon(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                to_bitField0_ |= 0x00000001;
            }
            result.dispatchReceiver_ = dispatchReceiver_;
            if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                to_bitField0_ |= 0x00000002;
            }
            result.extensionReceiver_ = extensionReceiver_;
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                valueArgument_ = Collections.unmodifiableList(valueArgument_);
                bitField0_ &= ~0x00000004;
            }
            result.valueArgument_ = valueArgument_;
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
                typeArgument_ = Collections.unmodifiableList(typeArgument_);
                bitField0_ &= ~0x00000008;
            }
            result.typeArgument_ = typeArgument_;
            result.bitField0_ = to_bitField0_;
            return result;
        }

        @Override
        public Builder mergeFrom(MemberAccessCommon other) {
            if (other == getDefaultInstance())
                return this;
            if (other.hasDispatchReceiver()) {
                mergeDispatchReceiver(other.getDispatchReceiver());
            }
            if (other.hasExtensionReceiver()) {
                mergeExtensionReceiver(other.getExtensionReceiver());
            }
            if (!other.valueArgument_.isEmpty()) {
                if (valueArgument_.isEmpty()) {
                    valueArgument_ = other.valueArgument_;
                    bitField0_ &= ~0x00000004;
                } else {
                    ensureValueArgumentIsMutable();
                    valueArgument_.addAll(other.valueArgument_);
                }

            }
            if (!other.typeArgument_.isEmpty()) {
                if (typeArgument_.isEmpty()) {
                    typeArgument_ = other.typeArgument_;
                    bitField0_ &= ~0x00000008;
                } else {
                    ensureTypeArgumentIsMutable();
                    typeArgument_.addAll(other.typeArgument_);
                }

            }
            setUnknownFields(
                    getUnknownFields().concat(other.unknownFields));
            return this;
        }

        @Override
        public boolean isInitialized() {
            if (hasDispatchReceiver()) {
                if (!getDispatchReceiver().isInitialized()) {

                    return false;
                }
            }
            if (hasExtensionReceiver()) {
                if (!getExtensionReceiver().isInitialized()) {

                    return false;
                }
            }
            for (int i = 0; i < getValueArgumentCount(); i++) {
                if (!getValueArgument(i).isInitialized()) {

                    return false;
                }
            }
            return true;
        }

        @Override
        public Builder mergeFrom(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws IOException {
            MemberAccessCommon parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (InvalidProtocolBufferException e) {
                parsedMessage = (MemberAccessCommon) e.getUnfinishedMessage();
                throw e;
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression dispatch_receiver = 1;</code>
         */
        @Override
        public boolean hasDispatchReceiver() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression dispatch_receiver = 1;</code>
         */
        @Override
        public IrExpression getDispatchReceiver() {
            return dispatchReceiver_;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression dispatch_receiver = 1;</code>
         */
        public Builder setDispatchReceiver(IrExpression value) {
            if (value == null) {
                throw new NullPointerException();
            }
            dispatchReceiver_ = value;

            bitField0_ |= 0x00000001;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression dispatch_receiver = 1;</code>
         */
        public Builder setDispatchReceiver(
                IrExpression.Builder builderForValue) {
            dispatchReceiver_ = builderForValue.build();

            bitField0_ |= 0x00000001;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression dispatch_receiver = 1;</code>
         */
        public Builder mergeDispatchReceiver(IrExpression value) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                    dispatchReceiver_ != IrExpression.getDefaultInstance()) {
                dispatchReceiver_ =
                        IrExpression.newBuilder(dispatchReceiver_).mergeFrom(value).buildPartial();
            } else {
                dispatchReceiver_ = value;
            }

            bitField0_ |= 0x00000001;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression dispatch_receiver = 1;</code>
         */
        public Builder clearDispatchReceiver() {
            dispatchReceiver_ = IrExpression.getDefaultInstance();

            bitField0_ &= ~0x00000001;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression extension_receiver = 2;</code>
         */
        @Override
        public boolean hasExtensionReceiver() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression extension_receiver = 2;</code>
         */
        @Override
        public IrExpression getExtensionReceiver() {
            return extensionReceiver_;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression extension_receiver = 2;</code>
         */
        public Builder setExtensionReceiver(IrExpression value) {
            if (value == null) {
                throw new NullPointerException();
            }
            extensionReceiver_ = value;

            bitField0_ |= 0x00000002;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression extension_receiver = 2;</code>
         */
        public Builder setExtensionReceiver(
                IrExpression.Builder builderForValue) {
            extensionReceiver_ = builderForValue.build();

            bitField0_ |= 0x00000002;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression extension_receiver = 2;</code>
         */
        public Builder mergeExtensionReceiver(IrExpression value) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                    extensionReceiver_ != IrExpression.getDefaultInstance()) {
                extensionReceiver_ =
                        IrExpression.newBuilder(extensionReceiver_).mergeFrom(value).buildPartial();
            } else {
                extensionReceiver_ = value;
            }

            bitField0_ |= 0x00000002;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression extension_receiver = 2;</code>
         */
        public Builder clearExtensionReceiver() {
            extensionReceiver_ = IrExpression.getDefaultInstance();

            bitField0_ &= ~0x00000002;
            return this;
        }

        private void ensureValueArgumentIsMutable() {
            if (!((bitField0_ & 0x00000004) == 0x00000004)) {
                valueArgument_ = new ArrayList<NullableIrExpression>(valueArgument_);
                bitField0_ |= 0x00000004;
            }
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression value_argument = 3;</code>
         */
        @Override
        public List<NullableIrExpression> getValueArgumentList() {
            return Collections.unmodifiableList(valueArgument_);
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression value_argument = 3;</code>
         */
        @Override
        public int getValueArgumentCount() {
            return valueArgument_.size();
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression value_argument = 3;</code>
         */
        @Override
        public NullableIrExpression getValueArgument(int index) {
            return valueArgument_.get(index);
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression value_argument = 3;</code>
         */
        public Builder setValueArgument(
                int index, NullableIrExpression value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureValueArgumentIsMutable();
            valueArgument_.set(index, value);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression value_argument = 3;</code>
         */
        public Builder setValueArgument(
                int index, NullableIrExpression.Builder builderForValue) {
            ensureValueArgumentIsMutable();
            valueArgument_.set(index, builderForValue.build());

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression value_argument = 3;</code>
         */
        public Builder addValueArgument(NullableIrExpression value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureValueArgumentIsMutable();
            valueArgument_.add(value);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression value_argument = 3;</code>
         */
        public Builder addValueArgument(
                int index, NullableIrExpression value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureValueArgumentIsMutable();
            valueArgument_.add(index, value);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression value_argument = 3;</code>
         */
        public Builder addValueArgument(
                NullableIrExpression.Builder builderForValue) {
            ensureValueArgumentIsMutable();
            valueArgument_.add(builderForValue.build());

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression value_argument = 3;</code>
         */
        public Builder addValueArgument(
                int index, NullableIrExpression.Builder builderForValue) {
            ensureValueArgumentIsMutable();
            valueArgument_.add(index, builderForValue.build());

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression value_argument = 3;</code>
         */
        public Builder addAllValueArgument(
                Iterable<? extends NullableIrExpression> values) {
            ensureValueArgumentIsMutable();
            addAll(
                    values, valueArgument_);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression value_argument = 3;</code>
         */
        public Builder clearValueArgument() {
            valueArgument_ = Collections.emptyList();
            bitField0_ &= ~0x00000004;

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.NullableIrExpression value_argument = 3;</code>
         */
        public Builder removeValueArgument(int index) {
            ensureValueArgumentIsMutable();
            valueArgument_.remove(index);

            return this;
        }

        private void ensureTypeArgumentIsMutable() {
            if (!((bitField0_ & 0x00000008) == 0x00000008)) {
                typeArgument_ = new ArrayList<Integer>(typeArgument_);
                bitField0_ |= 0x00000008;
            }
        }

        /**
         * <code>repeated int32 type_argument = 4 [packed = true];</code>
         */
        @Override
        public List<Integer>
        getTypeArgumentList() {
            return Collections.unmodifiableList(typeArgument_);
        }

        /**
         * <code>repeated int32 type_argument = 4 [packed = true];</code>
         */
        @Override
        public int getTypeArgumentCount() {
            return typeArgument_.size();
        }

        /**
         * <code>repeated int32 type_argument = 4 [packed = true];</code>
         */
        @Override
        public int getTypeArgument(int index) {
            return typeArgument_.get(index);
        }

        /**
         * <code>repeated int32 type_argument = 4 [packed = true];</code>
         */
        public Builder setTypeArgument(
                int index, int value) {
            ensureTypeArgumentIsMutable();
            typeArgument_.set(index, value);

            return this;
        }

        /**
         * <code>repeated int32 type_argument = 4 [packed = true];</code>
         */
        public Builder addTypeArgument(int value) {
            ensureTypeArgumentIsMutable();
            typeArgument_.add(value);

            return this;
        }

        /**
         * <code>repeated int32 type_argument = 4 [packed = true];</code>
         */
        public Builder addAllTypeArgument(
                Iterable<? extends Integer> values) {
            ensureTypeArgumentIsMutable();
            addAll(
                    values, typeArgument_);

            return this;
        }

        /**
         * <code>repeated int32 type_argument = 4 [packed = true];</code>
         */
        public Builder clearTypeArgument() {
            typeArgument_ = Collections.emptyList();
            bitField0_ &= ~0x00000008;

            return this;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.MemberAccessCommon)
}
