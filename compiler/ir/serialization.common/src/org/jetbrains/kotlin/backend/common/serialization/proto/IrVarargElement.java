// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

import org.jetbrains.kotlin.protobuf.AbstractParser;
import org.jetbrains.kotlin.protobuf.ByteString;
import org.jetbrains.kotlin.protobuf.CodedInputStream;
import org.jetbrains.kotlin.protobuf.CodedOutputStream;
import org.jetbrains.kotlin.protobuf.ExtensionRegistryLite;
import org.jetbrains.kotlin.protobuf.GeneratedMessageLite;
import org.jetbrains.kotlin.protobuf.Internal;
import org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException;
import org.jetbrains.kotlin.protobuf.Parser;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamException;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement}
 */
public final class IrVarargElement extends
        GeneratedMessageLite implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement)
        IrVarargElementOrBuilder {
    public static final int EXPRESSION_FIELD_NUMBER = 1;
    public static final int SPREAD_ELEMENT_FIELD_NUMBER = 2;
    private static final IrVarargElement defaultInstance;
    private static final long serialVersionUID = 0L;
    public static Parser<IrVarargElement> PARSER =
            new AbstractParser<IrVarargElement>() {
                @Override
                public IrVarargElement parsePartialFrom(
                        CodedInputStream input,
                        ExtensionRegistryLite extensionRegistry)
                        throws InvalidProtocolBufferException {
                    return new IrVarargElement(input, extensionRegistry);
                }
            };

    static {
        defaultInstance = new IrVarargElement(true);
        defaultInstance.initFields();
    }

    private final ByteString unknownFields;
    private int bitField0_;
    private int varargElementCase_ = 0;
    private Object varargElement_;
    private byte memoizedIsInitialized = -1;
    private int memoizedSerializedSize = -1;

    // Use IrVarargElement.newBuilder() to construct.
    private IrVarargElement(GeneratedMessageLite.Builder builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
    }

    private IrVarargElement(boolean noInit) {
        this.unknownFields = ByteString.EMPTY;
    }

    private IrVarargElement(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        ByteString.Output unknownFieldsOutput =
                ByteString.newOutput();
        CodedOutputStream unknownFieldsCodedOutput =
                CodedOutputStream.newInstance(
                        unknownFieldsOutput, 1);
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 10: {
                        IrExpression.Builder subBuilder = null;
                        if (varargElementCase_ == 1) {
                            subBuilder = ((IrExpression) varargElement_).toBuilder();
                        }
                        varargElement_ = input.readMessage(IrExpression.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom((IrExpression) varargElement_);
                            varargElement_ = subBuilder.buildPartial();
                        }
                        varargElementCase_ = 1;
                        break;
                    }
                    case 18: {
                        IrSpreadElement.Builder subBuilder = null;
                        if (varargElementCase_ == 2) {
                            subBuilder = ((IrSpreadElement) varargElement_).toBuilder();
                        }
                        varargElement_ = input.readMessage(IrSpreadElement.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom((IrSpreadElement) varargElement_);
                            varargElement_ = subBuilder.buildPartial();
                        }
                        varargElementCase_ = 2;
                        break;
                    }
                }
            }
        } catch (InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (IOException e) {
            throw new InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this);
        } finally {
            try {
                unknownFieldsCodedOutput.flush();
            } catch (IOException e) {
                // Should not happen
            } finally {
                unknownFields = unknownFieldsOutput.toByteString();
            }
            makeExtensionsImmutable();
        }
    }

    public static IrVarargElement getDefaultInstance() {
        return defaultInstance;
    }

    public static IrVarargElement parseFrom(
            ByteString data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrVarargElement parseFrom(
            ByteString data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrVarargElement parseFrom(byte[] data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrVarargElement parseFrom(
            byte[] data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrVarargElement parseFrom(InputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrVarargElement parseFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static IrVarargElement parseDelimitedFrom(InputStream input)
            throws IOException {
        return PARSER.parseDelimitedFrom(input);
    }

    public static IrVarargElement parseDelimitedFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }

    public static IrVarargElement parseFrom(
            CodedInputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrVarargElement parseFrom(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() {
        return Builder.create();
    }

    public static Builder newBuilder(IrVarargElement prototype) {
        return newBuilder().mergeFrom(prototype);
    }

    @Override
    public IrVarargElement getDefaultInstanceForType() {
        return defaultInstance;
    }

    @Override
    public Parser<IrVarargElement> getParserForType() {
        return PARSER;
    }

    public VarargElementCase
    getVarargElementCase() {
        return VarargElementCase.valueOf(
                varargElementCase_);
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 1;</code>
     */
    @Override
    public boolean hasExpression() {
        return varargElementCase_ == 1;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 1;</code>
     */
    @Override
    public IrExpression getExpression() {
        if (varargElementCase_ == 1) {
            return (IrExpression) varargElement_;
        }
        return IrExpression.getDefaultInstance();
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement spread_element = 2;</code>
     */
    @Override
    public boolean hasSpreadElement() {
        return varargElementCase_ == 2;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement spread_element = 2;</code>
     */
    @Override
    public IrSpreadElement getSpreadElement() {
        if (varargElementCase_ == 2) {
            return (IrSpreadElement) varargElement_;
        }
        return IrSpreadElement.getDefaultInstance();
    }

    private void initFields() {
    }

    @Override
    public boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (hasExpression()) {
            if (!getExpression().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        if (hasSpreadElement()) {
            if (!getSpreadElement().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        memoizedIsInitialized = 1;
        return true;
    }

    @Override
    public void writeTo(CodedOutputStream output)
            throws IOException {
        getSerializedSize();
        if (varargElementCase_ == 1) {
            output.writeMessage(1, (IrExpression) varargElement_);
        }
        if (varargElementCase_ == 2) {
            output.writeMessage(2, (IrSpreadElement) varargElement_);
        }
        output.writeRawBytes(unknownFields);
    }

    @Override
    public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (varargElementCase_ == 1) {
            size += CodedOutputStream
                    .computeMessageSize(1, (IrExpression) varargElement_);
        }
        if (varargElementCase_ == 2) {
            size += CodedOutputStream
                    .computeMessageSize(2, (IrSpreadElement) varargElement_);
        }
        size += unknownFields.size();
        memoizedSerializedSize = size;
        return size;
    }

    @Override
    protected Object writeReplace()
            throws ObjectStreamException {
        return super.writeReplace();
    }

    @Override
    public Builder newBuilderForType() {
        return newBuilder();
    }

    @Override
    public Builder toBuilder() {
        return newBuilder(this);
    }

    public enum VarargElementCase
            implements Internal.EnumLite {
        EXPRESSION(1),
        SPREAD_ELEMENT(2),
        VARARGELEMENT_NOT_SET(0);
        private int value = 0;

        VarargElementCase(int value) {
            this.value = value;
        }

        public static VarargElementCase valueOf(int value) {
            switch (value) {
                case 1:
                    return EXPRESSION;
                case 2:
                    return SPREAD_ELEMENT;
                case 0:
                    return VARARGELEMENT_NOT_SET;
                default:
                    throw new IllegalArgumentException(
                            "Value is undefined for this oneof enum.");
            }
        }

        @Override
        public int getNumber() {
            return this.value;
        }
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement}
     */
    public static final class Builder extends
            GeneratedMessageLite.Builder<
                    IrVarargElement, Builder>
            implements
            // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement)
            IrVarargElementOrBuilder {
        private int varargElementCase_ = 0;
        private Object varargElement_;
        private int bitField0_;

        // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private static Builder create() {
            return new Builder();
        }

        private void maybeForceBuilderInitialization() {
        }

        @Override
        public Builder clear() {
            super.clear();
            varargElementCase_ = 0;
            varargElement_ = null;
            return this;
        }

        @Override
        public Builder clone() {
            return create().mergeFrom(buildPartial());
        }

        @Override
        public IrVarargElement getDefaultInstanceForType() {
            return getDefaultInstance();
        }

        @Override
        public IrVarargElement build() {
            IrVarargElement result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        @Override
        public IrVarargElement buildPartial() {
            IrVarargElement result = new IrVarargElement(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (varargElementCase_ == 1) {
                result.varargElement_ = varargElement_;
            }
            if (varargElementCase_ == 2) {
                result.varargElement_ = varargElement_;
            }
            result.bitField0_ = to_bitField0_;
            result.varargElementCase_ = varargElementCase_;
            return result;
        }

        @Override
        public Builder mergeFrom(IrVarargElement other) {
            if (other == getDefaultInstance())
                return this;
            switch (other.getVarargElementCase()) {
                case EXPRESSION: {
                    mergeExpression(other.getExpression());
                    break;
                }
                case SPREAD_ELEMENT: {
                    mergeSpreadElement(other.getSpreadElement());
                    break;
                }
                case VARARGELEMENT_NOT_SET: {
                    break;
                }
            }
            setUnknownFields(
                    getUnknownFields().concat(other.unknownFields));
            return this;
        }

        @Override
        public boolean isInitialized() {
            if (hasExpression()) {
                if (!getExpression().isInitialized()) {

                    return false;
                }
            }
            if (hasSpreadElement()) {
                if (!getSpreadElement().isInitialized()) {

                    return false;
                }
            }
            return true;
        }

        @Override
        public Builder mergeFrom(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws IOException {
            IrVarargElement parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (InvalidProtocolBufferException e) {
                parsedMessage = (IrVarargElement) e.getUnfinishedMessage();
                throw e;
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        public VarargElementCase
        getVarargElementCase() {
            return VarargElementCase.valueOf(
                    varargElementCase_);
        }

        public Builder clearVarargElement() {
            varargElementCase_ = 0;
            varargElement_ = null;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 1;</code>
         */
        @Override
        public boolean hasExpression() {
            return varargElementCase_ == 1;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 1;</code>
         */
        @Override
        public IrExpression getExpression() {
            if (varargElementCase_ == 1) {
                return (IrExpression) varargElement_;
            }
            return IrExpression.getDefaultInstance();
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 1;</code>
         */
        public Builder setExpression(IrExpression value) {
            if (value == null) {
                throw new NullPointerException();
            }
            varargElement_ = value;

            varargElementCase_ = 1;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 1;</code>
         */
        public Builder setExpression(
                IrExpression.Builder builderForValue) {
            varargElement_ = builderForValue.build();

            varargElementCase_ = 1;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 1;</code>
         */
        public Builder mergeExpression(IrExpression value) {
            if (varargElementCase_ == 1 &&
                    varargElement_ != IrExpression.getDefaultInstance()) {
                varargElement_ = IrExpression.newBuilder((IrExpression) varargElement_)
                        .mergeFrom(value).buildPartial();
            } else {
                varargElement_ = value;
            }

            varargElementCase_ = 1;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 1;</code>
         */
        public Builder clearExpression() {
            if (varargElementCase_ == 1) {
                varargElementCase_ = 0;
                varargElement_ = null;

            }
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement spread_element = 2;</code>
         */
        @Override
        public boolean hasSpreadElement() {
            return varargElementCase_ == 2;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement spread_element = 2;</code>
         */
        @Override
        public IrSpreadElement getSpreadElement() {
            if (varargElementCase_ == 2) {
                return (IrSpreadElement) varargElement_;
            }
            return IrSpreadElement.getDefaultInstance();
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement spread_element = 2;</code>
         */
        public Builder setSpreadElement(IrSpreadElement value) {
            if (value == null) {
                throw new NullPointerException();
            }
            varargElement_ = value;

            varargElementCase_ = 2;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement spread_element = 2;</code>
         */
        public Builder setSpreadElement(
                IrSpreadElement.Builder builderForValue) {
            varargElement_ = builderForValue.build();

            varargElementCase_ = 2;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement spread_element = 2;</code>
         */
        public Builder mergeSpreadElement(IrSpreadElement value) {
            if (varargElementCase_ == 2 &&
                    varargElement_ != IrSpreadElement.getDefaultInstance()) {
                varargElement_ = IrSpreadElement.newBuilder((IrSpreadElement) varargElement_)
                        .mergeFrom(value).buildPartial();
            } else {
                varargElement_ = value;
            }

            varargElementCase_ = 2;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrSpreadElement spread_element = 2;</code>
         */
        public Builder clearSpreadElement() {
            if (varargElementCase_ == 2) {
                varargElementCase_ = 0;
                varargElement_ = null;

            }
            return this;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrVarargElement)
}
