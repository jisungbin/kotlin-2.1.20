// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.common/src/KotlinIr.proto

package org.jetbrains.kotlin.backend.common.serialization.proto;

import org.jetbrains.kotlin.protobuf.AbstractParser;
import org.jetbrains.kotlin.protobuf.ByteString;
import org.jetbrains.kotlin.protobuf.CodedInputStream;
import org.jetbrains.kotlin.protobuf.CodedOutputStream;
import org.jetbrains.kotlin.protobuf.ExtensionRegistryLite;
import org.jetbrains.kotlin.protobuf.GeneratedMessageLite;
import org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException;
import org.jetbrains.kotlin.protobuf.Parser;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase}
 */
public final class IrFunctionBase extends
        GeneratedMessageLite implements
        // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase)
        IrFunctionBaseOrBuilder {
    public static final int BASE_FIELD_NUMBER = 1;
    public static final int NAME_TYPE_FIELD_NUMBER = 2;
    public static final int TYPE_PARAMETER_FIELD_NUMBER = 3;
    public static final int DISPATCH_RECEIVER_FIELD_NUMBER = 4;
    public static final int EXTENSION_RECEIVER_FIELD_NUMBER = 5;
    public static final int CONTEXT_RECEIVER_PARAMETERS_COUNT_FIELD_NUMBER = 8;
    public static final int VALUE_PARAMETER_FIELD_NUMBER = 6;
    public static final int BODY_FIELD_NUMBER = 7;
    private static final IrFunctionBase defaultInstance;
    private static final long serialVersionUID = 0L;
    public static Parser<IrFunctionBase> PARSER =
            new AbstractParser<IrFunctionBase>() {
                @Override
                public IrFunctionBase parsePartialFrom(
                        CodedInputStream input,
                        ExtensionRegistryLite extensionRegistry)
                        throws InvalidProtocolBufferException {
                    return new IrFunctionBase(input, extensionRegistry);
                }
            };

    static {
        defaultInstance = new IrFunctionBase(true);
        defaultInstance.initFields();
    }

    private final ByteString unknownFields;
    private int bitField0_;
    private IrDeclarationBase base_;
    private long nameType_;
    private List<IrTypeParameter> typeParameter_;
    private IrValueParameter dispatchReceiver_;
    private IrValueParameter extensionReceiver_;
    private int contextReceiverParametersCount_;
    private List<IrValueParameter> valueParameter_;
    private int body_;
    private byte memoizedIsInitialized = -1;
    private int memoizedSerializedSize = -1;

    // Use IrFunctionBase.newBuilder() to construct.
    private IrFunctionBase(GeneratedMessageLite.Builder builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
    }

    private IrFunctionBase(boolean noInit) {
        this.unknownFields = ByteString.EMPTY;
    }
    private IrFunctionBase(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        ByteString.Output unknownFieldsOutput =
                ByteString.newOutput();
        CodedOutputStream unknownFieldsCodedOutput =
                CodedOutputStream.newInstance(
                        unknownFieldsOutput, 1);
        try {
            boolean done = false;
            while (!done) {
                int tag = input.readTag();
                switch (tag) {
                    case 0:
                        done = true;
                        break;
                    default: {
                        if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                extensionRegistry, tag)) {
                            done = true;
                        }
                        break;
                    }
                    case 10: {
                        IrDeclarationBase.Builder subBuilder = null;
                        if (((bitField0_ & 0x00000001) == 0x00000001)) {
                            subBuilder = base_.toBuilder();
                        }
                        base_ = input.readMessage(IrDeclarationBase.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom(base_);
                            base_ = subBuilder.buildPartial();
                        }
                        bitField0_ |= 0x00000001;
                        break;
                    }
                    case 16: {
                        bitField0_ |= 0x00000002;
                        nameType_ = input.readInt64();
                        break;
                    }
                    case 26: {
                        if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                            typeParameter_ = new ArrayList<IrTypeParameter>();
                            mutable_bitField0_ |= 0x00000004;
                        }
                        typeParameter_.add(input.readMessage(IrTypeParameter.PARSER, extensionRegistry));
                        break;
                    }
                    case 34: {
                        IrValueParameter.Builder subBuilder = null;
                        if (((bitField0_ & 0x00000004) == 0x00000004)) {
                            subBuilder = dispatchReceiver_.toBuilder();
                        }
                        dispatchReceiver_ = input.readMessage(IrValueParameter.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom(dispatchReceiver_);
                            dispatchReceiver_ = subBuilder.buildPartial();
                        }
                        bitField0_ |= 0x00000004;
                        break;
                    }
                    case 42: {
                        IrValueParameter.Builder subBuilder = null;
                        if (((bitField0_ & 0x00000008) == 0x00000008)) {
                            subBuilder = extensionReceiver_.toBuilder();
                        }
                        extensionReceiver_ = input.readMessage(IrValueParameter.PARSER, extensionRegistry);
                        if (subBuilder != null) {
                            subBuilder.mergeFrom(extensionReceiver_);
                            extensionReceiver_ = subBuilder.buildPartial();
                        }
                        bitField0_ |= 0x00000008;
                        break;
                    }
                    case 50: {
                        if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                            valueParameter_ = new ArrayList<IrValueParameter>();
                            mutable_bitField0_ |= 0x00000040;
                        }
                        valueParameter_.add(input.readMessage(IrValueParameter.PARSER, extensionRegistry));
                        break;
                    }
                    case 56: {
                        bitField0_ |= 0x00000020;
                        body_ = input.readInt32();
                        break;
                    }
                    case 64: {
                        bitField0_ |= 0x00000010;
                        contextReceiverParametersCount_ = input.readInt32();
                        break;
                    }
                }
            }
        } catch (InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
        } catch (IOException e) {
            throw new InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this);
        } finally {
            if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                typeParameter_ = Collections.unmodifiableList(typeParameter_);
            }
            if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                valueParameter_ = Collections.unmodifiableList(valueParameter_);
            }
            try {
                unknownFieldsCodedOutput.flush();
            } catch (IOException e) {
                // Should not happen
            } finally {
                unknownFields = unknownFieldsOutput.toByteString();
            }
            makeExtensionsImmutable();
        }
    }

    public static IrFunctionBase getDefaultInstance() {
        return defaultInstance;
    }

    public static IrFunctionBase parseFrom(
            ByteString data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrFunctionBase parseFrom(
            ByteString data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrFunctionBase parseFrom(byte[] data)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static IrFunctionBase parseFrom(
            byte[] data,
            ExtensionRegistryLite extensionRegistry)
            throws InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static IrFunctionBase parseFrom(InputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrFunctionBase parseFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static IrFunctionBase parseDelimitedFrom(InputStream input)
            throws IOException {
        return PARSER.parseDelimitedFrom(input);
    }

    public static IrFunctionBase parseDelimitedFrom(
            InputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }

    public static IrFunctionBase parseFrom(
            CodedInputStream input)
            throws IOException {
        return PARSER.parseFrom(input);
    }

    public static IrFunctionBase parseFrom(
            CodedInputStream input,
            ExtensionRegistryLite extensionRegistry)
            throws IOException {
        return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() {
        return Builder.create();
    }

    public static Builder newBuilder(IrFunctionBase prototype) {
        return newBuilder().mergeFrom(prototype);
    }

    @Override
    public IrFunctionBase getDefaultInstanceForType() {
        return defaultInstance;
    }

    @Override
    public Parser<IrFunctionBase> getParserForType() {
        return PARSER;
    }

    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
     */
    @Override
    public boolean hasBase() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
    }

    /**
     * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
     */
    @Override
    public IrDeclarationBase getBase() {
        return base_;
    }

    /**
     * <code>required int64 name_type = 2;</code>
     */
    @Override
    public boolean hasNameType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
    }

    /**
     * <code>required int64 name_type = 2;</code>
     */
    @Override
    public long getNameType() {
        return nameType_;
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 3;</code>
     */
    @Override
    public List<IrTypeParameter> getTypeParameterList() {
        return typeParameter_;
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 3;</code>
     */
    public List<? extends IrTypeParameterOrBuilder>
    getTypeParameterOrBuilderList() {
        return typeParameter_;
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 3;</code>
     */
    @Override
    public int getTypeParameterCount() {
        return typeParameter_.size();
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 3;</code>
     */
    @Override
    public IrTypeParameter getTypeParameter(int index) {
        return typeParameter_.get(index);
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 3;</code>
     */
    public IrTypeParameterOrBuilder getTypeParameterOrBuilder(
            int index) {
        return typeParameter_.get(index);
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter dispatch_receiver = 4;</code>
     */
    @Override
    public boolean hasDispatchReceiver() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter dispatch_receiver = 4;</code>
     */
    @Override
    public IrValueParameter getDispatchReceiver() {
        return dispatchReceiver_;
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter extension_receiver = 5;</code>
     */
    @Override
    public boolean hasExtensionReceiver() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
    }

    /**
     * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter extension_receiver = 5;</code>
     */
    @Override
    public IrValueParameter getExtensionReceiver() {
        return extensionReceiver_;
    }

    /**
     * <code>optional int32 context_receiver_parameters_count = 8;</code>
     */
    @Override
    public boolean hasContextReceiverParametersCount() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
    }

    /**
     * <code>optional int32 context_receiver_parameters_count = 8;</code>
     */
    @Override
    public int getContextReceiverParametersCount() {
        return contextReceiverParametersCount_;
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter value_parameter = 6;</code>
     */
    @Override
    public List<IrValueParameter> getValueParameterList() {
        return valueParameter_;
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter value_parameter = 6;</code>
     */
    public List<? extends IrValueParameterOrBuilder>
    getValueParameterOrBuilderList() {
        return valueParameter_;
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter value_parameter = 6;</code>
     */
    @Override
    public int getValueParameterCount() {
        return valueParameter_.size();
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter value_parameter = 6;</code>
     */
    @Override
    public IrValueParameter getValueParameter(int index) {
        return valueParameter_.get(index);
    }

    /**
     * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter value_parameter = 6;</code>
     */
    public IrValueParameterOrBuilder getValueParameterOrBuilder(
            int index) {
        return valueParameter_.get(index);
    }

    /**
     * <code>optional int32 body = 7;</code>
     */
    @Override
    public boolean hasBody() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
    }

    /**
     * <code>optional int32 body = 7;</code>
     */
    @Override
    public int getBody() {
        return body_;
    }

    private void initFields() {
        base_ = IrDeclarationBase.getDefaultInstance();
        nameType_ = 0L;
        typeParameter_ = Collections.emptyList();
        dispatchReceiver_ = IrValueParameter.getDefaultInstance();
        extensionReceiver_ = IrValueParameter.getDefaultInstance();
        contextReceiverParametersCount_ = 0;
        valueParameter_ = Collections.emptyList();
        body_ = 0;
    }

    @Override
    public boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        if (!hasBase()) {
            memoizedIsInitialized = 0;
            return false;
        }
        if (!hasNameType()) {
            memoizedIsInitialized = 0;
            return false;
        }
        if (!getBase().isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
        }
        for (int i = 0; i < getTypeParameterCount(); i++) {
            if (!getTypeParameter(i).isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        if (hasDispatchReceiver()) {
            if (!getDispatchReceiver().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        if (hasExtensionReceiver()) {
            if (!getExtensionReceiver().isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        for (int i = 0; i < getValueParameterCount(); i++) {
            if (!getValueParameter(i).isInitialized()) {
                memoizedIsInitialized = 0;
                return false;
            }
        }
        memoizedIsInitialized = 1;
        return true;
    }

    @Override
    public void writeTo(CodedOutputStream output)
            throws IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            output.writeMessage(1, base_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            output.writeInt64(2, nameType_);
        }
        for (int i = 0; i < typeParameter_.size(); i++) {
            output.writeMessage(3, typeParameter_.get(i));
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            output.writeMessage(4, dispatchReceiver_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
            output.writeMessage(5, extensionReceiver_);
        }
        for (int i = 0; i < valueParameter_.size(); i++) {
            output.writeMessage(6, valueParameter_.get(i));
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
            output.writeInt32(7, body_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
            output.writeInt32(8, contextReceiverParametersCount_);
        }
        output.writeRawBytes(unknownFields);
    }

    @Override
    public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
            size += CodedOutputStream
                    .computeMessageSize(1, base_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
            size += CodedOutputStream
                    .computeInt64Size(2, nameType_);
        }
        for (int i = 0; i < typeParameter_.size(); i++) {
            size += CodedOutputStream
                    .computeMessageSize(3, typeParameter_.get(i));
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
            size += CodedOutputStream
                    .computeMessageSize(4, dispatchReceiver_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
            size += CodedOutputStream
                    .computeMessageSize(5, extensionReceiver_);
        }
        for (int i = 0; i < valueParameter_.size(); i++) {
            size += CodedOutputStream
                    .computeMessageSize(6, valueParameter_.get(i));
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
            size += CodedOutputStream
                    .computeInt32Size(7, body_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
            size += CodedOutputStream
                    .computeInt32Size(8, contextReceiverParametersCount_);
        }
        size += unknownFields.size();
        memoizedSerializedSize = size;
        return size;
    }

    @Override
    protected Object writeReplace()
            throws ObjectStreamException {
        return super.writeReplace();
    }

    @Override
    public Builder newBuilderForType() {
        return newBuilder();
    }

    @Override
    public Builder toBuilder() {
        return newBuilder(this);
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase}
     */
    public static final class Builder extends
            GeneratedMessageLite.Builder<
                    IrFunctionBase, Builder>
            implements
            // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase)
            IrFunctionBaseOrBuilder {
        private int bitField0_;
        private IrDeclarationBase base_ = IrDeclarationBase.getDefaultInstance();
        private long nameType_;
        private List<IrTypeParameter> typeParameter_ =
                Collections.emptyList();
        private IrValueParameter dispatchReceiver_ = IrValueParameter.getDefaultInstance();
        private IrValueParameter extensionReceiver_ = IrValueParameter.getDefaultInstance();
        private int contextReceiverParametersCount_;
        private List<IrValueParameter> valueParameter_ =
                Collections.emptyList();
        private int body_;

        // Construct using org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase.newBuilder()
        private Builder() {
            maybeForceBuilderInitialization();
        }

        private static Builder create() {
            return new Builder();
        }

        private void maybeForceBuilderInitialization() {
        }

        @Override
        public Builder clear() {
            super.clear();
            base_ = IrDeclarationBase.getDefaultInstance();
            bitField0_ &= ~0x00000001;
            nameType_ = 0L;
            bitField0_ &= ~0x00000002;
            typeParameter_ = Collections.emptyList();
            bitField0_ &= ~0x00000004;
            dispatchReceiver_ = IrValueParameter.getDefaultInstance();
            bitField0_ &= ~0x00000008;
            extensionReceiver_ = IrValueParameter.getDefaultInstance();
            bitField0_ &= ~0x00000010;
            contextReceiverParametersCount_ = 0;
            bitField0_ &= ~0x00000020;
            valueParameter_ = Collections.emptyList();
            bitField0_ &= ~0x00000040;
            body_ = 0;
            bitField0_ &= ~0x00000080;
            return this;
        }

        @Override
        public Builder clone() {
            return create().mergeFrom(buildPartial());
        }

        @Override
        public IrFunctionBase getDefaultInstanceForType() {
            return getDefaultInstance();
        }

        @Override
        public IrFunctionBase build() {
            IrFunctionBase result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        @Override
        public IrFunctionBase buildPartial() {
            IrFunctionBase result = new IrFunctionBase(this);
            int from_bitField0_ = bitField0_;
            int to_bitField0_ = 0;
            if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
                to_bitField0_ |= 0x00000001;
            }
            result.base_ = base_;
            if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
                to_bitField0_ |= 0x00000002;
            }
            result.nameType_ = nameType_;
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
                typeParameter_ = Collections.unmodifiableList(typeParameter_);
                bitField0_ &= ~0x00000004;
            }
            result.typeParameter_ = typeParameter_;
            if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
                to_bitField0_ |= 0x00000004;
            }
            result.dispatchReceiver_ = dispatchReceiver_;
            if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
                to_bitField0_ |= 0x00000008;
            }
            result.extensionReceiver_ = extensionReceiver_;
            if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
                to_bitField0_ |= 0x00000010;
            }
            result.contextReceiverParametersCount_ = contextReceiverParametersCount_;
            if (((bitField0_ & 0x00000040) == 0x00000040)) {
                valueParameter_ = Collections.unmodifiableList(valueParameter_);
                bitField0_ &= ~0x00000040;
            }
            result.valueParameter_ = valueParameter_;
            if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
                to_bitField0_ |= 0x00000020;
            }
            result.body_ = body_;
            result.bitField0_ = to_bitField0_;
            return result;
        }

        @Override
        public Builder mergeFrom(IrFunctionBase other) {
            if (other == getDefaultInstance())
                return this;
            if (other.hasBase()) {
                mergeBase(other.getBase());
            }
            if (other.hasNameType()) {
                setNameType(other.getNameType());
            }
            if (!other.typeParameter_.isEmpty()) {
                if (typeParameter_.isEmpty()) {
                    typeParameter_ = other.typeParameter_;
                    bitField0_ &= ~0x00000004;
                } else {
                    ensureTypeParameterIsMutable();
                    typeParameter_.addAll(other.typeParameter_);
                }

            }
            if (other.hasDispatchReceiver()) {
                mergeDispatchReceiver(other.getDispatchReceiver());
            }
            if (other.hasExtensionReceiver()) {
                mergeExtensionReceiver(other.getExtensionReceiver());
            }
            if (other.hasContextReceiverParametersCount()) {
                setContextReceiverParametersCount(other.getContextReceiverParametersCount());
            }
            if (!other.valueParameter_.isEmpty()) {
                if (valueParameter_.isEmpty()) {
                    valueParameter_ = other.valueParameter_;
                    bitField0_ &= ~0x00000040;
                } else {
                    ensureValueParameterIsMutable();
                    valueParameter_.addAll(other.valueParameter_);
                }

            }
            if (other.hasBody()) {
                setBody(other.getBody());
            }
            setUnknownFields(
                    getUnknownFields().concat(other.unknownFields));
            return this;
        }

        @Override
        public boolean isInitialized() {
            if (!hasBase()) {

                return false;
            }
            if (!hasNameType()) {

                return false;
            }
            if (!getBase().isInitialized()) {

                return false;
            }
            for (int i = 0; i < getTypeParameterCount(); i++) {
                if (!getTypeParameter(i).isInitialized()) {

                    return false;
                }
            }
            if (hasDispatchReceiver()) {
                if (!getDispatchReceiver().isInitialized()) {

                    return false;
                }
            }
            if (hasExtensionReceiver()) {
                if (!getExtensionReceiver().isInitialized()) {

                    return false;
                }
            }
            for (int i = 0; i < getValueParameterCount(); i++) {
                if (!getValueParameter(i).isInitialized()) {

                    return false;
                }
            }
            return true;
        }

        @Override
        public Builder mergeFrom(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws IOException {
            IrFunctionBase parsedMessage = null;
            try {
                parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (InvalidProtocolBufferException e) {
                parsedMessage = (IrFunctionBase) e.getUnfinishedMessage();
                throw e;
            } finally {
                if (parsedMessage != null) {
                    mergeFrom(parsedMessage);
                }
            }
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
         */
        @Override
        public boolean hasBase() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
         */
        @Override
        public IrDeclarationBase getBase() {
            return base_;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
         */
        public Builder setBase(IrDeclarationBase value) {
            if (value == null) {
                throw new NullPointerException();
            }
            base_ = value;

            bitField0_ |= 0x00000001;
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
         */
        public Builder setBase(
                IrDeclarationBase.Builder builderForValue) {
            base_ = builderForValue.build();

            bitField0_ |= 0x00000001;
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
         */
        public Builder mergeBase(IrDeclarationBase value) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                    base_ != IrDeclarationBase.getDefaultInstance()) {
                base_ =
                        IrDeclarationBase.newBuilder(base_).mergeFrom(value).buildPartial();
            } else {
                base_ = value;
            }

            bitField0_ |= 0x00000001;
            return this;
        }

        /**
         * <code>required .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationBase base = 1;</code>
         */
        public Builder clearBase() {
            base_ = IrDeclarationBase.getDefaultInstance();

            bitField0_ &= ~0x00000001;
            return this;
        }

        /**
         * <code>required int64 name_type = 2;</code>
         */
        @Override
        public boolean hasNameType() {
            return ((bitField0_ & 0x00000002) == 0x00000002);
        }

        /**
         * <code>required int64 name_type = 2;</code>
         */
        @Override
        public long getNameType() {
            return nameType_;
        }

        /**
         * <code>required int64 name_type = 2;</code>
         */
        public Builder setNameType(long value) {
            bitField0_ |= 0x00000002;
            nameType_ = value;

            return this;
        }

        /**
         * <code>required int64 name_type = 2;</code>
         */
        public Builder clearNameType() {
            bitField0_ &= ~0x00000002;
            nameType_ = 0L;

            return this;
        }

        private void ensureTypeParameterIsMutable() {
            if (!((bitField0_ & 0x00000004) == 0x00000004)) {
                typeParameter_ = new ArrayList<IrTypeParameter>(typeParameter_);
                bitField0_ |= 0x00000004;
            }
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 3;</code>
         */
        @Override
        public List<IrTypeParameter> getTypeParameterList() {
            return Collections.unmodifiableList(typeParameter_);
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 3;</code>
         */
        @Override
        public int getTypeParameterCount() {
            return typeParameter_.size();
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 3;</code>
         */
        @Override
        public IrTypeParameter getTypeParameter(int index) {
            return typeParameter_.get(index);
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 3;</code>
         */
        public Builder setTypeParameter(
                int index, IrTypeParameter value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureTypeParameterIsMutable();
            typeParameter_.set(index, value);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 3;</code>
         */
        public Builder setTypeParameter(
                int index, IrTypeParameter.Builder builderForValue) {
            ensureTypeParameterIsMutable();
            typeParameter_.set(index, builderForValue.build());

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 3;</code>
         */
        public Builder addTypeParameter(IrTypeParameter value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureTypeParameterIsMutable();
            typeParameter_.add(value);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 3;</code>
         */
        public Builder addTypeParameter(
                int index, IrTypeParameter value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureTypeParameterIsMutable();
            typeParameter_.add(index, value);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 3;</code>
         */
        public Builder addTypeParameter(
                IrTypeParameter.Builder builderForValue) {
            ensureTypeParameterIsMutable();
            typeParameter_.add(builderForValue.build());

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 3;</code>
         */
        public Builder addTypeParameter(
                int index, IrTypeParameter.Builder builderForValue) {
            ensureTypeParameterIsMutable();
            typeParameter_.add(index, builderForValue.build());

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 3;</code>
         */
        public Builder addAllTypeParameter(
                Iterable<? extends IrTypeParameter> values) {
            ensureTypeParameterIsMutable();
            addAll(
                    values, typeParameter_);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 3;</code>
         */
        public Builder clearTypeParameter() {
            typeParameter_ = Collections.emptyList();
            bitField0_ &= ~0x00000004;

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeParameter type_parameter = 3;</code>
         */
        public Builder removeTypeParameter(int index) {
            ensureTypeParameterIsMutable();
            typeParameter_.remove(index);

            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter dispatch_receiver = 4;</code>
         */
        @Override
        public boolean hasDispatchReceiver() {
            return ((bitField0_ & 0x00000008) == 0x00000008);
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter dispatch_receiver = 4;</code>
         */
        @Override
        public IrValueParameter getDispatchReceiver() {
            return dispatchReceiver_;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter dispatch_receiver = 4;</code>
         */
        public Builder setDispatchReceiver(IrValueParameter value) {
            if (value == null) {
                throw new NullPointerException();
            }
            dispatchReceiver_ = value;

            bitField0_ |= 0x00000008;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter dispatch_receiver = 4;</code>
         */
        public Builder setDispatchReceiver(
                IrValueParameter.Builder builderForValue) {
            dispatchReceiver_ = builderForValue.build();

            bitField0_ |= 0x00000008;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter dispatch_receiver = 4;</code>
         */
        public Builder mergeDispatchReceiver(IrValueParameter value) {
            if (((bitField0_ & 0x00000008) == 0x00000008) &&
                    dispatchReceiver_ != IrValueParameter.getDefaultInstance()) {
                dispatchReceiver_ =
                        IrValueParameter.newBuilder(dispatchReceiver_).mergeFrom(value).buildPartial();
            } else {
                dispatchReceiver_ = value;
            }

            bitField0_ |= 0x00000008;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter dispatch_receiver = 4;</code>
         */
        public Builder clearDispatchReceiver() {
            dispatchReceiver_ = IrValueParameter.getDefaultInstance();

            bitField0_ &= ~0x00000008;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter extension_receiver = 5;</code>
         */
        @Override
        public boolean hasExtensionReceiver() {
            return ((bitField0_ & 0x00000010) == 0x00000010);
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter extension_receiver = 5;</code>
         */
        @Override
        public IrValueParameter getExtensionReceiver() {
            return extensionReceiver_;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter extension_receiver = 5;</code>
         */
        public Builder setExtensionReceiver(IrValueParameter value) {
            if (value == null) {
                throw new NullPointerException();
            }
            extensionReceiver_ = value;

            bitField0_ |= 0x00000010;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter extension_receiver = 5;</code>
         */
        public Builder setExtensionReceiver(
                IrValueParameter.Builder builderForValue) {
            extensionReceiver_ = builderForValue.build();

            bitField0_ |= 0x00000010;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter extension_receiver = 5;</code>
         */
        public Builder mergeExtensionReceiver(IrValueParameter value) {
            if (((bitField0_ & 0x00000010) == 0x00000010) &&
                    extensionReceiver_ != IrValueParameter.getDefaultInstance()) {
                extensionReceiver_ =
                        IrValueParameter.newBuilder(extensionReceiver_).mergeFrom(value).buildPartial();
            } else {
                extensionReceiver_ = value;
            }

            bitField0_ |= 0x00000010;
            return this;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter extension_receiver = 5;</code>
         */
        public Builder clearExtensionReceiver() {
            extensionReceiver_ = IrValueParameter.getDefaultInstance();

            bitField0_ &= ~0x00000010;
            return this;
        }

        /**
         * <code>optional int32 context_receiver_parameters_count = 8;</code>
         */
        @Override
        public boolean hasContextReceiverParametersCount() {
            return ((bitField0_ & 0x00000020) == 0x00000020);
        }

        /**
         * <code>optional int32 context_receiver_parameters_count = 8;</code>
         */
        @Override
        public int getContextReceiverParametersCount() {
            return contextReceiverParametersCount_;
        }

        /**
         * <code>optional int32 context_receiver_parameters_count = 8;</code>
         */
        public Builder setContextReceiverParametersCount(int value) {
            bitField0_ |= 0x00000020;
            contextReceiverParametersCount_ = value;

            return this;
        }

        /**
         * <code>optional int32 context_receiver_parameters_count = 8;</code>
         */
        public Builder clearContextReceiverParametersCount() {
            bitField0_ &= ~0x00000020;
            contextReceiverParametersCount_ = 0;

            return this;
        }

        private void ensureValueParameterIsMutable() {
            if (!((bitField0_ & 0x00000040) == 0x00000040)) {
                valueParameter_ = new ArrayList<IrValueParameter>(valueParameter_);
                bitField0_ |= 0x00000040;
            }
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter value_parameter = 6;</code>
         */
        @Override
        public List<IrValueParameter> getValueParameterList() {
            return Collections.unmodifiableList(valueParameter_);
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter value_parameter = 6;</code>
         */
        @Override
        public int getValueParameterCount() {
            return valueParameter_.size();
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter value_parameter = 6;</code>
         */
        @Override
        public IrValueParameter getValueParameter(int index) {
            return valueParameter_.get(index);
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter value_parameter = 6;</code>
         */
        public Builder setValueParameter(
                int index, IrValueParameter value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureValueParameterIsMutable();
            valueParameter_.set(index, value);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter value_parameter = 6;</code>
         */
        public Builder setValueParameter(
                int index, IrValueParameter.Builder builderForValue) {
            ensureValueParameterIsMutable();
            valueParameter_.set(index, builderForValue.build());

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter value_parameter = 6;</code>
         */
        public Builder addValueParameter(IrValueParameter value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureValueParameterIsMutable();
            valueParameter_.add(value);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter value_parameter = 6;</code>
         */
        public Builder addValueParameter(
                int index, IrValueParameter value) {
            if (value == null) {
                throw new NullPointerException();
            }
            ensureValueParameterIsMutable();
            valueParameter_.add(index, value);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter value_parameter = 6;</code>
         */
        public Builder addValueParameter(
                IrValueParameter.Builder builderForValue) {
            ensureValueParameterIsMutable();
            valueParameter_.add(builderForValue.build());

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter value_parameter = 6;</code>
         */
        public Builder addValueParameter(
                int index, IrValueParameter.Builder builderForValue) {
            ensureValueParameterIsMutable();
            valueParameter_.add(index, builderForValue.build());

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter value_parameter = 6;</code>
         */
        public Builder addAllValueParameter(
                Iterable<? extends IrValueParameter> values) {
            ensureValueParameterIsMutable();
            addAll(
                    values, valueParameter_);

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter value_parameter = 6;</code>
         */
        public Builder clearValueParameter() {
            valueParameter_ = Collections.emptyList();
            bitField0_ &= ~0x00000040;

            return this;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrValueParameter value_parameter = 6;</code>
         */
        public Builder removeValueParameter(int index) {
            ensureValueParameterIsMutable();
            valueParameter_.remove(index);

            return this;
        }

        /**
         * <code>optional int32 body = 7;</code>
         */
        @Override
        public boolean hasBody() {
            return ((bitField0_ & 0x00000080) == 0x00000080);
        }

        /**
         * <code>optional int32 body = 7;</code>
         */
        @Override
        public int getBody() {
            return body_;
        }

        /**
         * <code>optional int32 body = 7;</code>
         */
        public Builder setBody(int value) {
            bitField0_ |= 0x00000080;
            body_ = value;

            return this;
        }

        /**
         * <code>optional int32 body = 7;</code>
         */
        public Builder clearBody() {
            bitField0_ &= ~0x00000080;
            body_ = 0;

            return this;
        }

        // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase)
    }

    // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.common.serialization.proto.IrFunctionBase)
}
