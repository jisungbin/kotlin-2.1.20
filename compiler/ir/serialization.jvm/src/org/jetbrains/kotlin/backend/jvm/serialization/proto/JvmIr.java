// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: compiler/ir/serialization.jvm/src/JvmIr.proto

package org.jetbrains.kotlin.backend.jvm.serialization.proto;

import org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature;
import org.jetbrains.kotlin.backend.common.serialization.proto.IdSignatureOrBuilder;
import org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration;
import org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclarationOrBuilder;
import org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression;
import org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement;
import org.jetbrains.kotlin.backend.common.serialization.proto.IrType;
import org.jetbrains.kotlin.backend.common.serialization.proto.IrTypeOrBuilder;
import org.jetbrains.kotlin.protobuf.AbstractParser;
import org.jetbrains.kotlin.protobuf.ByteString;
import org.jetbrains.kotlin.protobuf.CodedInputStream;
import org.jetbrains.kotlin.protobuf.CodedOutputStream;
import org.jetbrains.kotlin.protobuf.ExtensionRegistryLite;
import org.jetbrains.kotlin.protobuf.GeneratedMessageLite;
import org.jetbrains.kotlin.protobuf.Internal;
import org.jetbrains.kotlin.protobuf.InvalidProtocolBufferException;
import org.jetbrains.kotlin.protobuf.LazyStringArrayList;
import org.jetbrains.kotlin.protobuf.LazyStringList;
import org.jetbrains.kotlin.protobuf.MessageLiteOrBuilder;
import org.jetbrains.kotlin.protobuf.Parser;
import org.jetbrains.kotlin.protobuf.ProtocolStringList;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public final class JvmIr {
    static {
    }

    private JvmIr() {
    }

    public static void registerAllExtensions(
            ExtensionRegistryLite registry) {
    }

    public interface XStatementOrExpressionOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression)
            MessageLiteOrBuilder {

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
         */
        boolean hasStatement();

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
         */
        IrStatement getStatement();

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
         */
        boolean hasExpression();

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
         */
        IrExpression getExpression();
    }

    public interface ClassOrFileOrBuilder extends
            // @@protoc_insertion_point(interface_extends:org.jetbrains.kotlin.backend.jvm.serialization.proto.ClassOrFile)
            MessageLiteOrBuilder {

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
         */
        List<IrDeclaration>
        getDeclarationList();

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
         */
        IrDeclaration getDeclaration(int index);

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
         */
        int getDeclarationCount();

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
         */
        List<IrType>
        getTypeList();

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
         */
        IrType getType(int index);

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
         */
        int getTypeCount();

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
         */
        List<IdSignature>
        getSignatureList();

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
         */
        IdSignature getSignature(int index);

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
         */
        int getSignatureCount();

        /**
         * <code>repeated string string = 4;</code>
         */
        ProtocolStringList
        getStringList();

        /**
         * <code>repeated string string = 4;</code>
         */
        int getStringCount();

        /**
         * <code>repeated string string = 4;</code>
         */
        String getString(int index);

        /**
         * <code>repeated string string = 4;</code>
         */
        ByteString
        getStringBytes(int index);

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
         */
        List<JvmIr.XStatementOrExpression>
        getBodyList();

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
         */
        JvmIr.XStatementOrExpression getBody(int index);

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
         */
        int getBodyCount();

        /**
         * <code>repeated string debug_info = 6;</code>
         */
        ProtocolStringList
        getDebugInfoList();

        /**
         * <code>repeated string debug_info = 6;</code>
         */
        int getDebugInfoCount();

        /**
         * <code>repeated string debug_info = 6;</code>
         */
        String getDebugInfo(int index);

        /**
         * <code>repeated string debug_info = 6;</code>
         */
        ByteString
        getDebugInfoBytes(int index);

        /**
         * <code>required string file_facade_fq_name = 7;</code>
         */
        boolean hasFileFacadeFqName();

        /**
         * <code>required string file_facade_fq_name = 7;</code>
         */
        String getFileFacadeFqName();

        /**
         * <code>required string file_facade_fq_name = 7;</code>
         */
        ByteString
        getFileFacadeFqNameBytes();
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression}
     */
    public static final class XStatementOrExpression extends
            GeneratedMessageLite implements
            // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression)
            XStatementOrExpressionOrBuilder {
        public static final int STATEMENT_FIELD_NUMBER = 1;
        public static final int EXPRESSION_FIELD_NUMBER = 2;
        private static final XStatementOrExpression defaultInstance;
        private static final long serialVersionUID = 0L;
        public static Parser<XStatementOrExpression> PARSER =
                new AbstractParser<XStatementOrExpression>() {
                    @Override
                    public XStatementOrExpression parsePartialFrom(
                            CodedInputStream input,
                            ExtensionRegistryLite extensionRegistry)
                            throws InvalidProtocolBufferException {
                        return new XStatementOrExpression(input, extensionRegistry);
                    }
                };

        static {
            defaultInstance = new XStatementOrExpression(true);
            defaultInstance.initFields();
        }

        private final ByteString unknownFields;
        private int bitField0_;
        private int kindCase_ = 0;
        private Object kind_;
        private byte memoizedIsInitialized = -1;
        private int memoizedSerializedSize = -1;

        // Use XStatementOrExpression.newBuilder() to construct.
        private XStatementOrExpression(GeneratedMessageLite.Builder builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private XStatementOrExpression(boolean noInit) {
            this.unknownFields = ByteString.EMPTY;
        }

        private XStatementOrExpression(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            ByteString.Output unknownFieldsOutput =
                    ByteString.newOutput();
            CodedOutputStream unknownFieldsCodedOutput =
                    CodedOutputStream.newInstance(
                            unknownFieldsOutput, 1);
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            IrStatement.Builder subBuilder = null;
                            if (kindCase_ == 1) {
                                subBuilder = ((IrStatement) kind_).toBuilder();
                            }
                            kind_ = input.readMessage(IrStatement.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((IrStatement) kind_);
                                kind_ = subBuilder.buildPartial();
                            }
                            kindCase_ = 1;
                            break;
                        }
                        case 18: {
                            IrExpression.Builder subBuilder = null;
                            if (kindCase_ == 2) {
                                subBuilder = ((IrExpression) kind_).toBuilder();
                            }
                            kind_ = input.readMessage(IrExpression.PARSER, extensionRegistry);
                            if (subBuilder != null) {
                                subBuilder.mergeFrom((IrExpression) kind_);
                                kind_ = subBuilder.buildPartial();
                            }
                            kindCase_ = 2;
                            break;
                        }
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw new InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                try {
                    unknownFieldsCodedOutput.flush();
                } catch (IOException e) {
                    // Should not happen
                } finally {
                    unknownFields = unknownFieldsOutput.toByteString();
                }
                makeExtensionsImmutable();
            }
        }

        public static XStatementOrExpression getDefaultInstance() {
            return defaultInstance;
        }

        public static JvmIr.XStatementOrExpression parseFrom(
                ByteString data)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static JvmIr.XStatementOrExpression parseFrom(
                ByteString data,
                ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static JvmIr.XStatementOrExpression parseFrom(byte[] data)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static JvmIr.XStatementOrExpression parseFrom(
                byte[] data,
                ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static JvmIr.XStatementOrExpression parseFrom(InputStream input)
                throws IOException {
            return PARSER.parseFrom(input);
        }

        public static JvmIr.XStatementOrExpression parseFrom(
                InputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static JvmIr.XStatementOrExpression parseDelimitedFrom(InputStream input)
                throws IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static JvmIr.XStatementOrExpression parseDelimitedFrom(
                InputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static JvmIr.XStatementOrExpression parseFrom(
                CodedInputStream input)
                throws IOException {
            return PARSER.parseFrom(input);
        }

        public static JvmIr.XStatementOrExpression parseFrom(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public static Builder newBuilder(JvmIr.XStatementOrExpression prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        @Override
        public XStatementOrExpression getDefaultInstanceForType() {
            return defaultInstance;
        }

        @Override
        public Parser<XStatementOrExpression> getParserForType() {
            return PARSER;
        }

        public KindCase
        getKindCase() {
            return KindCase.valueOf(
                    kindCase_);
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
         */
        @Override
        public boolean hasStatement() {
            return kindCase_ == 1;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
         */
        @Override
        public IrStatement getStatement() {
            if (kindCase_ == 1) {
                return (IrStatement) kind_;
            }
            return IrStatement.getDefaultInstance();
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
         */
        @Override
        public boolean hasExpression() {
            return kindCase_ == 2;
        }

        /**
         * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
         */
        @Override
        public IrExpression getExpression() {
            if (kindCase_ == 2) {
                return (IrExpression) kind_;
            }
            return IrExpression.getDefaultInstance();
        }

        private void initFields() {
        }

        @Override
        public boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            if (hasStatement()) {
                if (!getStatement().isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            if (hasExpression()) {
                if (!getExpression().isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            memoizedIsInitialized = 1;
            return true;
        }

        @Override
        public void writeTo(CodedOutputStream output)
                throws IOException {
            getSerializedSize();
            if (kindCase_ == 1) {
                output.writeMessage(1, (IrStatement) kind_);
            }
            if (kindCase_ == 2) {
                output.writeMessage(2, (IrExpression) kind_);
            }
            output.writeRawBytes(unknownFields);
        }

        @Override
        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            if (kindCase_ == 1) {
                size += CodedOutputStream
                        .computeMessageSize(1, (IrStatement) kind_);
            }
            if (kindCase_ == 2) {
                size += CodedOutputStream
                        .computeMessageSize(2, (IrExpression) kind_);
            }
            size += unknownFields.size();
            memoizedSerializedSize = size;
            return size;
        }

        @Override
        protected Object writeReplace()
                throws ObjectStreamException {
            return super.writeReplace();
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        @Override
        public Builder toBuilder() {
            return newBuilder(this);
        }

        public enum KindCase
                implements Internal.EnumLite {
            STATEMENT(1),
            EXPRESSION(2),
            KIND_NOT_SET(0);
            private int value = 0;

            KindCase(int value) {
                this.value = value;
            }

            public static KindCase valueOf(int value) {
                switch (value) {
                    case 1:
                        return STATEMENT;
                    case 2:
                        return EXPRESSION;
                    case 0:
                        return KIND_NOT_SET;
                    default:
                        throw new IllegalArgumentException(
                                "Value is undefined for this oneof enum.");
                }
            }

            @Override
            public int getNumber() {
                return this.value;
            }
        }

        /**
         * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression}
         */
        public static final class Builder extends
                GeneratedMessageLite.Builder<
                        JvmIr.XStatementOrExpression, Builder>
                implements
                // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression)
                JvmIr.XStatementOrExpressionOrBuilder {
            private int kindCase_ = 0;
            private Object kind_;
            private int bitField0_;

            // Construct using org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.XStatementOrExpression.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private static Builder create() {
                return new Builder();
            }

            private void maybeForceBuilderInitialization() {
            }

            @Override
            public Builder clear() {
                super.clear();
                kindCase_ = 0;
                kind_ = null;
                return this;
            }

            @Override
            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            @Override
            public JvmIr.XStatementOrExpression getDefaultInstanceForType() {
                return getDefaultInstance();
            }

            @Override
            public JvmIr.XStatementOrExpression build() {
                JvmIr.XStatementOrExpression result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            @Override
            public JvmIr.XStatementOrExpression buildPartial() {
                JvmIr.XStatementOrExpression result = new JvmIr.XStatementOrExpression(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (kindCase_ == 1) {
                    result.kind_ = kind_;
                }
                if (kindCase_ == 2) {
                    result.kind_ = kind_;
                }
                result.bitField0_ = to_bitField0_;
                result.kindCase_ = kindCase_;
                return result;
            }

            @Override
            public Builder mergeFrom(JvmIr.XStatementOrExpression other) {
                if (other == getDefaultInstance())
                    return this;
                switch (other.getKindCase()) {
                    case STATEMENT: {
                        mergeStatement(other.getStatement());
                        break;
                    }
                    case EXPRESSION: {
                        mergeExpression(other.getExpression());
                        break;
                    }
                    case KIND_NOT_SET: {
                        break;
                    }
                }
                setUnknownFields(
                        getUnknownFields().concat(other.unknownFields));
                return this;
            }

            @Override
            public boolean isInitialized() {
                if (hasStatement()) {
                    if (!getStatement().isInitialized()) {

                        return false;
                    }
                }
                if (hasExpression()) {
                    if (!getExpression().isInitialized()) {

                        return false;
                    }
                }
                return true;
            }

            @Override
            public Builder mergeFrom(
                    CodedInputStream input,
                    ExtensionRegistryLite extensionRegistry)
                    throws IOException {
                JvmIr.XStatementOrExpression parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (JvmIr.XStatementOrExpression) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            public KindCase
            getKindCase() {
                return KindCase.valueOf(
                        kindCase_);
            }

            public Builder clearKind() {
                kindCase_ = 0;
                kind_ = null;
                return this;
            }

            /**
             * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
             */
            @Override
            public boolean hasStatement() {
                return kindCase_ == 1;
            }

            /**
             * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
             */
            @Override
            public IrStatement getStatement() {
                if (kindCase_ == 1) {
                    return (IrStatement) kind_;
                }
                return IrStatement.getDefaultInstance();
            }

            /**
             * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
             */
            public Builder setStatement(IrStatement value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                kind_ = value;

                kindCase_ = 1;
                return this;
            }

            /**
             * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
             */
            public Builder setStatement(
                    IrStatement.Builder builderForValue) {
                kind_ = builderForValue.build();

                kindCase_ = 1;
                return this;
            }

            /**
             * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
             */
            public Builder mergeStatement(IrStatement value) {
                if (kindCase_ == 1 &&
                        kind_ != IrStatement.getDefaultInstance()) {
                    kind_ = IrStatement.newBuilder((IrStatement) kind_)
                            .mergeFrom(value).buildPartial();
                } else {
                    kind_ = value;
                }

                kindCase_ = 1;
                return this;
            }

            /**
             * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrStatement statement = 1;</code>
             */
            public Builder clearStatement() {
                if (kindCase_ == 1) {
                    kindCase_ = 0;
                    kind_ = null;

                }
                return this;
            }

            /**
             * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
             */
            @Override
            public boolean hasExpression() {
                return kindCase_ == 2;
            }

            /**
             * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
             */
            @Override
            public IrExpression getExpression() {
                if (kindCase_ == 2) {
                    return (IrExpression) kind_;
                }
                return IrExpression.getDefaultInstance();
            }

            /**
             * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
             */
            public Builder setExpression(IrExpression value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                kind_ = value;

                kindCase_ = 2;
                return this;
            }

            /**
             * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
             */
            public Builder setExpression(
                    IrExpression.Builder builderForValue) {
                kind_ = builderForValue.build();

                kindCase_ = 2;
                return this;
            }

            /**
             * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
             */
            public Builder mergeExpression(IrExpression value) {
                if (kindCase_ == 2 &&
                        kind_ != IrExpression.getDefaultInstance()) {
                    kind_ = IrExpression.newBuilder((IrExpression) kind_)
                            .mergeFrom(value).buildPartial();
                } else {
                    kind_ = value;
                }

                kindCase_ = 2;
                return this;
            }

            /**
             * <code>optional .org.jetbrains.kotlin.backend.common.serialization.proto.IrExpression expression = 2;</code>
             */
            public Builder clearExpression() {
                if (kindCase_ == 2) {
                    kindCase_ = 0;
                    kind_ = null;

                }
                return this;
            }

            // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression)
        }

        // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression)
    }

    /**
     * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.ClassOrFile}
     */
    public static final class ClassOrFile extends
            GeneratedMessageLite implements
            // @@protoc_insertion_point(message_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.ClassOrFile)
            ClassOrFileOrBuilder {
        public static final int DECLARATION_FIELD_NUMBER = 1;
        public static final int TYPE_FIELD_NUMBER = 2;
        public static final int SIGNATURE_FIELD_NUMBER = 3;
        public static final int STRING_FIELD_NUMBER = 4;
        public static final int BODY_FIELD_NUMBER = 5;
        public static final int DEBUG_INFO_FIELD_NUMBER = 6;
        public static final int FILE_FACADE_FQ_NAME_FIELD_NUMBER = 7;
        private static final ClassOrFile defaultInstance;
        private static final long serialVersionUID = 0L;
        public static Parser<ClassOrFile> PARSER =
                new AbstractParser<ClassOrFile>() {
                    @Override
                    public ClassOrFile parsePartialFrom(
                            CodedInputStream input,
                            ExtensionRegistryLite extensionRegistry)
                            throws InvalidProtocolBufferException {
                        return new ClassOrFile(input, extensionRegistry);
                    }
                };

        static {
            defaultInstance = new ClassOrFile(true);
            defaultInstance.initFields();
        }

        private final ByteString unknownFields;
        private int bitField0_;
        private List<IrDeclaration> declaration_;
        private List<IrType> type_;
        private List<IdSignature> signature_;
        private LazyStringList string_;
        private List<JvmIr.XStatementOrExpression> body_;
        private LazyStringList debugInfo_;
        private Object fileFacadeFqName_;
        private byte memoizedIsInitialized = -1;
        private int memoizedSerializedSize = -1;

        // Use ClassOrFile.newBuilder() to construct.
        private ClassOrFile(GeneratedMessageLite.Builder builder) {
            super(builder);
            this.unknownFields = builder.getUnknownFields();
        }

        private ClassOrFile(boolean noInit) {
            this.unknownFields = ByteString.EMPTY;
        }

        private ClassOrFile(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            initFields();
            int mutable_bitField0_ = 0;
            ByteString.Output unknownFieldsOutput =
                    ByteString.newOutput();
            CodedOutputStream unknownFieldsCodedOutput =
                    CodedOutputStream.newInstance(
                            unknownFieldsOutput, 1);
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        default: {
                            if (!parseUnknownField(input, unknownFieldsCodedOutput,
                                    extensionRegistry, tag)) {
                                done = true;
                            }
                            break;
                        }
                        case 10: {
                            if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                                declaration_ = new ArrayList<IrDeclaration>();
                                mutable_bitField0_ |= 0x00000001;
                            }
                            declaration_.add(input.readMessage(IrDeclaration.PARSER, extensionRegistry));
                            break;
                        }
                        case 18: {
                            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                                type_ = new ArrayList<IrType>();
                                mutable_bitField0_ |= 0x00000002;
                            }
                            type_.add(input.readMessage(IrType.PARSER, extensionRegistry));
                            break;
                        }
                        case 26: {
                            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                                signature_ = new ArrayList<IdSignature>();
                                mutable_bitField0_ |= 0x00000004;
                            }
                            signature_.add(input.readMessage(IdSignature.PARSER, extensionRegistry));
                            break;
                        }
                        case 34: {
                            ByteString bs = input.readBytes();
                            if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                                string_ = new LazyStringArrayList();
                                mutable_bitField0_ |= 0x00000008;
                            }
                            string_.add(bs);
                            break;
                        }
                        case 42: {
                            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                                body_ = new ArrayList<JvmIr.XStatementOrExpression>();
                                mutable_bitField0_ |= 0x00000010;
                            }
                            body_.add(input.readMessage(JvmIr.XStatementOrExpression.PARSER, extensionRegistry));
                            break;
                        }
                        case 50: {
                            ByteString bs = input.readBytes();
                            if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                                debugInfo_ = new LazyStringArrayList();
                                mutable_bitField0_ |= 0x00000020;
                            }
                            debugInfo_.add(bs);
                            break;
                        }
                        case 58: {
                            ByteString bs = input.readBytes();
                            bitField0_ |= 0x00000001;
                            fileFacadeFqName_ = bs;
                            break;
                        }
                    }
                }
            } catch (InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(this);
            } catch (IOException e) {
                throw new InvalidProtocolBufferException(
                        e.getMessage()).setUnfinishedMessage(this);
            } finally {
                if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                    declaration_ = Collections.unmodifiableList(declaration_);
                }
                if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                    type_ = Collections.unmodifiableList(type_);
                }
                if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                    signature_ = Collections.unmodifiableList(signature_);
                }
                if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                    string_ = string_.getUnmodifiableView();
                }
                if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                    body_ = Collections.unmodifiableList(body_);
                }
                if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                    debugInfo_ = debugInfo_.getUnmodifiableView();
                }
                try {
                    unknownFieldsCodedOutput.flush();
                } catch (IOException e) {
                    // Should not happen
                } finally {
                    unknownFields = unknownFieldsOutput.toByteString();
                }
                makeExtensionsImmutable();
            }
        }

        public static ClassOrFile getDefaultInstance() {
            return defaultInstance;
        }

        public static JvmIr.ClassOrFile parseFrom(
                ByteString data)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static JvmIr.ClassOrFile parseFrom(
                ByteString data,
                ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static JvmIr.ClassOrFile parseFrom(byte[] data)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data);
        }

        public static JvmIr.ClassOrFile parseFrom(
                byte[] data,
                ExtensionRegistryLite extensionRegistry)
                throws InvalidProtocolBufferException {
            return PARSER.parseFrom(data, extensionRegistry);
        }

        public static JvmIr.ClassOrFile parseFrom(InputStream input)
                throws IOException {
            return PARSER.parseFrom(input);
        }

        public static JvmIr.ClassOrFile parseFrom(
                InputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static JvmIr.ClassOrFile parseDelimitedFrom(InputStream input)
                throws IOException {
            return PARSER.parseDelimitedFrom(input);
        }

        public static JvmIr.ClassOrFile parseDelimitedFrom(
                InputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws IOException {
            return PARSER.parseDelimitedFrom(input, extensionRegistry);
        }

        public static JvmIr.ClassOrFile parseFrom(
                CodedInputStream input)
                throws IOException {
            return PARSER.parseFrom(input);
        }

        public static JvmIr.ClassOrFile parseFrom(
                CodedInputStream input,
                ExtensionRegistryLite extensionRegistry)
                throws IOException {
            return PARSER.parseFrom(input, extensionRegistry);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public static Builder newBuilder(JvmIr.ClassOrFile prototype) {
            return newBuilder().mergeFrom(prototype);
        }

        @Override
        public ClassOrFile getDefaultInstanceForType() {
            return defaultInstance;
        }

        @Override
        public Parser<ClassOrFile> getParserForType() {
            return PARSER;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
         */
        @Override
        public List<IrDeclaration> getDeclarationList() {
            return declaration_;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
         */
        public List<? extends IrDeclarationOrBuilder>
        getDeclarationOrBuilderList() {
            return declaration_;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
         */
        @Override
        public int getDeclarationCount() {
            return declaration_.size();
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
         */
        @Override
        public IrDeclaration getDeclaration(int index) {
            return declaration_.get(index);
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
         */
        public IrDeclarationOrBuilder getDeclarationOrBuilder(
                int index) {
            return declaration_.get(index);
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
         */
        @Override
        public List<IrType> getTypeList() {
            return type_;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
         */
        public List<? extends IrTypeOrBuilder>
        getTypeOrBuilderList() {
            return type_;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
         */
        @Override
        public int getTypeCount() {
            return type_.size();
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
         */
        @Override
        public IrType getType(int index) {
            return type_.get(index);
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
         */
        public IrTypeOrBuilder getTypeOrBuilder(
                int index) {
            return type_.get(index);
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
         */
        @Override
        public List<IdSignature> getSignatureList() {
            return signature_;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
         */
        public List<? extends IdSignatureOrBuilder>
        getSignatureOrBuilderList() {
            return signature_;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
         */
        @Override
        public int getSignatureCount() {
            return signature_.size();
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
         */
        @Override
        public IdSignature getSignature(int index) {
            return signature_.get(index);
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
         */
        public IdSignatureOrBuilder getSignatureOrBuilder(
                int index) {
            return signature_.get(index);
        }

        /**
         * <code>repeated string string = 4;</code>
         */
        @Override
        public ProtocolStringList
        getStringList() {
            return string_;
        }

        /**
         * <code>repeated string string = 4;</code>
         */
        @Override
        public int getStringCount() {
            return string_.size();
        }

        /**
         * <code>repeated string string = 4;</code>
         */
        @Override
        public String getString(int index) {
            return string_.get(index);
        }

        /**
         * <code>repeated string string = 4;</code>
         */
        @Override
        public ByteString
        getStringBytes(int index) {
            return string_.getByteString(index);
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
         */
        @Override
        public List<JvmIr.XStatementOrExpression> getBodyList() {
            return body_;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
         */
        public List<? extends JvmIr.XStatementOrExpressionOrBuilder>
        getBodyOrBuilderList() {
            return body_;
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
         */
        @Override
        public int getBodyCount() {
            return body_.size();
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
         */
        @Override
        public JvmIr.XStatementOrExpression getBody(int index) {
            return body_.get(index);
        }

        /**
         * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
         */
        public JvmIr.XStatementOrExpressionOrBuilder getBodyOrBuilder(
                int index) {
            return body_.get(index);
        }

        /**
         * <code>repeated string debug_info = 6;</code>
         */
        @Override
        public ProtocolStringList
        getDebugInfoList() {
            return debugInfo_;
        }

        /**
         * <code>repeated string debug_info = 6;</code>
         */
        @Override
        public int getDebugInfoCount() {
            return debugInfo_.size();
        }

        /**
         * <code>repeated string debug_info = 6;</code>
         */
        @Override
        public String getDebugInfo(int index) {
            return debugInfo_.get(index);
        }

        /**
         * <code>repeated string debug_info = 6;</code>
         */
        @Override
        public ByteString
        getDebugInfoBytes(int index) {
            return debugInfo_.getByteString(index);
        }

        /**
         * <code>required string file_facade_fq_name = 7;</code>
         */
        @Override
        public boolean hasFileFacadeFqName() {
            return ((bitField0_ & 0x00000001) == 0x00000001);
        }

        /**
         * <code>required string file_facade_fq_name = 7;</code>
         */
        @Override
        public String getFileFacadeFqName() {
            Object ref = fileFacadeFqName_;
            if (ref instanceof String) {
                return (String) ref;
            } else {
                ByteString bs =
                        (ByteString) ref;
                String s = bs.toStringUtf8();
                if (bs.isValidUtf8()) {
                    fileFacadeFqName_ = s;
                }
                return s;
            }
        }

        /**
         * <code>required string file_facade_fq_name = 7;</code>
         */
        @Override
        public ByteString
        getFileFacadeFqNameBytes() {
            Object ref = fileFacadeFqName_;
            if (ref instanceof String) {
                ByteString b =
                        ByteString.copyFromUtf8(
                                (String) ref);
                fileFacadeFqName_ = b;
                return b;
            } else {
                return (ByteString) ref;
            }
        }

        private void initFields() {
            declaration_ = Collections.emptyList();
            type_ = Collections.emptyList();
            signature_ = Collections.emptyList();
            string_ = LazyStringArrayList.EMPTY;
            body_ = Collections.emptyList();
            debugInfo_ = LazyStringArrayList.EMPTY;
            fileFacadeFqName_ = "";
        }

        @Override
        public boolean isInitialized() {
            byte isInitialized = memoizedIsInitialized;
            if (isInitialized == 1) return true;
            if (isInitialized == 0) return false;

            if (!hasFileFacadeFqName()) {
                memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getDeclarationCount(); i++) {
                if (!getDeclaration(i).isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            for (int i = 0; i < getTypeCount(); i++) {
                if (!getType(i).isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            for (int i = 0; i < getSignatureCount(); i++) {
                if (!getSignature(i).isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            for (int i = 0; i < getBodyCount(); i++) {
                if (!getBody(i).isInitialized()) {
                    memoizedIsInitialized = 0;
                    return false;
                }
            }
            memoizedIsInitialized = 1;
            return true;
        }

        @Override
        public void writeTo(CodedOutputStream output)
                throws IOException {
            getSerializedSize();
            for (int i = 0; i < declaration_.size(); i++) {
                output.writeMessage(1, declaration_.get(i));
            }
            for (int i = 0; i < type_.size(); i++) {
                output.writeMessage(2, type_.get(i));
            }
            for (int i = 0; i < signature_.size(); i++) {
                output.writeMessage(3, signature_.get(i));
            }
            for (int i = 0; i < string_.size(); i++) {
                output.writeBytes(4, string_.getByteString(i));
            }
            for (int i = 0; i < body_.size(); i++) {
                output.writeMessage(5, body_.get(i));
            }
            for (int i = 0; i < debugInfo_.size(); i++) {
                output.writeBytes(6, debugInfo_.getByteString(i));
            }
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                output.writeBytes(7, getFileFacadeFqNameBytes());
            }
            output.writeRawBytes(unknownFields);
        }

        @Override
        public int getSerializedSize() {
            int size = memoizedSerializedSize;
            if (size != -1) return size;

            size = 0;
            for (int i = 0; i < declaration_.size(); i++) {
                size += CodedOutputStream
                        .computeMessageSize(1, declaration_.get(i));
            }
            for (int i = 0; i < type_.size(); i++) {
                size += CodedOutputStream
                        .computeMessageSize(2, type_.get(i));
            }
            for (int i = 0; i < signature_.size(); i++) {
                size += CodedOutputStream
                        .computeMessageSize(3, signature_.get(i));
            }
            {
                int dataSize = 0;
                for (int i = 0; i < string_.size(); i++) {
                    dataSize += CodedOutputStream
                            .computeBytesSizeNoTag(string_.getByteString(i));
                }
                size += dataSize;
                size += getStringList().size();
            }
            for (int i = 0; i < body_.size(); i++) {
                size += CodedOutputStream
                        .computeMessageSize(5, body_.get(i));
            }
            {
                int dataSize = 0;
                for (int i = 0; i < debugInfo_.size(); i++) {
                    dataSize += CodedOutputStream
                            .computeBytesSizeNoTag(debugInfo_.getByteString(i));
                }
                size += dataSize;
                size += getDebugInfoList().size();
            }
            if (((bitField0_ & 0x00000001) == 0x00000001)) {
                size += CodedOutputStream
                        .computeBytesSize(7, getFileFacadeFqNameBytes());
            }
            size += unknownFields.size();
            memoizedSerializedSize = size;
            return size;
        }

        @Override
        protected Object writeReplace()
                throws ObjectStreamException {
            return super.writeReplace();
        }

        @Override
        public Builder newBuilderForType() {
            return newBuilder();
        }

        @Override
        public Builder toBuilder() {
            return newBuilder(this);
        }

        /**
         * Protobuf type {@code org.jetbrains.kotlin.backend.jvm.serialization.proto.ClassOrFile}
         */
        public static final class Builder extends
                GeneratedMessageLite.Builder<
                        JvmIr.ClassOrFile, Builder>
                implements
                // @@protoc_insertion_point(builder_implements:org.jetbrains.kotlin.backend.jvm.serialization.proto.ClassOrFile)
                JvmIr.ClassOrFileOrBuilder {
            private int bitField0_;
            private List<IrDeclaration> declaration_ =
                    Collections.emptyList();
            private List<IrType> type_ =
                    Collections.emptyList();
            private List<IdSignature> signature_ =
                    Collections.emptyList();
            private LazyStringList string_ = LazyStringArrayList.EMPTY;
            private List<JvmIr.XStatementOrExpression> body_ =
                    Collections.emptyList();
            private LazyStringList debugInfo_ = LazyStringArrayList.EMPTY;
            private Object fileFacadeFqName_ = "";

            // Construct using org.jetbrains.kotlin.backend.jvm.serialization.proto.JvmIr.ClassOrFile.newBuilder()
            private Builder() {
                maybeForceBuilderInitialization();
            }

            private static Builder create() {
                return new Builder();
            }

            private void maybeForceBuilderInitialization() {
            }

            @Override
            public Builder clear() {
                super.clear();
                declaration_ = Collections.emptyList();
                bitField0_ &= ~0x00000001;
                type_ = Collections.emptyList();
                bitField0_ &= ~0x00000002;
                signature_ = Collections.emptyList();
                bitField0_ &= ~0x00000004;
                string_ = LazyStringArrayList.EMPTY;
                bitField0_ &= ~0x00000008;
                body_ = Collections.emptyList();
                bitField0_ &= ~0x00000010;
                debugInfo_ = LazyStringArrayList.EMPTY;
                bitField0_ &= ~0x00000020;
                fileFacadeFqName_ = "";
                bitField0_ &= ~0x00000040;
                return this;
            }

            @Override
            public Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            @Override
            public JvmIr.ClassOrFile getDefaultInstanceForType() {
                return getDefaultInstance();
            }

            @Override
            public JvmIr.ClassOrFile build() {
                JvmIr.ClassOrFile result = buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                }
                return result;
            }

            @Override
            public JvmIr.ClassOrFile buildPartial() {
                JvmIr.ClassOrFile result = new JvmIr.ClassOrFile(this);
                int from_bitField0_ = bitField0_;
                int to_bitField0_ = 0;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                    declaration_ = Collections.unmodifiableList(declaration_);
                    bitField0_ &= ~0x00000001;
                }
                result.declaration_ = declaration_;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                    type_ = Collections.unmodifiableList(type_);
                    bitField0_ &= ~0x00000002;
                }
                result.type_ = type_;
                if (((bitField0_ & 0x00000004) == 0x00000004)) {
                    signature_ = Collections.unmodifiableList(signature_);
                    bitField0_ &= ~0x00000004;
                }
                result.signature_ = signature_;
                if (((bitField0_ & 0x00000008) == 0x00000008)) {
                    string_ = string_.getUnmodifiableView();
                    bitField0_ &= ~0x00000008;
                }
                result.string_ = string_;
                if (((bitField0_ & 0x00000010) == 0x00000010)) {
                    body_ = Collections.unmodifiableList(body_);
                    bitField0_ &= ~0x00000010;
                }
                result.body_ = body_;
                if (((bitField0_ & 0x00000020) == 0x00000020)) {
                    debugInfo_ = debugInfo_.getUnmodifiableView();
                    bitField0_ &= ~0x00000020;
                }
                result.debugInfo_ = debugInfo_;
                if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
                    to_bitField0_ |= 0x00000001;
                }
                result.fileFacadeFqName_ = fileFacadeFqName_;
                result.bitField0_ = to_bitField0_;
                return result;
            }

            @Override
            public Builder mergeFrom(JvmIr.ClassOrFile other) {
                if (other == getDefaultInstance())
                    return this;
                if (!other.declaration_.isEmpty()) {
                    if (declaration_.isEmpty()) {
                        declaration_ = other.declaration_;
                        bitField0_ &= ~0x00000001;
                    } else {
                        ensureDeclarationIsMutable();
                        declaration_.addAll(other.declaration_);
                    }

                }
                if (!other.type_.isEmpty()) {
                    if (type_.isEmpty()) {
                        type_ = other.type_;
                        bitField0_ &= ~0x00000002;
                    } else {
                        ensureTypeIsMutable();
                        type_.addAll(other.type_);
                    }

                }
                if (!other.signature_.isEmpty()) {
                    if (signature_.isEmpty()) {
                        signature_ = other.signature_;
                        bitField0_ &= ~0x00000004;
                    } else {
                        ensureSignatureIsMutable();
                        signature_.addAll(other.signature_);
                    }

                }
                if (!other.string_.isEmpty()) {
                    if (string_.isEmpty()) {
                        string_ = other.string_;
                        bitField0_ &= ~0x00000008;
                    } else {
                        ensureStringIsMutable();
                        string_.addAll(other.string_);
                    }

                }
                if (!other.body_.isEmpty()) {
                    if (body_.isEmpty()) {
                        body_ = other.body_;
                        bitField0_ &= ~0x00000010;
                    } else {
                        ensureBodyIsMutable();
                        body_.addAll(other.body_);
                    }

                }
                if (!other.debugInfo_.isEmpty()) {
                    if (debugInfo_.isEmpty()) {
                        debugInfo_ = other.debugInfo_;
                        bitField0_ &= ~0x00000020;
                    } else {
                        ensureDebugInfoIsMutable();
                        debugInfo_.addAll(other.debugInfo_);
                    }

                }
                if (other.hasFileFacadeFqName()) {
                    bitField0_ |= 0x00000040;
                    fileFacadeFqName_ = other.fileFacadeFqName_;

                }
                setUnknownFields(
                        getUnknownFields().concat(other.unknownFields));
                return this;
            }

            @Override
            public boolean isInitialized() {
                if (!hasFileFacadeFqName()) {

                    return false;
                }
                for (int i = 0; i < getDeclarationCount(); i++) {
                    if (!getDeclaration(i).isInitialized()) {

                        return false;
                    }
                }
                for (int i = 0; i < getTypeCount(); i++) {
                    if (!getType(i).isInitialized()) {

                        return false;
                    }
                }
                for (int i = 0; i < getSignatureCount(); i++) {
                    if (!getSignature(i).isInitialized()) {

                        return false;
                    }
                }
                for (int i = 0; i < getBodyCount(); i++) {
                    if (!getBody(i).isInitialized()) {

                        return false;
                    }
                }
                return true;
            }

            @Override
            public Builder mergeFrom(
                    CodedInputStream input,
                    ExtensionRegistryLite extensionRegistry)
                    throws IOException {
                JvmIr.ClassOrFile parsedMessage = null;
                try {
                    parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException e) {
                    parsedMessage = (JvmIr.ClassOrFile) e.getUnfinishedMessage();
                    throw e;
                } finally {
                    if (parsedMessage != null) {
                        mergeFrom(parsedMessage);
                    }
                }
                return this;
            }

            private void ensureDeclarationIsMutable() {
                if (!((bitField0_ & 0x00000001) == 0x00000001)) {
                    declaration_ = new ArrayList<IrDeclaration>(declaration_);
                    bitField0_ |= 0x00000001;
                }
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
             */
            @Override
            public List<IrDeclaration> getDeclarationList() {
                return Collections.unmodifiableList(declaration_);
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
             */
            @Override
            public int getDeclarationCount() {
                return declaration_.size();
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
             */
            @Override
            public IrDeclaration getDeclaration(int index) {
                return declaration_.get(index);
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
             */
            public Builder setDeclaration(
                    int index, IrDeclaration value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureDeclarationIsMutable();
                declaration_.set(index, value);

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
             */
            public Builder setDeclaration(
                    int index, IrDeclaration.Builder builderForValue) {
                ensureDeclarationIsMutable();
                declaration_.set(index, builderForValue.build());

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
             */
            public Builder addDeclaration(IrDeclaration value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureDeclarationIsMutable();
                declaration_.add(value);

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
             */
            public Builder addDeclaration(
                    int index, IrDeclaration value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureDeclarationIsMutable();
                declaration_.add(index, value);

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
             */
            public Builder addDeclaration(
                    IrDeclaration.Builder builderForValue) {
                ensureDeclarationIsMutable();
                declaration_.add(builderForValue.build());

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
             */
            public Builder addDeclaration(
                    int index, IrDeclaration.Builder builderForValue) {
                ensureDeclarationIsMutable();
                declaration_.add(index, builderForValue.build());

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
             */
            public Builder addAllDeclaration(
                    Iterable<? extends IrDeclaration> values) {
                ensureDeclarationIsMutable();
                addAll(
                        values, declaration_);

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
             */
            public Builder clearDeclaration() {
                declaration_ = Collections.emptyList();
                bitField0_ &= ~0x00000001;

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrDeclaration declaration = 1;</code>
             */
            public Builder removeDeclaration(int index) {
                ensureDeclarationIsMutable();
                declaration_.remove(index);

                return this;
            }

            private void ensureTypeIsMutable() {
                if (!((bitField0_ & 0x00000002) == 0x00000002)) {
                    type_ = new ArrayList<IrType>(type_);
                    bitField0_ |= 0x00000002;
                }
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
             */
            @Override
            public List<IrType> getTypeList() {
                return Collections.unmodifiableList(type_);
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
             */
            @Override
            public int getTypeCount() {
                return type_.size();
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
             */
            @Override
            public IrType getType(int index) {
                return type_.get(index);
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
             */
            public Builder setType(
                    int index, IrType value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureTypeIsMutable();
                type_.set(index, value);

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
             */
            public Builder setType(
                    int index, IrType.Builder builderForValue) {
                ensureTypeIsMutable();
                type_.set(index, builderForValue.build());

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
             */
            public Builder addType(IrType value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureTypeIsMutable();
                type_.add(value);

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
             */
            public Builder addType(
                    int index, IrType value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureTypeIsMutable();
                type_.add(index, value);

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
             */
            public Builder addType(
                    IrType.Builder builderForValue) {
                ensureTypeIsMutable();
                type_.add(builderForValue.build());

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
             */
            public Builder addType(
                    int index, IrType.Builder builderForValue) {
                ensureTypeIsMutable();
                type_.add(index, builderForValue.build());

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
             */
            public Builder addAllType(
                    Iterable<? extends IrType> values) {
                ensureTypeIsMutable();
                addAll(
                        values, type_);

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
             */
            public Builder clearType() {
                type_ = Collections.emptyList();
                bitField0_ &= ~0x00000002;

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IrType type = 2;</code>
             */
            public Builder removeType(int index) {
                ensureTypeIsMutable();
                type_.remove(index);

                return this;
            }

            private void ensureSignatureIsMutable() {
                if (!((bitField0_ & 0x00000004) == 0x00000004)) {
                    signature_ = new ArrayList<IdSignature>(signature_);
                    bitField0_ |= 0x00000004;
                }
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
             */
            @Override
            public List<IdSignature> getSignatureList() {
                return Collections.unmodifiableList(signature_);
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
             */
            @Override
            public int getSignatureCount() {
                return signature_.size();
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
             */
            @Override
            public IdSignature getSignature(int index) {
                return signature_.get(index);
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
             */
            public Builder setSignature(
                    int index, IdSignature value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureSignatureIsMutable();
                signature_.set(index, value);

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
             */
            public Builder setSignature(
                    int index, IdSignature.Builder builderForValue) {
                ensureSignatureIsMutable();
                signature_.set(index, builderForValue.build());

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
             */
            public Builder addSignature(IdSignature value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureSignatureIsMutable();
                signature_.add(value);

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
             */
            public Builder addSignature(
                    int index, IdSignature value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureSignatureIsMutable();
                signature_.add(index, value);

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
             */
            public Builder addSignature(
                    IdSignature.Builder builderForValue) {
                ensureSignatureIsMutable();
                signature_.add(builderForValue.build());

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
             */
            public Builder addSignature(
                    int index, IdSignature.Builder builderForValue) {
                ensureSignatureIsMutable();
                signature_.add(index, builderForValue.build());

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
             */
            public Builder addAllSignature(
                    Iterable<? extends IdSignature> values) {
                ensureSignatureIsMutable();
                addAll(
                        values, signature_);

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
             */
            public Builder clearSignature() {
                signature_ = Collections.emptyList();
                bitField0_ &= ~0x00000004;

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.common.serialization.proto.IdSignature signature = 3;</code>
             */
            public Builder removeSignature(int index) {
                ensureSignatureIsMutable();
                signature_.remove(index);

                return this;
            }

            private void ensureStringIsMutable() {
                if (!((bitField0_ & 0x00000008) == 0x00000008)) {
                    string_ = new LazyStringArrayList(string_);
                    bitField0_ |= 0x00000008;
                }
            }

            /**
             * <code>repeated string string = 4;</code>
             */
            @Override
            public ProtocolStringList
            getStringList() {
                return string_.getUnmodifiableView();
            }

            /**
             * <code>repeated string string = 4;</code>
             */
            @Override
            public int getStringCount() {
                return string_.size();
            }

            /**
             * <code>repeated string string = 4;</code>
             */
            @Override
            public String getString(int index) {
                return string_.get(index);
            }

            /**
             * <code>repeated string string = 4;</code>
             */
            @Override
            public ByteString
            getStringBytes(int index) {
                return string_.getByteString(index);
            }

            /**
             * <code>repeated string string = 4;</code>
             */
            public Builder setString(
                    int index, String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureStringIsMutable();
                string_.set(index, value);

                return this;
            }

            /**
             * <code>repeated string string = 4;</code>
             */
            public Builder addString(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureStringIsMutable();
                string_.add(value);

                return this;
            }

            /**
             * <code>repeated string string = 4;</code>
             */
            public Builder addAllString(
                    Iterable<String> values) {
                ensureStringIsMutable();
                addAll(
                        values, string_);

                return this;
            }

            /**
             * <code>repeated string string = 4;</code>
             */
            public Builder clearString() {
                string_ = LazyStringArrayList.EMPTY;
                bitField0_ &= ~0x00000008;

                return this;
            }

            /**
             * <code>repeated string string = 4;</code>
             */
            public Builder addStringBytes(
                    ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureStringIsMutable();
                string_.add(value);

                return this;
            }

            private void ensureBodyIsMutable() {
                if (!((bitField0_ & 0x00000010) == 0x00000010)) {
                    body_ = new ArrayList<JvmIr.XStatementOrExpression>(body_);
                    bitField0_ |= 0x00000010;
                }
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
             */
            @Override
            public List<JvmIr.XStatementOrExpression> getBodyList() {
                return Collections.unmodifiableList(body_);
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
             */
            @Override
            public int getBodyCount() {
                return body_.size();
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
             */
            @Override
            public JvmIr.XStatementOrExpression getBody(int index) {
                return body_.get(index);
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
             */
            public Builder setBody(
                    int index, JvmIr.XStatementOrExpression value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureBodyIsMutable();
                body_.set(index, value);

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
             */
            public Builder setBody(
                    int index, JvmIr.XStatementOrExpression.Builder builderForValue) {
                ensureBodyIsMutable();
                body_.set(index, builderForValue.build());

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
             */
            public Builder addBody(JvmIr.XStatementOrExpression value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureBodyIsMutable();
                body_.add(value);

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
             */
            public Builder addBody(
                    int index, JvmIr.XStatementOrExpression value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureBodyIsMutable();
                body_.add(index, value);

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
             */
            public Builder addBody(
                    JvmIr.XStatementOrExpression.Builder builderForValue) {
                ensureBodyIsMutable();
                body_.add(builderForValue.build());

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
             */
            public Builder addBody(
                    int index, JvmIr.XStatementOrExpression.Builder builderForValue) {
                ensureBodyIsMutable();
                body_.add(index, builderForValue.build());

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
             */
            public Builder addAllBody(
                    Iterable<? extends JvmIr.XStatementOrExpression> values) {
                ensureBodyIsMutable();
                addAll(
                        values, body_);

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
             */
            public Builder clearBody() {
                body_ = Collections.emptyList();
                bitField0_ &= ~0x00000010;

                return this;
            }

            /**
             * <code>repeated .org.jetbrains.kotlin.backend.jvm.serialization.proto.XStatementOrExpression body = 5;</code>
             */
            public Builder removeBody(int index) {
                ensureBodyIsMutable();
                body_.remove(index);

                return this;
            }

            private void ensureDebugInfoIsMutable() {
                if (!((bitField0_ & 0x00000020) == 0x00000020)) {
                    debugInfo_ = new LazyStringArrayList(debugInfo_);
                    bitField0_ |= 0x00000020;
                }
            }

            /**
             * <code>repeated string debug_info = 6;</code>
             */
            @Override
            public ProtocolStringList
            getDebugInfoList() {
                return debugInfo_.getUnmodifiableView();
            }

            /**
             * <code>repeated string debug_info = 6;</code>
             */
            @Override
            public int getDebugInfoCount() {
                return debugInfo_.size();
            }

            /**
             * <code>repeated string debug_info = 6;</code>
             */
            @Override
            public String getDebugInfo(int index) {
                return debugInfo_.get(index);
            }

            /**
             * <code>repeated string debug_info = 6;</code>
             */
            @Override
            public ByteString
            getDebugInfoBytes(int index) {
                return debugInfo_.getByteString(index);
            }

            /**
             * <code>repeated string debug_info = 6;</code>
             */
            public Builder setDebugInfo(
                    int index, String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureDebugInfoIsMutable();
                debugInfo_.set(index, value);

                return this;
            }

            /**
             * <code>repeated string debug_info = 6;</code>
             */
            public Builder addDebugInfo(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureDebugInfoIsMutable();
                debugInfo_.add(value);

                return this;
            }

            /**
             * <code>repeated string debug_info = 6;</code>
             */
            public Builder addAllDebugInfo(
                    Iterable<String> values) {
                ensureDebugInfoIsMutable();
                addAll(
                        values, debugInfo_);

                return this;
            }

            /**
             * <code>repeated string debug_info = 6;</code>
             */
            public Builder clearDebugInfo() {
                debugInfo_ = LazyStringArrayList.EMPTY;
                bitField0_ &= ~0x00000020;

                return this;
            }

            /**
             * <code>repeated string debug_info = 6;</code>
             */
            public Builder addDebugInfoBytes(
                    ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureDebugInfoIsMutable();
                debugInfo_.add(value);

                return this;
            }

            /**
             * <code>required string file_facade_fq_name = 7;</code>
             */
            @Override
            public boolean hasFileFacadeFqName() {
                return ((bitField0_ & 0x00000040) == 0x00000040);
            }

            /**
             * <code>required string file_facade_fq_name = 7;</code>
             */
            @Override
            public String getFileFacadeFqName() {
                Object ref = fileFacadeFqName_;
                if (!(ref instanceof String)) {
                    ByteString bs =
                            (ByteString) ref;
                    String s = bs.toStringUtf8();
                    if (bs.isValidUtf8()) {
                        fileFacadeFqName_ = s;
                    }
                    return s;
                } else {
                    return (String) ref;
                }
            }

            /**
             * <code>required string file_facade_fq_name = 7;</code>
             */
            public Builder setFileFacadeFqName(
                    String value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000040;
                fileFacadeFqName_ = value;

                return this;
            }

            /**
             * <code>required string file_facade_fq_name = 7;</code>
             */
            @Override
            public ByteString
            getFileFacadeFqNameBytes() {
                Object ref = fileFacadeFqName_;
                if (ref instanceof String) {
                    ByteString b =
                            ByteString.copyFromUtf8(
                                    (String) ref);
                    fileFacadeFqName_ = b;
                    return b;
                } else {
                    return (ByteString) ref;
                }
            }

            /**
             * <code>required string file_facade_fq_name = 7;</code>
             */
            public Builder setFileFacadeFqNameBytes(
                    ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                }
                bitField0_ |= 0x00000040;
                fileFacadeFqName_ = value;

                return this;
            }

            /**
             * <code>required string file_facade_fq_name = 7;</code>
             */
            public Builder clearFileFacadeFqName() {
                bitField0_ &= ~0x00000040;
                fileFacadeFqName_ = getDefaultInstance().getFileFacadeFqName();

                return this;
            }

            // @@protoc_insertion_point(builder_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.ClassOrFile)
        }

        // @@protoc_insertion_point(class_scope:org.jetbrains.kotlin.backend.jvm.serialization.proto.ClassOrFile)
    }

    // @@protoc_insertion_point(outer_class_scope)
}
